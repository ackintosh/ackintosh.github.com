<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 暁</title>
    <link>https://ackintosh.github.io/tags/java/</link>
    <description>Recent content in Java on 暁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2012</copyright>
    <lastBuildDate>Sun, 19 Nov 2017 17:41:55 +0900</lastBuildDate>
    
	<atom:link href="https://ackintosh.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CopyOnWriteArrayList でリストを安全に更新する</title>
      <link>https://ackintosh.github.io/blog/2017/11/19/copy-on-write-array-list/</link>
      <pubDate>Sun, 19 Nov 2017 17:41:55 +0900</pubDate>
      
      <guid>https://ackintosh.github.io/blog/2017/11/19/copy-on-write-array-list/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.hyuki.com/dp/dp2.html&#34;&gt;デザインパターン入門 マルチスレッド編&lt;/a&gt; に、マルチスレッドプログラムの評価基準として &lt;code&gt;安全性&lt;/code&gt; &lt;code&gt;生存性&lt;/code&gt; &lt;code&gt;再利用性&lt;/code&gt; が挙げられている。安全性とはオブジェクトのフィールドが意図した値を保っていることで、安全性が保たれているクラスをスレッドセーフなクラスという。&lt;br /&gt;
マルチスレッドプログラミングにおいてオブジェクトを安全に更新するには、操作が競合しないように synchronized などを使った排他制御の工夫が必要。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>synchronized メソッドの挙動を JVM のスレッドダンプを見ながら確かめる</title>
      <link>https://ackintosh.github.io/blog/2017/11/04/java-synchronized/</link>
      <pubDate>Sat, 04 Nov 2017 17:56:28 +0900</pubDate>
      
      <guid>https://ackintosh.github.io/blog/2017/11/04/java-synchronized/</guid>
      <description>&lt;p&gt;最近、趣味で Java 製プロダクトをいじっていたり、&lt;a href=&#34;https://www.amazon.co.jp/%E5%A2%97%E8%A3%9C%E6%94%B9%E8%A8%82%E7%89%88-Java%E8%A8%80%E8%AA%9E%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E5%85%A5%E9%96%80-%E3%83%9E%E3%83%AB%E3%83%81%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E7%B7%A8-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797331623&#34;&gt;デザインパターン入門マルチスレッド編&lt;/a&gt;を読んでいることもあって Java のコードを書くようになった。&lt;br /&gt;
これまでほぼ PHP しかやってこなかったので &lt;a href=&#34;https://docs.oracle.com/javase/jp/7/api/java/util/concurrent/package-summary.html&#34;&gt;java.util.concurrent パッケージ&lt;/a&gt; の充実っぷりに衝撃をうけた。これらのクラスを使って分散アルゴリズムの実装に挑戦してみたい。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>