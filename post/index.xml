<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 暁</title>
    <link>http://ackintosh.github.io/post/</link>
    <description>Recent content in Posts on 暁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2012</copyright>
    <lastBuildDate>Sun, 06 Nov 2016 23:34:32 +0900</lastBuildDate>
    <atom:link href="http://ackintosh.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>2016.11.06 </title>
      <link>http://ackintosh.github.io/blog/2016/11/06/2016-11-06/</link>
      <pubDate>Sun, 06 Nov 2016 23:34:32 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/11/06/2016-11-06/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/ackintosh/snidel&#34;&gt;Snidel&lt;/a&gt;のアーキテクチャをゴリッと変えてる途中。なぜかユニットテストが通らなくて困ってる。&lt;/p&gt;

&lt;p&gt;PHPUnit の方がおかしいんじゃないかと思ってきたので PHPUnit のコードを追ってみるかー、というところで集中力が切れた。&lt;/p&gt;

&lt;p&gt;最近チームにジョインした方から&lt;a href=&#34;http://amzn.to/2frizwK&#34;&gt;PHPはどのように動くのか&lt;/a&gt;を貸してもらったので1章を読んだ。 print と echo どっちが速いのかを、単純に計測するだけじゃなくてオペコードを比較して、なぜ速度が違うのかを追っていくので納得感がある。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=akihito0a-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B0158EC1FO&amp;linkId=699b4b28532db4b7acf58bc38eb7ae73&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>2016.11.05 Tycho</title>
      <link>http://ackintosh.github.io/blog/2016/11/05/2016-11-05/</link>
      <pubDate>Sat, 05 Nov 2016 12:56:56 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/11/05/2016-11-05/</guid>
      <description>&lt;p&gt;たまたま Youtube の関連動画にあったので聴いてみたらとても癒やされた。&lt;/p&gt;

&lt;p&gt;Tycho(ティコ)&lt;br /&gt;
&lt;a href=&#34;http://tychomusic.com/&#34;&gt;http://tychomusic.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ググってわかったことを並べると、&lt;/p&gt;

&lt;p&gt;アメリカ西海岸のアーティストで、ジャンルはエレクトロとかアンビエント。今はバンド編成だが、もともとは Scott Hansen のソロプロジェクトだったらしい。&lt;/p&gt;

&lt;p&gt;Scott Hansen は &lt;a href=&#34;http://blog.iso50.com/&#34;&gt;ISO50&lt;/a&gt; という名前でフォトグラファー・デザイナーとしても知られてるようで、CDジャケット等でも彼の作品が使われている。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/JY-wzE2v2xM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Youtube で初めて聴いたのがこの動画。&lt;/p&gt;

&lt;p&gt;ゆっくり降ってくる音楽のシャワーで日々の疲れが癒やされてくような感覚が気持ちよかった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【ペパボ×プレイド】Tech Meetup で LT</title>
      <link>http://ackintosh.github.io/blog/2016/10/27/pepabo_plaid_lt/</link>
      <pubDate>Thu, 27 Oct 2016 21:59:18 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/10/27/pepabo_plaid_lt/</guid>
      <description>

&lt;p&gt;場所は&lt;a href=&#34;https://www.google.co.jp/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwjx4vPDjYXQAhUBErwKHdXbC0sQFggkMAA&amp;amp;url=https%3A%2F%2Fplaid.co.jp%2F&amp;amp;usg=AFQjCNEnanIqoRljdEgfkMOHG4ZV_TRZbw&amp;amp;sig2=1UqILw-ttShPafI83trptw&#34;&gt;プレイド&lt;/a&gt;さん。&lt;br /&gt;
オフィススペースと隣り合った一角がカフェみたいになっていて、そこに椅子とスクリーンを並べたかたちの会場。角のカウンターにはコーヒーサイフォンが並んでいて大変オシャレでした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;embedly-card&#34; data-card-key=&#34;916e111541fe433792c1330eb7eba55b&#34; data-card-type=&#34;article-full&#34;&gt;&lt;h4&gt;&lt;a href=&#34;http://plaidtech.connpass.com/event/41401/&#34;&gt;【ペパボ×プレイド】Tech Meetup 〜自動テスト・CI編〜 (2016/10/27 19:00〜)&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;概要 GMOペパボ株式会社と、プレイドの2社で勉強会を開催します！ 今回のテーマは【CI・テスト自動化】 &lt;/p&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//cdn.embedly.com/widgets/platform.js&#34; charset=&#34;UTF-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h4 id=&#34;発表資料:43e4161f97d7438e671829a522c88d1b&#34;&gt;発表資料&lt;/h4&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;0da601e2e2f1483b9cb21791d7bb0e0c&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ackintosh/snidel&#34;&gt;Snidel&lt;/a&gt;を作っていて、並列処理って難しいなぁと感じることがあったので、それをテストの観点で（Snidelの宣伝を挟みつつ）発表。&lt;/p&gt;

&lt;h4 id=&#34;振り返ってみて:43e4161f97d7438e671829a522c88d1b&#34;&gt;振り返ってみて&lt;/h4&gt;

&lt;p&gt;前回とはまた違った大変さと達成感がありました。&lt;/p&gt;

&lt;p&gt;7月に&lt;a href=&#34;http://ackintosh.github.io/blog/2016/07/20/phpblt5/&#34;&gt;人生初LT&lt;/a&gt;をしてから約2ヶ月経ったころ、&lt;br /&gt;
社内で発表者を募集してるのを見て、ネタは無いけどとりあえず立候補するか！（PHPBLTで &lt;a href=&#34;https://twitter.com/sotarok?lang=ja&#34;&gt;@sotarok&lt;/a&gt; さんが &amp;ldquo;発表内容は応募してから考えればいい！&amp;rdquo; って言ってたし）ということで発表することにしました。&lt;/p&gt;

&lt;p&gt;が、（自分の経験不足や、会社の名前が出てる勉強ということもあってか）、&amp;rdquo;発表内容どうしよう&amp;hellip;&amp;rdquo; という不安とプレッシャーが思いの外大きくて、ここ1ヶ月くらいは内容を練るのと資料作りで必死でした。&lt;/p&gt;

&lt;p&gt;なんとか絞りだした内容を&lt;a href=&#34;http://diary.shu-cream.net/2016/09/01/ec-ctl.html&#34;&gt;チーフテクニカルリード&lt;/a&gt;に相談しつつブラッシュアップしてなんとか発表を終えられてホッとしています。&lt;/p&gt;

&lt;h5 id=&#34;追記:43e4161f97d7438e671829a522c88d1b&#34;&gt;追記&lt;/h5&gt;

&lt;p&gt;プレイドさんのブログに開催エントリが公開されました！&lt;br /&gt;
みなさま、ありがとうございました！&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;embedly-card&#34; data-card-key=&#34;916e111541fe433792c1330eb7eba55b&#34; data-card-controls=&#34;0&#34; data-card-type=&#34;article&#34; href=&#34;http://tech.plaid.co.jp/ci-testautomation-meetup/&#34;&gt;【ペパボ×プレイド】Tech Meetup 〜自動テスト・CI編〜を開催しました！&lt;/a&gt;
&lt;script async src=&#34;//cdn.embedly.com/widgets/platform.js&#34; charset=&#34;UTF-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016.10.05 LTの準備</title>
      <link>http://ackintosh.github.io/blog/2016/10/05/2016-10-05/</link>
      <pubDate>Wed, 05 Oct 2016 22:38:30 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/10/05/2016-10-05/</guid>
      <description>&lt;p&gt;LTを申し込んでから何か発表できることがないかずっと悩んでたけど、ようやく内容が決まってきた。&lt;/p&gt;

&lt;p&gt;無理やり絞り出した感じなので矛盾が無いか不安。&lt;br /&gt;
なるはやでスライドを作ってCTLに見てもらおう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016.09.22 Snidel 0.8にむけて</title>
      <link>http://ackintosh.github.io/blog/2016/09/22/2016-09-22/</link>
      <pubDate>Thu, 22 Sep 2016 21:12:52 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/09/22/2016-09-22/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/ackintosh/snidel&#34;&gt;Snidel&lt;/a&gt;のキューの部分で、専用のミドルウェアや Saas を使えるようにすべく開発をはじめた。&lt;/p&gt;

&lt;p&gt;まずは Amazon SQS 用のプラグイン(?)に着手。&lt;br /&gt;
&lt;a href=&#34;https://github.com/ackintosh/snidel-queue-sqs&#34;&gt;https://github.com/ackintosh/snidel-queue-sqs&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016.09.21 LT駆動</title>
      <link>http://ackintosh.github.io/blog/2016/09/21/2016-09-21/</link>
      <pubDate>Wed, 21 Sep 2016 15:01:28 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/09/21/2016-09-21/</guid>
      <description>&lt;p&gt;社外向け勉強会の発表者が募集されていたので立候補した。ネタがあるわけじゃなかったけど、1ヶ月くらい先なのでなんとかなるだろうと。&lt;/p&gt;

&lt;p&gt;7月に人生初LTしてからの2回目。&lt;/p&gt;

&lt;p&gt;もう緊張してきた。。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>お産合宿10</title>
      <link>http://ackintosh.github.io/blog/2016/09/16/osan10/</link>
      <pubDate>Fri, 16 Sep 2016 17:58:26 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/09/16/osan10/</guid>
      <description>

&lt;p&gt;お産合宿10に参加しました。&lt;/p&gt;

&lt;h3 id=&#34;お産合宿とは:182ec1678fcd68bd77a56e167e411732&#34;&gt;お産合宿とは&lt;/h3&gt;

&lt;p&gt;普段の部署や職種を超えてチームを組んで新サービス等のアウトプットを &amp;ldquo;産み出す&amp;rdquo; 合宿イベントで、2007年から始まって今回で10回目になります。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;embedly-card&#34; data-card-key=&#34;916e111541fe433792c1330eb7eba55b&#34; data-card-type=&#34;article-full&#34;&gt;&lt;h4&gt;&lt;a href=&#34;http://osan.pepabo.com/&#34;&gt;お産合宿10 | GMOペパボ株式会社&lt;/a&gt;&lt;/h4&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//cdn.embedly.com/widgets/platform.js&#34; charset=&#34;UTF-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;合宿&amp;rdquo;という名のとおり、1泊2日で旅館に泊まってガッツリ集中して取り組みます。&lt;/p&gt;

&lt;p&gt;宿泊場所は開催ごとに異なるようです。今回は土善旅館にお世話になりました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;embedly-card&#34; data-card-key=&#34;916e111541fe433792c1330eb7eba55b&#34; data-card-type=&#34;article-full&#34;&gt;&lt;h4&gt;&lt;a href=&#34;http://www.dozenryokan.com/&#34;&gt;土善旅館[弓道合宿・開発合宿]&lt;/a&gt;&lt;/h4&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//cdn.embedly.com/widgets/platform.js&#34; charset=&#34;UTF-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;サイトのTOPに &amp;ldquo;開発合宿プラン&amp;rdquo; のバナーがあって、こんな旅館があるんだなぁと驚きました。界隈では有名なのでしょうか。旅館の休憩スペースの本棚に、漫画に紛れてマスタリングTCP/IP等の技術書が並んでいて流石だなぁという感じでした。&lt;/p&gt;

&lt;h3 id=&#34;チーム:182ec1678fcd68bd77a56e167e411732&#34;&gt;チーム&lt;/h3&gt;

&lt;p&gt;&lt;blockquote class=&#34;embedly-card&#34; data-card-key=&#34;916e111541fe433792c1330eb7eba55b&#34; data-card-image=&#34;http://img-cdn.jg.jugem.jp/b8d/927914/20160831_1372849.png&#34; data-card-type=&#34;article-full&#34;&gt;&lt;h4&gt;&lt;a href=&#34;http://osan.pepabo.com/?eid=155&#34;&gt;アンチポップチリペッパーズ | お産合宿10&lt;/a&gt;&lt;/h4&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//cdn.embedly.com/widgets/platform.js&#34; charset=&#34;UTF-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;アンチポップチリペッパーズというチームで、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CTOのあんちぽさん&lt;/li&gt;
&lt;li&gt;カスタマーサポート マネージャーのうーたんさん&lt;/li&gt;
&lt;li&gt;デザイナーのほらおさん&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と自分です。&lt;/p&gt;

&lt;p&gt;サービスを考えるのは苦手なのですが、折角の機会なので何か作りたいという思いで便乗させていただきました。&lt;/p&gt;

&lt;h3 id=&#34;つくったもの:182ec1678fcd68bd77a56e167e411732&#34;&gt;つくったもの&lt;/h3&gt;

&lt;p&gt;公開していないのでモノがみれないのですが&lt;br /&gt;
&lt;a href=&#34;http://osan.pepabo.com/?eid=194&#34;&gt;最終発表の様子&lt;/a&gt;がわかりやすいかもしれません。&lt;/p&gt;

&lt;p&gt;予めアプリにトラックが用意されていて、それを使ってラップ等のパフォーマンスをアプリで簡単に録画・公開できるという感じです。
（&lt;a href=&#34;https://vine.co/&#34;&gt;vine&lt;/a&gt;を想像していただくとわかりやすいと思います）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ラップはできるけど、トラックがつくれない&lt;/li&gt;
&lt;li&gt;トラックはつくれるけど、ラップができない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という人たちをつなごうというアプリです。&lt;/p&gt;

&lt;h3 id=&#34;やったこと:182ec1678fcd68bd77a56e167e411732&#34;&gt;やったこと&lt;/h3&gt;

&lt;h5 id=&#34;iosアプリ-swift:182ec1678fcd68bd77a56e167e411732&#34;&gt;iOSアプリ(swift)&lt;/h5&gt;

&lt;p&gt;アプリ開発初挑戦。swift の構文をざっと playground で試したあと早速アプリ開発に取り掛かったのですが、APIを叩いて一覧を表示するビューを実装するだけでも数時間かかってしまったり、、、とにかく何をするにもハマりながら少しずつ進めてく感じでした。&lt;/p&gt;

&lt;p&gt;動画と音声の合成処理はあんちぽさんが実装してくださったので、自分はAPIサーバーと通信するところや twitter 認証とか、他の細々としたところを作りました。&lt;/p&gt;

&lt;h5 id=&#34;apiサーバー-golang:182ec1678fcd68bd77a56e167e411732&#34;&gt;APIサーバー(golang)&lt;/h5&gt;

&lt;p&gt;APIサーバーは golang で、&lt;a href=&#34;https://echo.labstack.com/&#34;&gt;Echo&lt;/a&gt;というフレームワークを使いました。&lt;/p&gt;

&lt;p&gt;golang は、前にいくつか&lt;a href=&#34;https://github.com/ackintosh/pound&#34;&gt;ツール&lt;/a&gt;を作ったことがあったので iOS アプリよりはさくさくと進められました。&lt;/p&gt;

&lt;p&gt;とはいえ今までサービス開発では php + apache しか経験がないので、プロセス管理とかデプロイをどうしたら良いのかと試行錯誤していました。その辺は別途記事にしています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ackintosh.github.io/blog/2016/08/17/golang_deamonize_deploy/&#34;&gt;Goアプリのデーモン化とデプロイの仕組み&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;なかなか進捗しなかった:182ec1678fcd68bd77a56e167e411732&#34;&gt;なかなか進捗しなかった&lt;/h5&gt;

&lt;p&gt;さすがに1泊2日の合宿中に動くものを作るのは無理なので、実際は1ヶ月前くらいからガッツリやっていました。それでも、慣れない技術を使っているのでなかなか進捗せず、色々と機能を削って最小限でなんとか合宿の最後のデモに間に合ったかたちでした。&lt;/p&gt;

&lt;h3 id=&#34;感想:182ec1678fcd68bd77a56e167e411732&#34;&gt;感想&lt;/h3&gt;

&lt;p&gt;いままで触ったことのない技術を使えたのでとても良い経験になりました。&lt;/p&gt;

&lt;p&gt;一方で、初めての技術が多くて、何か機能を実装しようとしても、そもそも実装方法を調べながらやっていく関係でかかる時間が想定できないので、今回のように明確に期日が決まってる開発をするには結構なプレッシャーがありました。&lt;/p&gt;

&lt;p&gt;また、合宿中は色々とハマってほぼ進捗を出せませんでした。&lt;/p&gt;

&lt;p&gt;突然 Xcode のビルドが落ちてあれこれ調べても原因がわからず絶望していると、また突然ビルドできるようになって、、、一体何だったんだろうと、現象を消化しきれず疲れたり&amp;hellip; とあるライブラリの謎の挙動になやまされて疲れたり&amp;hellip;&lt;/p&gt;

&lt;p&gt;とにかく疲れたのですがその辺も含めて良い経験だったと思います。&lt;/p&gt;

&lt;p&gt;アンチポップチリペッパーズ、そして参加チームのみなさんお疲れ様でした。&lt;br /&gt;
土善旅館のみなさん、お世話になりました。夕飯の豚、美味しかったです。&lt;br /&gt;
そして合宿運営のみなさん、ありがとうございました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Snidel 0.7 をリリースしました</title>
      <link>http://ackintosh.github.io/blog/2016/09/09/snidel_0_7_0/</link>
      <pubDate>Fri, 09 Sep 2016 23:58:13 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/09/09/snidel_0_7_0/</guid>
      <description>

&lt;p&gt;今回のリリースでは実装をシンプルにするために機能を削除しました。&lt;/p&gt;

&lt;h4 id=&#34;削除した機能:8b8d658c70dd916a2c83cfce3cead93b&#34;&gt;削除した機能&lt;/h4&gt;

&lt;p&gt;バージョン 0.2 で実装した &lt;code&gt;Snidel::map()&lt;/code&gt; です。 この機能についての説明は &lt;a href=&#34;http://ackintosh.github.io/blog/2015/11/08/snidel_0_2_0/#複数の処理を並列につなげて実行:ee76cbb32354dec37a8e590548214889&#34;&gt;Snidel 0.2 をリリースしました&lt;/a&gt; に書いています。&lt;/p&gt;

&lt;h4 id=&#34;削除した理由:8b8d658c70dd916a2c83cfce3cead93b&#34;&gt;削除した理由&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://ackintosh.github.io/blog/2016/05/04/snidel_0_6_0/&#34;&gt;バージョン 0.6 で内部的なアーキテクチャを大幅に変更&lt;/a&gt;して、親プロセス・子プロセスの間でデータの受け渡し方が変わったのですが、0.6 の時点では &lt;code&gt;Snidel::map()&lt;/code&gt; は対応できておらず、旧方式のままでした。&lt;/p&gt;

&lt;p&gt;当初は &lt;code&gt;Snidel::map()&lt;/code&gt; も変えていこうと考えていましたが実装が難しかったのと、よくよく考えてみると 0.2 リリース時の記事に書いてるとおり、この機能は実験的に作ったので「並列処理を手軽に実行する」という Snidel で解決したい課題にはそもそも必要ないんじゃないかと思いはじめました。&lt;/p&gt;

&lt;p&gt;なのでバッサリ削除してシンプルにすることにしました。&lt;/p&gt;

&lt;p&gt;おかげでコードもすっきりして、カバレッジや Scrutinizer のスコアも改善しました。&lt;/p&gt;

&lt;p&gt;（削除した部分は、別のライブラリとして作るかもしれません）&lt;/p&gt;

&lt;h4 id=&#34;今後の展望:8b8d658c70dd916a2c83cfce3cead93b&#34;&gt;今後の展望&lt;/h4&gt;

&lt;p&gt;Snidel がタスクを子プロセスに渡したり、その処理結果を受け取る際に system v message queue を使っているのですが、これを外部ストレージも使えるようにしたいです。その理由も含めて、次回リリース時の記事にまとめたいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016.09.04 ド素人</title>
      <link>http://ackintosh.github.io/blog/2016/09/04/2016-09-04/</link>
      <pubDate>Sun, 04 Sep 2016 22:08:07 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/09/04/2016-09-04/</guid>
      <description>&lt;p&gt;なんとなく無気力になってダラダラと過ごしてしまった。&lt;/p&gt;

&lt;p&gt;コンパイラ入門 4章 字句解析器生成系lex を読んだ。とりあえず読んだだけなので、実際にlex記述とかは明日やろう。&lt;/p&gt;

&lt;p&gt;読みながら &lt;a href=&#34;https://github.com/ackintosh/phg&#34;&gt;PHG&lt;/a&gt; を実装していた時の事を思い出した。わからないなりにネットで調べながら lexer とか書いてみたけど、あまり理解できてない状態でやってたので、とりあえず echo を実装できたっぽいけどなんとなく消化不良な感じがあって、いつの間にか放置してた。&lt;/p&gt;

&lt;p&gt;当たり前だけど、ちゃんと本とかで体系的に勉強しながらやったほうが面白い。でもコンパイラ関連の技術書は難しそうなの（実際に読んだわけじゃないけど..）が多いのでハードルが高く感じる。&lt;/p&gt;

&lt;p&gt;その点、コンパイラ入門は自分のようなド素人でも読み進められているので本当に助かる。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=akihito0a-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=4781912052&amp;linkId=050fc3a126d8dcc34a9723ee517014ac&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>2016.08.30 社内ISUCON</title>
      <link>http://ackintosh.github.io/blog/2016/08/30/2016-08-30/</link>
      <pubDate>Tue, 30 Aug 2016 19:13:36 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/08/30/2016-08-30/</guid>
      <description>

&lt;p&gt;チューニングコンテストISUCONの社内版が初開催された。&lt;/p&gt;

&lt;p&gt;結果としては、採点のために運営がサーバーを再起動した後、 &lt;strong&gt;ファイルシステム破損でサーバーがお亡くなりになってしまい採点不可で終わった&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;いま思えば異常にターミナルの反応が遅かったり、何も変更していないのにベンチマークの結果が上下したりとサーバー不調の兆候が出ていたようだ。&lt;/p&gt;

&lt;p&gt;すぐに運営に相談すれば良かったのだが何故か競技中は、皆同じ状況でやっていると思い込んでいた。&lt;/p&gt;

&lt;p&gt;ターミナルの反応が異常に遅かったり、補完が効かなかったりしたので生産性が全く上がらないし、ベンチマークの結果が安定しないので修正の効果が確認できなかった。&lt;/p&gt;

&lt;h4 id=&#34;教訓:81cc2c85995b037bc02c2ccb641b682b&#34;&gt;教訓&lt;/h4&gt;

&lt;p&gt;サーバーの調子おかしくない？という時は速やかに運営に相談しよう&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016.08.27 apache &#43; mod_php脳</title>
      <link>http://ackintosh.github.io/blog/2016/08/27/2016-08-27/</link>
      <pubDate>Sat, 27 Aug 2016 23:50:45 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/08/27/2016-08-27/</guid>
      <description>&lt;p&gt;コンパイラ入門　3章を読んだ。&lt;br /&gt;
なんとなくの理解なので、ちゃんと復習しないとすぐ忘れそう。&lt;/p&gt;

&lt;p&gt;apache + php 脳なので、GoでWebアプリを作ってると、&lt;br /&gt;
“アッ、デーモン化どうしよう” とか “アクセスログを出力するようにしなきゃ” みたいなのが多くい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016.08.20 ポインタへの格下げ</title>
      <link>http://ackintosh.github.io/blog/2016/08/20/2016-08-20/</link>
      <pubDate>Sat, 20 Aug 2016 17:01:43 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/08/20/2016-08-20/</guid>
      <description>&lt;p&gt;近くのドトールでもくもくとCを触る。&lt;/p&gt;

&lt;p&gt;コンパイラ入門を2章まで読んだ。コンパイラの構成（フロントエンド、バックエンド）の解説と、例題として実装していく言語SL/0, SL/1の仕様の説明。めっちゃシンプルな仕様なので自分のような超初心者にピッタリ。まだ内容についていけている。&lt;/p&gt;

&lt;p&gt;Head First Cも2章の途中まで進んだ。途中、配列変数がポインタへ格下げされる仕様にハマったのでメモ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void f(char s[])
{
	// 関数に配列を渡すとポインタに格下げされ、配列のサイズについての情報を失うため
	// ポインタのサイズが出力される.
	// -&amp;gt; 8 (64bitマシンの場合)
	printf(&amp;quot;%lu\n&amp;quot;, sizeof(s));
	
	// コンパイル時に警告してくれる
	// blog.c:4:27: warning: sizeof on array function parameter will return size of &#39;char *&#39; instead of &#39;char []&#39; [-Wsizeof-array-argument]
}

int main()
{
	char s[] = &amp;quot;How big is it?&amp;quot;;

	// 配列変数が配列のサイズを保持しているため
	// 配列のサイズが出力される.
	// -&amp;gt; 15 (14文字 + 改行)
	printf(&amp;quot;%lu\n&amp;quot;, sizeof(s));

	f(s);
	
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>2016.08.17 集中力, コンパイラ</title>
      <link>http://ackintosh.github.io/blog/2016/08/17/2016-08-17/</link>
      <pubDate>Wed, 17 Aug 2016 19:24:09 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/08/17/2016-08-17/</guid>
      <description>&lt;p&gt;夏休み最終日。&lt;/p&gt;

&lt;p&gt;Youtube でマリオメーカーの鬼畜ステージに挑戦している模様がライブ配信されていて、ステージの鬼畜っぷりとプレイヤーの超絶テクニックに見入ってしまった。高々とそびえ立つ針山を絶妙なタイミングの三段ジャンプでスレスレで飛び越えたり、バネを持った状態でジャンプして空中でそれを利用するというアクロバティックな動きに魅了された。&lt;/p&gt;

&lt;p&gt;アクションを少しでもミスすれば即死。1周するのに150秒くらいかかるコースを3周して、ようやくステージクリアという鬼畜ステージにプレイヤーは1時間以上 挑戦し続けてもまるで集中力が切れる様子がない。というよりリラックスしてプレイするように努めているようにも感じた。&lt;/p&gt;

&lt;p&gt;結局、見ている自分の集中力が切れた。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Head First C の1章をやった。LL言語、というか php ばかりの自分にとってはソースコードを自分でコンパイルする事すら新鮮でなんか楽しい。コンパイラを身近に感じられた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://rebuild.fm/153/&#34;&gt;rebuild.fm #153&lt;/a&gt; で Rui Ueyama さんがコンパイラを実装した話をされていてとても興味深い。システムプログラミングの話は聴いていてワクワクする。宇宙の話を聴いてるときのワクワクに近いかもしれない。&lt;/p&gt;

&lt;p&gt;自分は、コンパイラを実装するのがどれほど大変なのかが理解できてない程度に無知なので、まずは大変さを理解する意味でコンパイラの実装に挑戦してみるのも良いかな。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Goアプリのデーモン化とデプロイの仕組み</title>
      <link>http://ackintosh.github.io/blog/2016/08/17/golang_deamonize_deploy/</link>
      <pubDate>Wed, 17 Aug 2016 12:40:37 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/08/17/golang_deamonize_deploy/</guid>
      <description>

&lt;p&gt;社内の某合宿イベントで、Go製の軽量WAF &lt;a href=&#34;https://echo.labstack.com/&#34;&gt;Echo&lt;/a&gt; を使ったAPIサーバーを作ろうとしていて、夏休み中にデーモン化とデプロイの仕組みを作ってみたので、ちょっとまとまりきってないですが忘れないうちにメモしておきます。&lt;/p&gt;

&lt;p&gt;慣れない事が多くて試行錯誤しながら丸一日使ってめっちゃ疲れたけど勉強になった。hot deploy の仕組みが大変興味深いです。（&lt;a href=&#34;#参考記事:c89a01ea34ec3d3b965d2855f1d3c3d0&#34;&gt;参考記事&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;試行錯誤した結果、利用するツール・ライブラリは下記になりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;デーモン化&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://supervisord.org/&#34;&gt;supervisord&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;デプロイ&lt;br /&gt;
（githubに push したら アプリケーションサーバーが webhook 通知を受信してビルド・graceful restart する）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebookgo/grace&#34;&gt;facebookgo/grace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mattn/gost&#34;&gt;mattn/gost&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(デプロイの図)
&lt;img src=&#34;http://ackintosh.github.io/images/golang_deamonize_deploy.png&#34; alt=&#34;deploy&#34; /&gt;
&lt;/p&gt;

&lt;h5 id=&#34;試行錯誤:c89a01ea34ec3d3b965d2855f1d3c3d0&#34;&gt;試行錯誤&lt;/h5&gt;

&lt;p&gt;試行錯誤や調査の結果、利用を見送ったもの。&lt;/p&gt;

&lt;p&gt;daemontools (プロセス管理)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;インストールが難しそう&lt;/li&gt;
&lt;li&gt;開発がアクティブじゃない&lt;/li&gt;
&lt;li&gt;パッチを当てないといけない様子&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　→ supervisord の方がインストール楽だし、設定も簡単&lt;/p&gt;

&lt;p&gt;go-server-starter (ホットデプロイ)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;graceful shutdown に対応していない&lt;/li&gt;
&lt;li&gt;graceful shutdown に対応するために manners を使おうとするとアプリケーションのソースコードに手をいれないといけない

&lt;ul&gt;
&lt;li&gt;Echo のレールから外れてしまう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　→ grace なら最小限の変更で済む。公式に&lt;a href=&#34;https://echo.labstack.com/recipes/graceful-shutdown&#34;&gt;サンプルコード&lt;/a&gt;がある。&lt;/p&gt;

&lt;h5 id=&#34;展望:c89a01ea34ec3d3b965d2855f1d3c3d0&#34;&gt;展望&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;ビルドサーバーを用意してバイナリを配布する仕組みを作ってみたい&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/monochromegane/torokko&#34;&gt;monochromegane/torokko&lt;/a&gt; が気になる。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.monochromegane.com/blog/2015/08/16/deploy-golang-by-cargo/&#34;&gt;Goのデプロイを「もっと」簡単にする。ビルドプロキシCargo。改めTorokko。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;参考記事:c89a01ea34ec3d3b965d2855f1d3c3d0&#34;&gt;参考記事&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.yusuke.be/entry/2016/01/18/111838&#34;&gt;Golangを初めて本番投入したぜ！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shogo82148.github.io/blog/2015/05/03/golang-graceful-restart/&#34;&gt;Go言語でGraceful Restartをする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.shibayu36.org/entry/2012/05/07/201556&#34;&gt;Server::Starterから学ぶhot deployの仕組み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.livedoor.jp/sonots/archives/40248661.html&#34;&gt;「Server::Starterに対応するとはどういうことか」の補足&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattn.kaoriya.net/software/lang/go/20130918122901.htm&#34;&gt;Go言語でWebAppの運用に必要なN個のこと&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2016.08.14 華の湯</title>
      <link>http://ackintosh.github.io/blog/2016/08/15/2016-08-14/</link>
      <pubDate>Mon, 15 Aug 2016 17:15:54 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/08/15/2016-08-14/</guid>
      <description>&lt;p&gt;久しぶりに実家近くの日帰り温泉に行ってきた。&lt;/p&gt;

&lt;p&gt;場所は東武伊勢崎線 羽生駅 徒歩3分。ホテルに併設された温泉施設。&lt;/p&gt;

&lt;p&gt;源泉かけ流しの露天風呂やサウナ等ひととおり揃っていて、交通の便が良い割に周辺の他の温泉より混まないのでゆっくりできる。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;embedly-card&#34; data-card-key=&#34;916e111541fe433792c1330eb7eba55b&#34; data-card-type=&#34;article&#34;&gt;&lt;h4&gt;&lt;a href=&#34;http://www.route-inn.co.jp/hananoyu/index.html&#34;&gt;華のゆ｜羽生&lt;/a&gt;&lt;/h4&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//cdn.embedly.com/widgets/platform.js&#34; charset=&#34;UTF-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Pontaカードが使えるのでポイントが溜められて、10回来店ごとに無料券をもらえる。しかも無料券を使った場合も1回にカウントされるのでお得感がある。&lt;/p&gt;

&lt;p&gt;今日行ったらちょうど70回目の来店で、無料券をもらった。&lt;/p&gt;

&lt;p&gt;明日、東京に戻るついでに寄っていこう。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>