<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 暁</title>
    <link>http://ackintosh.github.io/post/</link>
    <description>Recent content in Posts on 暁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2012</copyright>
    <lastBuildDate>Sat, 17 Dec 2016 21:24:33 +0900</lastBuildDate>
    <atom:link href="http://ackintosh.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>充実した1年のスタートを ― PHPで</title>
      <link>http://ackintosh.github.io/blog/2016/12/17/pepabo_advent_calendar2016/</link>
      <pubDate>Sat, 17 Dec 2016 21:24:33 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/12/17/pepabo_advent_calendar2016/</guid>
      <description>

&lt;p&gt;この記事は &lt;a href=&#34;http://qiita.com/advent-calendar/2016/pepabo&#34;&gt;pepabo Advent Calendar 2016&lt;/a&gt; 17日目の記事です。&lt;br /&gt;
昨日は genkiroid さんの &lt;a href=&#34;https://genkiroid.github.io/2016/12/16/about-turpan/&#34;&gt;PHPのrequire系ステートメントと断捨離について&lt;/a&gt; でした。コードを断捨離していきましょう!!!&lt;/p&gt;

&lt;h4 id=&#34;ご存知でしょうか:4c50acdb0cca17e91fd65b0a0e43887e&#34;&gt;ご存知でしょうか？&lt;/h4&gt;

&lt;p&gt;珍しい組み込み関数があることで有名な PHP[要出典] ですが、 &lt;strong&gt;date_sunrise&lt;/strong&gt; という関数をご存知でしょうか。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://php.net/manual/ja/function.date-sunrise.php&#34;&gt;PHP: date_sunrise - Manual&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;date_sunrise — 指定した日付と場所についての日の出時刻を返す&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;試しに、ペパボ本社がある東京都渋谷区セルリアンタワーの元旦の 日の出時刻 を出力してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ php -d date.timezone=&#39;Asia/Tokyo&#39; -r &#39;echo date_sunrise(mktime(0, 0, 0, 1, 1, 2017), SUNFUNCS_RET_STRING, 35.39, 139.41);&#39;

06:51
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;素晴らしい&amp;hellip;。&lt;br /&gt;
これを使ってアレをソレすれば 2017 年の初日の出を寝過ごすことなくしっかり拝み、充実した1年をスタートさせることができます。必要なのは PHP とその他の (恐らくごくわずかな) 手間だけです。&lt;/p&gt;

&lt;p&gt;ただ、 &lt;strong&gt;この時間が本当にあってるのかちょっと不安&lt;/strong&gt; です。&lt;/p&gt;

&lt;h4 id=&#34;ソースコード探索:4c50acdb0cca17e91fd65b0a0e43887e&#34;&gt;ソースコード探索&lt;/h4&gt;

&lt;p&gt;ということで date_sunrise の実装を覗いてみましょう。 (PHP7.1.0)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/php/php-src/tree/PHP-7.1&#34;&gt;php/php-src: The PHP Interpreter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;関数は &lt;code&gt;PHP_FUNCTION&lt;/code&gt; マクロを使って定義されているので &lt;code&gt;PHP_FUNCTION(date_sunrise)&lt;/code&gt; で検索すればすぐに目的のコードにたどり着けます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/php/php-src/blob/PHP-7.1.0/ext/date/php_date.c#L4834&#34;&gt;https://github.com/php/php-src/blob/PHP-7.1.0/ext/date/php_date.c#L4834&lt;/a&gt;&lt;/p&gt;

&lt;script src=&#34;http://gist-it.appspot.com/github/php/php-src/blob/PHP-7.1.0/ext/date/php_date.c?slice=4830:4846&#34;&gt;&lt;/script&gt;

&lt;p&gt;内部的には日の入り時間を返す &lt;a href=&#34;http://php.net/manual/ja/function.date-sunset.php&#34;&gt;date_sunset&lt;/a&gt; とかなり共通していて、&lt;code&gt;php_do_date_sunrise_sunset&lt;/code&gt; の第2引数に渡すフラグで処理を分けているようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/php/php-src/blob/PHP-7.1.0/Zend/zend.h#L49&#34;&gt;INTERNAL_FUNCTION_PARAM_PASSTHRU マクロ&lt;/a&gt;は、その名の通り引数を利用しない場合のアテの役割で、 &lt;code&gt;execute_data, return_value&lt;/code&gt; に展開されます。&lt;/p&gt;

&lt;p&gt;なぜアテが必要かというと、 &lt;code&gt;PHP_FUNCTION(date_sunrise)&lt;/code&gt; はコンパイラによって最終的に &lt;code&gt;zif_date_sunrise(zend_execute_data *execute_data, zval *return_value)&lt;/code&gt; に展開されるので、この第1, 2引数を埋めるために INTERNAL_FUNCTION_PARAM_PASSTHRU マクロを使っています。&lt;/p&gt;

&lt;p&gt;つづいて &lt;code&gt;php_do_date_sunrise_sunset&lt;/code&gt; の中を順番に見ていきます。&lt;/p&gt;

&lt;script src=&#34;http://gist-it.appspot.com/github/php/php-src/blob/PHP-7.1.0/ext/date/php_date.c?slice=4743:4762&#34;&gt;&lt;/script&gt;

&lt;p&gt;変数の初期化と引数を解析しています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;zend_parse_parameters&lt;/code&gt; は第1引数で実行時に渡された引数の数、第2引数で引数の情報を受取り、解析した結果を第3引数以降に代入します。&lt;br /&gt;
また、第2引数 &lt;code&gt;&amp;quot;l|ldddd&amp;quot;&lt;/code&gt; は、各引数の型と必須・オプションを表していて、パイプ &lt;code&gt;|&lt;/code&gt; で区切られた後ろの2つめ以降がオプショナルであることがわかります。&lt;/p&gt;

&lt;script src=&#34;http://gist-it.appspot.com/github/php/php-src/blob/PHP-7.1.0/ext/date/php_date.c?slice=4761:4783&#34;&gt;&lt;/script&gt;

&lt;p&gt;つづいて、実行時に渡された引数の数によって、デフォルト値を設定しています。switch 文のフォールスルーがうまく使われていて勉強になります。&lt;br /&gt;
&lt;code&gt;INI_FLT&lt;/code&gt; は php.ini の設定値を取得するための double 型用のマクロです。&lt;a href=&#34;http://php.net/manual/ja/function.date-sunrise.php&#34;&gt;マニュアル&lt;/a&gt;を見ると、たしかに &lt;code&gt;ini_get(&amp;quot;date.default_latitude&amp;quot;)&lt;/code&gt; 等がデフォルトで使われると書かれています。&lt;/p&gt;

&lt;script src=&#34;http://gist-it.appspot.com/github/php/php-src/blob/PHP-7.1.0/ext/date/php_date.c?slice=4783:4790&#34;&gt;&lt;/script&gt;

&lt;p&gt;第2引数で渡す format が、予め定義されているどれにも該当しない場合に警告を出力しています。PHP で開発しているとよく見るあの警告は &lt;code&gt;php_error_docref&lt;/code&gt; で出力されているようです。&lt;/p&gt;

&lt;script src=&#34;http://gist-it.appspot.com/github/php/php-src/blob/PHP-7.1.0/ext/date/php_date.c?slice=4791:4805&#34;&gt;&lt;/script&gt;

&lt;p&gt;ようやく時間を計算してそうなコードまでたどり着きました !!&lt;br /&gt;
肝心の計算をしているであろう &lt;code&gt;timelib_astro_rise_set_altitude&lt;/code&gt; の中を見てみます。&lt;/p&gt;

&lt;script src=&#34;http://gist-it.appspot.com/github/php/php-src/blob/PHP-7.1.0/ext/date/lib/astro.c?slice=211:296&#34;&gt;&lt;/script&gt;

&lt;p&gt;フムフム&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;なんかちゃんと計算してることがわかりました !&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;充実した1年のスタートを-phpで:4c50acdb0cca17e91fd65b0a0e43887e&#34;&gt;充実した1年のスタートを ― PHPで&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;緻密に計算された日の出時刻を返してくれる&lt;/strong&gt; date_sunrise 関数。&lt;/p&gt;

&lt;p&gt;一字一句違わず正確に繰り返しますが、これを使ってアレをソレすれば 2017 年の初日の出を寝過ごすことなくしっかり拝み、充実した1年をスタートさせることができます。必要なのは PHP とその他の (恐らくごくわずかな) 手間だけです。&lt;/p&gt;

&lt;p&gt;新年の目標や計画を立て始めている方も多いのではないでしょうか。&lt;br /&gt;
何事も出だしが肝心といわれています。ぜひみなさんの 2017年 スタートダッシュのお供にPHPを。&lt;/p&gt;

&lt;p&gt;明日は、我らがEC事業部プロダクトチームの女神 ayami さんです !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016.12.11 JetBrains のオープンソースライセンスが承認された</title>
      <link>http://ackintosh.github.io/blog/2016/12/11/2016-12-14/</link>
      <pubDate>Sun, 11 Dec 2016 21:35:45 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/12/11/2016-12-14/</guid>
      <description>&lt;p&gt;(少し前のことだけどブログに書いてなかった)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ackintosh/snidel&#34;&gt;Snidel&lt;/a&gt; で JetBrains のオープンソースライセンスが承認された !!&lt;/p&gt;

&lt;p&gt;オープンソースライセンスとは&lt;br /&gt;
&lt;a href=&#34;https://www.jetbrains.com/buy/opensource/&#34;&gt;https://www.jetbrains.com/buy/opensource/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;非商用の OSS プロジェクトのみで使えるライセンス。専用のフォームから申請が必要で、プロジェクトの説明や携わってる開発者の人数などを入力する。&lt;br /&gt;
↑ のページに書いてあるとおり、もちろん承認されるにはいくつかの条件があって、それらをクリアしてる必要がある。&lt;br /&gt;
Snidel は条件を満たしているものの、一人で細々と開発してるだけなのでなんとなく不安だったけど無事に承認された。ヨカッタヨカッタ。申請してから承認のメールが来るまでは 2, 3日くらい。&lt;/p&gt;

&lt;p&gt;PhpStorm を起動するとプロジェクト名入りのライセンス表示が !&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dl.dropboxusercontent.com/u/22083548/phpstorm_licensed_to_snidel.png&#34; alt=&#34;phpstorm licensed to snidel&#34; /&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Licensed to snidel / Akihito Nakano&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(もともと vim を使ってたけど) そんなわけで、ここ数ヶ月はプライベートで PhpStorm を使い、仕事でも&lt;a href=&#34;http://diary.shu-cream.net/2016/09/01/ec-ctl.html&#34;&gt;チーフテクニカルリード&lt;/a&gt;の手腕によって JetBrains 製品のコマーシャルライセンスを買ってもらったので PhpStorm を使っている。&lt;br /&gt;
開発が捗るので本当に最高。まだまだ活用できてない機能がたくさんあるようなので使い倒していこう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016.12.10 神様の開発に着手</title>
      <link>http://ackintosh.github.io/blog/2016/12/10/2016-12-10/</link>
      <pubDate>Sat, 10 Dec 2016 15:44:16 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/12/10/2016-12-10/</guid>
      <description>&lt;p&gt;この度、神様の開発を始めたので経緯をブログに書いておく。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;embedly-card&#34; data-card-key=&#34;916e111541fe433792c1330eb7eba55b&#34; data-card-image=&#34;https://camo.githubusercontent.com/70395853479c982acab0d4cd78b06d14ec0d364b/68747470733a2f2f646c2e64726f70626f7875736572636f6e74656e742e636f6d2f752f32323038333534382f67616e657368612e706e67&#34; data-card-type=&#34;article&#34;&gt;&lt;h4&gt;&lt;a href=&#34;https://github.com/ackintosh/ganesha&#34;&gt;ackintosh/ganesha&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;ganesha - PHP implementation of Circuit Breaker pattern.&lt;/p&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//cdn.embedly.com/widgets/platform.js&#34; charset=&#34;UTF-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;なんだか仰々しい記事タイトルになってしまったが、新しく作り始めたライブラリに神様のお名前を拝借した、というだけのこと。&lt;br /&gt;
( 趣味のライブラリではキラキラネームをつけるようにしてる、というのを&lt;a href=&#34;http://ackintosh.github.io/blog/2016/12/09/2016-12-09/&#34;&gt;前日に書いた&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;作り始めたのは &lt;a href=&#34;http://martinfowler.com/bliki/CircuitBreaker.html&#34;&gt;CircuitBreaker&lt;/a&gt; パターンを PHP で実装するライブラリ。CircuitBreaker パターンと私の関わりとしては、前職で既存のライブラリを使ってサービスに組み込んだり、Fowler の&lt;a href=&#34;http://ackintosh.github.io/blog/2016/05/10/bliki-ja/&#34;&gt;記事の翻訳に挑戦&lt;/a&gt;したこともある。&lt;/p&gt;

&lt;p&gt;自分でライブラリを作り始めたきっかけは、既存のライブラリの開発が止まってたり、機能に物足りなさを感じたり、あとは単純に自分で作ってみたかった、というありきたりな感じ。&lt;/p&gt;

&lt;p&gt;で、本題。ライブラリの名前に &lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%AC%E3%83%8D%E3%83%BC%E3%82%B7%E3%83%A3&#34;&gt;Ganesha (ガネーシャ)&lt;/a&gt; というヒンドゥー教の神様のお名前を拝借した。  理由は下記。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;像の頭を持つ神様

&lt;ul&gt;
&lt;li&gt;PHP のマスコットキャラクターも像&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%AC%E3%83%8D%E3%83%BC%E3%82%B7%E3%83%A3&#34;&gt;Wikipedia&lt;/a&gt; によると、障害を取り去り、財産をもたらしてくれるとのこと

&lt;ul&gt;
&lt;li&gt;CircuitBreaker は複数のシステムが共倒れになってしまう障害を防止するので、役割に共通点がありそうな感じがする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;響きがかっこいい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということで個人的にしっくりきたのでさっそく github にリポジトリを作って、ちょうど良い &lt;a href=&#34;https://openclipart.org/detail/219399/ganesha-colour&#34;&gt;Public Domain の画像&lt;/a&gt;を紫色に塗って README に貼って、ブログを書き始めて今に至る。&lt;/p&gt;

&lt;p&gt;画像を紫色に塗りつぶしてるときが一番楽しかったかもしれない。&lt;br /&gt;
( フォトショとか使えないので mac のプレビューで頑張った )&lt;/p&gt;

&lt;p&gt;楽しさのピークを過ぎてしまった懸念があるが、引続き地道に神様を開発していきます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016.12.09 キラキラネームのすゝめ</title>
      <link>http://ackintosh.github.io/blog/2016/12/09/2016-12-09/</link>
      <pubDate>Fri, 09 Dec 2016 15:08:57 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/12/09/2016-12-09/</guid>
      <description>&lt;p&gt;趣味でライブラリを作り始めるとき、最近はキラキラネームをつけるようにしてる。&lt;/p&gt;

&lt;p&gt;理由は単純で、その方が愛着がわくし、お気に入りの名前が付けられればそれだけで開発が楽しくなるから。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ackintosh/snidel&#34;&gt;Snidel(スナイデル)&lt;/a&gt;という、 PHP でマルチプロセスをサクッとできるライブラリもそのひとつで、&lt;a href=&#34;http://ackintosh.github.io/blog/2015/09/29/snidel/&#34;&gt;なんとなく響きで付けた&lt;/a&gt;名前だけどシュッとしてて結構気に入ってる。&lt;/p&gt;

&lt;p&gt;ちなみに、 &lt;a href=&#34;https://twitter.com/search?q=snidel&amp;amp;src=typd&#34;&gt;Snidel で twitter を検索&lt;/a&gt;すると、同名のアパレルファッションブランドに関するツイートがヒットするので、検索結果のタイムラインのかわいい女の子たちを眺めて一時の癒やしを得ることができる。&lt;/p&gt;

&lt;p&gt;そんな、ちょっとしたライフハック術を編み出したのもキラキラネームのおかげ。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016.11.23 展示品</title>
      <link>http://ackintosh.github.io/blog/2016/11/23/2016-11-23/</link>
      <pubDate>Wed, 23 Nov 2016 21:37:03 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/11/23/2016-11-23/</guid>
      <description>&lt;p&gt;浦和で用事を済ませたあと、そのまま帰るのはもったいなかったので駅前のパルコでふらふらと徘徊。
島村楽器で色々みていたら、木製で非常にいい味を出してる足台に一目惚れしてしまった。&lt;/p&gt;

&lt;p&gt;材質はメイプル（たぶん）。濃い目の茶色と、主張しすぎないゴールドの金具のバランスが良い。足先がゴムで加工されているので床に優しい。&lt;/p&gt;

&lt;p&gt;さっそく展示品の値札に書かれてる型番を確認し、下段の棚に積まれてるダンボール箱から一致する型番を探して、会計。&lt;/p&gt;

&lt;p&gt;いい買い物をしたなぁと、そのあとランチで入ったパスタ屋さんで、待ちきれずに箱を開けてしまったのだが、箱から出てきたのが全く別のモノで愕然とした。&lt;/p&gt;

&lt;p&gt;木製の足台ではあるが、展示されていたアレとは全く違う。&lt;/p&gt;

&lt;p&gt;再び島村楽器に行ったところ、何か手違いがあったようで展示品は要取寄とのことだった。&lt;br /&gt;
あまり状況が理解できなかったが、光よりも速く返品して帰宅した。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016.11.13 &#39;2 x 2 = 8&#39;</title>
      <link>http://ackintosh.github.io/blog/2016/11/13/2016-11-13/</link>
      <pubDate>Sun, 13 Nov 2016 22:02:49 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/11/13/2016-11-13/</guid>
      <description>&lt;p&gt;夕飯をどうしようかと下北沢をフラフラしていたら、カレー980円食べ放題の看板が気になったので&lt;a href=&#34;https://tabelog.com/tokyo/A1318/A131802/13084034/&#34;&gt;ににんがよん&lt;/a&gt;に入ってみた。&lt;/p&gt;

&lt;p&gt;別途ドリンクの注文が必須なので結局980円では済まないという罠があるが、カレー3種・ナン・フライドチキン・焼きそば(?)・サラダ・ヨーグルト的なデザートが食べ放題。味は普通。
量を食べたいときには良さそう。&lt;/p&gt;

&lt;p&gt;あと、お店の人がとても親切だった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016.11.12 オペコード</title>
      <link>http://ackintosh.github.io/blog/2016/11/12/2016-11-12/</link>
      <pubDate>Sat, 12 Nov 2016 20:08:58 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/11/12/2016-11-12/</guid>
      <description>&lt;p&gt;「PHPはどのように動くのか」のつづきを読む。&lt;/p&gt;

&lt;p&gt;オペコードを眺めて へぇ〜と思ったり、zval とか HashTable が何となくどんなものかわかってきた。&lt;/p&gt;

&lt;p&gt;オペコードの説明はマニュアルにあった。
&lt;a href=&#34;http://php.net/manual/ja/internals2.opcodes.php&#34;&gt;http://php.net/manual/ja/internals2.opcodes.php&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016.11.06 </title>
      <link>http://ackintosh.github.io/blog/2016/11/06/2016-11-06/</link>
      <pubDate>Sun, 06 Nov 2016 23:34:32 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/11/06/2016-11-06/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/ackintosh/snidel&#34;&gt;Snidel&lt;/a&gt;のアーキテクチャをゴリッと変えてる途中。なぜかユニットテストが通らなくて困ってる。&lt;/p&gt;

&lt;p&gt;PHPUnit の方がおかしいんじゃないかと思ってきたので PHPUnit のコードを追ってみるかー、というところで集中力が切れた。&lt;/p&gt;

&lt;p&gt;最近チームにジョインした方から&lt;a href=&#34;http://amzn.to/2frizwK&#34;&gt;PHPはどのように動くのか&lt;/a&gt;を貸してもらったので1章を読んだ。 print と echo どっちが速いのかを、単純に計測するだけじゃなくてオペコードを比較して、なぜ速度が違うのかを追っていくので納得感がある。&lt;/p&gt;

&lt;iframe style=&#34;width:120px;height:240px;&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=akihito0a-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=as_ss_li_til&amp;asins=B0158EC1FO&amp;linkId=699b4b28532db4b7acf58bc38eb7ae73&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>2016.11.05 Tycho</title>
      <link>http://ackintosh.github.io/blog/2016/11/05/2016-11-05/</link>
      <pubDate>Sat, 05 Nov 2016 12:56:56 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/11/05/2016-11-05/</guid>
      <description>&lt;p&gt;たまたま Youtube の関連動画にあったので聴いてみたらとても癒やされた。&lt;/p&gt;

&lt;p&gt;Tycho(ティコ)&lt;br /&gt;
&lt;a href=&#34;http://tychomusic.com/&#34;&gt;http://tychomusic.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ググってわかったことを並べると、&lt;/p&gt;

&lt;p&gt;アメリカ西海岸のアーティストで、ジャンルはエレクトロとかアンビエント。今はバンド編成だが、もともとは Scott Hansen のソロプロジェクトだったらしい。&lt;/p&gt;

&lt;p&gt;Scott Hansen は &lt;a href=&#34;http://blog.iso50.com/&#34;&gt;ISO50&lt;/a&gt; という名前でフォトグラファー・デザイナーとしても知られてるようで、CDジャケット等でも彼の作品が使われている。&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/JY-wzE2v2xM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Youtube で初めて聴いたのがこの動画。&lt;/p&gt;

&lt;p&gt;ゆっくり降ってくる音楽のシャワーで日々の疲れが癒やされてくような感覚が気持ちよかった。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【ペパボ×プレイド】Tech Meetup で LT</title>
      <link>http://ackintosh.github.io/blog/2016/10/27/pepabo_plaid_lt/</link>
      <pubDate>Thu, 27 Oct 2016 21:59:18 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/10/27/pepabo_plaid_lt/</guid>
      <description>

&lt;p&gt;場所は&lt;a href=&#34;https://www.google.co.jp/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwjx4vPDjYXQAhUBErwKHdXbC0sQFggkMAA&amp;amp;url=https%3A%2F%2Fplaid.co.jp%2F&amp;amp;usg=AFQjCNEnanIqoRljdEgfkMOHG4ZV_TRZbw&amp;amp;sig2=1UqILw-ttShPafI83trptw&#34;&gt;プレイド&lt;/a&gt;さん。&lt;br /&gt;
オフィススペースと隣り合った一角がカフェみたいになっていて、そこに椅子とスクリーンを並べたかたちの会場。角のカウンターにはコーヒーサイフォンが並んでいて大変オシャレでした。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;embedly-card&#34; data-card-key=&#34;916e111541fe433792c1330eb7eba55b&#34; data-card-type=&#34;article-full&#34;&gt;&lt;h4&gt;&lt;a href=&#34;http://plaidtech.connpass.com/event/41401/&#34;&gt;【ペパボ×プレイド】Tech Meetup 〜自動テスト・CI編〜 (2016/10/27 19:00〜)&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;概要 GMOペパボ株式会社と、プレイドの2社で勉強会を開催します！ 今回のテーマは【CI・テスト自動化】 &lt;/p&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//cdn.embedly.com/widgets/platform.js&#34; charset=&#34;UTF-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h4 id=&#34;発表資料:43e4161f97d7438e671829a522c88d1b&#34;&gt;発表資料&lt;/h4&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;0da601e2e2f1483b9cb21791d7bb0e0c&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ackintosh/snidel&#34;&gt;Snidel&lt;/a&gt;を作っていて、並列処理って難しいなぁと感じることがあったので、それをテストの観点で（Snidelの宣伝を挟みつつ）発表。&lt;/p&gt;

&lt;h4 id=&#34;振り返ってみて:43e4161f97d7438e671829a522c88d1b&#34;&gt;振り返ってみて&lt;/h4&gt;

&lt;p&gt;前回とはまた違った大変さと達成感がありました。&lt;/p&gt;

&lt;p&gt;7月に&lt;a href=&#34;http://ackintosh.github.io/blog/2016/07/20/phpblt5/&#34;&gt;人生初LT&lt;/a&gt;をしてから約2ヶ月経ったころ、&lt;br /&gt;
社内で発表者を募集してるのを見て、ネタは無いけどとりあえず立候補するか！（PHPBLTで &lt;a href=&#34;https://twitter.com/sotarok?lang=ja&#34;&gt;@sotarok&lt;/a&gt; さんが &amp;ldquo;発表内容は応募してから考えればいい！&amp;rdquo; って言ってたし）ということで発表することにしました。&lt;/p&gt;

&lt;p&gt;が、（自分の経験不足や、会社の名前が出てる勉強ということもあってか）、&amp;rdquo;発表内容どうしよう&amp;hellip;&amp;rdquo; という不安とプレッシャーが思いの外大きくて、ここ1ヶ月くらいは内容を練るのと資料作りで必死でした。&lt;/p&gt;

&lt;p&gt;なんとか絞りだした内容を&lt;a href=&#34;http://diary.shu-cream.net/2016/09/01/ec-ctl.html&#34;&gt;チーフテクニカルリード&lt;/a&gt;に相談しつつブラッシュアップしてなんとか発表を終えられてホッとしています。&lt;/p&gt;

&lt;h5 id=&#34;追記:43e4161f97d7438e671829a522c88d1b&#34;&gt;追記&lt;/h5&gt;

&lt;p&gt;プレイドさんのブログに開催エントリが公開されました！&lt;br /&gt;
みなさま、ありがとうございました！&lt;/p&gt;

&lt;p&gt;&lt;a class=&#34;embedly-card&#34; data-card-key=&#34;916e111541fe433792c1330eb7eba55b&#34; data-card-controls=&#34;0&#34; data-card-type=&#34;article&#34; href=&#34;http://tech.plaid.co.jp/ci-testautomation-meetup/&#34;&gt;【ペパボ×プレイド】Tech Meetup 〜自動テスト・CI編〜を開催しました！&lt;/a&gt;
&lt;script async src=&#34;//cdn.embedly.com/widgets/platform.js&#34; charset=&#34;UTF-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016.10.05 LTの準備</title>
      <link>http://ackintosh.github.io/blog/2016/10/05/2016-10-05/</link>
      <pubDate>Wed, 05 Oct 2016 22:38:30 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/10/05/2016-10-05/</guid>
      <description>&lt;p&gt;LTを申し込んでから何か発表できることがないかずっと悩んでたけど、ようやく内容が決まってきた。&lt;/p&gt;

&lt;p&gt;無理やり絞り出した感じなので矛盾が無いか不安。&lt;br /&gt;
なるはやでスライドを作ってCTLに見てもらおう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016.09.22 Snidel 0.8にむけて</title>
      <link>http://ackintosh.github.io/blog/2016/09/22/2016-09-22/</link>
      <pubDate>Thu, 22 Sep 2016 21:12:52 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/09/22/2016-09-22/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/ackintosh/snidel&#34;&gt;Snidel&lt;/a&gt;のキューの部分で、専用のミドルウェアや Saas を使えるようにすべく開発をはじめた。&lt;/p&gt;

&lt;p&gt;まずは Amazon SQS 用のプラグイン(?)に着手。&lt;br /&gt;
&lt;a href=&#34;https://github.com/ackintosh/snidel-queue-sqs&#34;&gt;https://github.com/ackintosh/snidel-queue-sqs&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016.09.21 LT駆動</title>
      <link>http://ackintosh.github.io/blog/2016/09/21/2016-09-21/</link>
      <pubDate>Wed, 21 Sep 2016 15:01:28 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/09/21/2016-09-21/</guid>
      <description>&lt;p&gt;社外向け勉強会の発表者が募集されていたので立候補した。ネタがあるわけじゃなかったけど、1ヶ月くらい先なのでなんとかなるだろうと。&lt;/p&gt;

&lt;p&gt;7月に人生初LTしてからの2回目。&lt;/p&gt;

&lt;p&gt;もう緊張してきた。。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>お産合宿10</title>
      <link>http://ackintosh.github.io/blog/2016/09/16/osan10/</link>
      <pubDate>Fri, 16 Sep 2016 17:58:26 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/09/16/osan10/</guid>
      <description>

&lt;p&gt;お産合宿10に参加しました。&lt;/p&gt;

&lt;h3 id=&#34;お産合宿とは:182ec1678fcd68bd77a56e167e411732&#34;&gt;お産合宿とは&lt;/h3&gt;

&lt;p&gt;普段の部署や職種を超えてチームを組んで新サービス等のアウトプットを &amp;ldquo;産み出す&amp;rdquo; 合宿イベントで、2007年から始まって今回で10回目になります。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;embedly-card&#34; data-card-key=&#34;916e111541fe433792c1330eb7eba55b&#34; data-card-type=&#34;article-full&#34;&gt;&lt;h4&gt;&lt;a href=&#34;http://osan.pepabo.com/&#34;&gt;お産合宿10 | GMOペパボ株式会社&lt;/a&gt;&lt;/h4&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//cdn.embedly.com/widgets/platform.js&#34; charset=&#34;UTF-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;合宿&amp;rdquo;という名のとおり、1泊2日で旅館に泊まってガッツリ集中して取り組みます。&lt;/p&gt;

&lt;p&gt;宿泊場所は開催ごとに異なるようです。今回は土善旅館にお世話になりました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;embedly-card&#34; data-card-key=&#34;916e111541fe433792c1330eb7eba55b&#34; data-card-type=&#34;article-full&#34;&gt;&lt;h4&gt;&lt;a href=&#34;http://www.dozenryokan.com/&#34;&gt;土善旅館[弓道合宿・開発合宿]&lt;/a&gt;&lt;/h4&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//cdn.embedly.com/widgets/platform.js&#34; charset=&#34;UTF-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;サイトのTOPに &amp;ldquo;開発合宿プラン&amp;rdquo; のバナーがあって、こんな旅館があるんだなぁと驚きました。界隈では有名なのでしょうか。旅館の休憩スペースの本棚に、漫画に紛れてマスタリングTCP/IP等の技術書が並んでいて流石だなぁという感じでした。&lt;/p&gt;

&lt;h3 id=&#34;チーム:182ec1678fcd68bd77a56e167e411732&#34;&gt;チーム&lt;/h3&gt;

&lt;p&gt;&lt;blockquote class=&#34;embedly-card&#34; data-card-key=&#34;916e111541fe433792c1330eb7eba55b&#34; data-card-image=&#34;http://img-cdn.jg.jugem.jp/b8d/927914/20160831_1372849.png&#34; data-card-type=&#34;article-full&#34;&gt;&lt;h4&gt;&lt;a href=&#34;http://osan.pepabo.com/?eid=155&#34;&gt;アンチポップチリペッパーズ | お産合宿10&lt;/a&gt;&lt;/h4&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//cdn.embedly.com/widgets/platform.js&#34; charset=&#34;UTF-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;アンチポップチリペッパーズというチームで、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CTOのあんちぽさん&lt;/li&gt;
&lt;li&gt;カスタマーサポート マネージャーのうーたんさん&lt;/li&gt;
&lt;li&gt;デザイナーのほらおさん&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と自分です。&lt;/p&gt;

&lt;p&gt;サービスを考えるのは苦手なのですが、折角の機会なので何か作りたいという思いで便乗させていただきました。&lt;/p&gt;

&lt;h3 id=&#34;つくったもの:182ec1678fcd68bd77a56e167e411732&#34;&gt;つくったもの&lt;/h3&gt;

&lt;p&gt;公開していないのでモノがみれないのですが&lt;br /&gt;
&lt;a href=&#34;http://osan.pepabo.com/?eid=194&#34;&gt;最終発表の様子&lt;/a&gt;がわかりやすいかもしれません。&lt;/p&gt;

&lt;p&gt;予めアプリにトラックが用意されていて、それを使ってラップ等のパフォーマンスをアプリで簡単に録画・公開できるという感じです。
（&lt;a href=&#34;https://vine.co/&#34;&gt;vine&lt;/a&gt;を想像していただくとわかりやすいと思います）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ラップはできるけど、トラックがつくれない&lt;/li&gt;
&lt;li&gt;トラックはつくれるけど、ラップができない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という人たちをつなごうというアプリです。&lt;/p&gt;

&lt;h3 id=&#34;やったこと:182ec1678fcd68bd77a56e167e411732&#34;&gt;やったこと&lt;/h3&gt;

&lt;h5 id=&#34;iosアプリ-swift:182ec1678fcd68bd77a56e167e411732&#34;&gt;iOSアプリ(swift)&lt;/h5&gt;

&lt;p&gt;アプリ開発初挑戦。swift の構文をざっと playground で試したあと早速アプリ開発に取り掛かったのですが、APIを叩いて一覧を表示するビューを実装するだけでも数時間かかってしまったり、、、とにかく何をするにもハマりながら少しずつ進めてく感じでした。&lt;/p&gt;

&lt;p&gt;動画と音声の合成処理はあんちぽさんが実装してくださったので、自分はAPIサーバーと通信するところや twitter 認証とか、他の細々としたところを作りました。&lt;/p&gt;

&lt;h5 id=&#34;apiサーバー-golang:182ec1678fcd68bd77a56e167e411732&#34;&gt;APIサーバー(golang)&lt;/h5&gt;

&lt;p&gt;APIサーバーは golang で、&lt;a href=&#34;https://echo.labstack.com/&#34;&gt;Echo&lt;/a&gt;というフレームワークを使いました。&lt;/p&gt;

&lt;p&gt;golang は、前にいくつか&lt;a href=&#34;https://github.com/ackintosh/pound&#34;&gt;ツール&lt;/a&gt;を作ったことがあったので iOS アプリよりはさくさくと進められました。&lt;/p&gt;

&lt;p&gt;とはいえ今までサービス開発では php + apache しか経験がないので、プロセス管理とかデプロイをどうしたら良いのかと試行錯誤していました。その辺は別途記事にしています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ackintosh.github.io/blog/2016/08/17/golang_deamonize_deploy/&#34;&gt;Goアプリのデーモン化とデプロイの仕組み&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;なかなか進捗しなかった:182ec1678fcd68bd77a56e167e411732&#34;&gt;なかなか進捗しなかった&lt;/h5&gt;

&lt;p&gt;さすがに1泊2日の合宿中に動くものを作るのは無理なので、実際は1ヶ月前くらいからガッツリやっていました。それでも、慣れない技術を使っているのでなかなか進捗せず、色々と機能を削って最小限でなんとか合宿の最後のデモに間に合ったかたちでした。&lt;/p&gt;

&lt;h3 id=&#34;感想:182ec1678fcd68bd77a56e167e411732&#34;&gt;感想&lt;/h3&gt;

&lt;p&gt;いままで触ったことのない技術を使えたのでとても良い経験になりました。&lt;/p&gt;

&lt;p&gt;一方で、初めての技術が多くて、何か機能を実装しようとしても、そもそも実装方法を調べながらやっていく関係でかかる時間が想定できないので、今回のように明確に期日が決まってる開発をするには結構なプレッシャーがありました。&lt;/p&gt;

&lt;p&gt;また、合宿中は色々とハマってほぼ進捗を出せませんでした。&lt;/p&gt;

&lt;p&gt;突然 Xcode のビルドが落ちてあれこれ調べても原因がわからず絶望していると、また突然ビルドできるようになって、、、一体何だったんだろうと、現象を消化しきれず疲れたり&amp;hellip; とあるライブラリの謎の挙動になやまされて疲れたり&amp;hellip;&lt;/p&gt;

&lt;p&gt;とにかく疲れたのですがその辺も含めて良い経験だったと思います。&lt;/p&gt;

&lt;p&gt;アンチポップチリペッパーズ、そして参加チームのみなさんお疲れ様でした。&lt;br /&gt;
土善旅館のみなさん、お世話になりました。夕飯の豚、美味しかったです。&lt;br /&gt;
そして合宿運営のみなさん、ありがとうございました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Snidel 0.7 をリリースしました</title>
      <link>http://ackintosh.github.io/blog/2016/09/09/snidel_0_7_0/</link>
      <pubDate>Fri, 09 Sep 2016 23:58:13 +0900</pubDate>
      
      <guid>http://ackintosh.github.io/blog/2016/09/09/snidel_0_7_0/</guid>
      <description>

&lt;p&gt;今回のリリースでは実装をシンプルにするために機能を削除しました。&lt;/p&gt;

&lt;h4 id=&#34;削除した機能:8b8d658c70dd916a2c83cfce3cead93b&#34;&gt;削除した機能&lt;/h4&gt;

&lt;p&gt;バージョン 0.2 で実装した &lt;code&gt;Snidel::map()&lt;/code&gt; です。 この機能についての説明は &lt;a href=&#34;http://ackintosh.github.io/blog/2015/11/08/snidel_0_2_0/#複数の処理を並列につなげて実行:ee76cbb32354dec37a8e590548214889&#34;&gt;Snidel 0.2 をリリースしました&lt;/a&gt; に書いています。&lt;/p&gt;

&lt;h4 id=&#34;削除した理由:8b8d658c70dd916a2c83cfce3cead93b&#34;&gt;削除した理由&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://ackintosh.github.io/blog/2016/05/04/snidel_0_6_0/&#34;&gt;バージョン 0.6 で内部的なアーキテクチャを大幅に変更&lt;/a&gt;して、親プロセス・子プロセスの間でデータの受け渡し方が変わったのですが、0.6 の時点では &lt;code&gt;Snidel::map()&lt;/code&gt; は対応できておらず、旧方式のままでした。&lt;/p&gt;

&lt;p&gt;当初は &lt;code&gt;Snidel::map()&lt;/code&gt; も変えていこうと考えていましたが実装が難しかったのと、よくよく考えてみると 0.2 リリース時の記事に書いてるとおり、この機能は実験的に作ったので「並列処理を手軽に実行する」という Snidel で解決したい課題にはそもそも必要ないんじゃないかと思いはじめました。&lt;/p&gt;

&lt;p&gt;なのでバッサリ削除してシンプルにすることにしました。&lt;/p&gt;

&lt;p&gt;おかげでコードもすっきりして、カバレッジや Scrutinizer のスコアも改善しました。&lt;/p&gt;

&lt;p&gt;（削除した部分は、別のライブラリとして作るかもしれません）&lt;/p&gt;

&lt;h4 id=&#34;今後の展望:8b8d658c70dd916a2c83cfce3cead93b&#34;&gt;今後の展望&lt;/h4&gt;

&lt;p&gt;Snidel がタスクを子プロセスに渡したり、その処理結果を受け取る際に system v message queue を使っているのですが、これを外部ストレージも使えるようにしたいです。その理由も含めて、次回リリース時の記事にまとめたいと思います。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>