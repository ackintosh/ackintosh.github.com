<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[暁 [stfuawsc]]]></title>
  <link href="http://ackintosh.github.io/atom.xml" rel="self"/>
  <link href="http://ackintosh.github.io/"/>
  <updated>2013-08-26T00:32:56+09:00</updated>
  <id>http://ackintosh.github.io/</id>
  <author>
    <name><![CDATA[Ackintosh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[PHP5.4]PDOのhostにlocalhostを指定するとエラー]]></title>
    <link href="http://ackintosh.github.io/blog/2013/08/26/pdo-error-php5-dot-4/"/>
    <updated>2013-08-26T00:21:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/08/26/pdo-error-php5-dot-4</id>
    <content type="html"><![CDATA[<p>手元の環境でエラーになっただけで、他の環境は未検証です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php -v
</span><span class='line'>PHP 5.4.5 (cli) (built: Jul 21 2012 11:09:19)</span></code></pre></td></tr></table></div></figure>




<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$pdo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="s1">&#39;mysql:dbname=active_record;host=localhost&#39;</span><span class="p">,</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;root&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">PDOException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">die</span><span class="p">(</span><span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SQLSTATE[HY000] [2002] No such file or directory</span>
</span></code></pre></td></tr></table></div></figure>


<p>hostをIPアドレスで指定したらでなくなりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$pdo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="s1">&#39;mysql:dbname=active_record;host=127.0.0.1&#39;</span><span class="p">,</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;root&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[遅延静的束縛は何が嬉しいのか]]></title>
    <link href="http://ackintosh.github.io/blog/2013/08/25/late-static-binding/"/>
    <updated>2013-08-25T15:31:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/08/25/late-static-binding</id>
    <content type="html"><![CDATA[<p>名前は見かけていたものの、いまいち理解していなかった。</p>

<p><a href="http://php.net/manual/ja/language.oop5.late-static-bindings.php" target="_blank">PHP: 遅延静的束縛 (Late Static Bindings) - Manual</a></p>

<!-- more -->


<blockquote><p>PHP 5.3.0 以降、PHP に遅延静的束縛と呼ばれる機能が搭載されます。 これを使用すると、静的継承のコンテキストで呼び出し元のクラスを参照できるようになります。</p>

<p>より正確に言うと、遅延静的束縛は直近の &#8220;非転送コール&#8221; のクラス名を保存します。 静的メソッドの場合、これは明示的に指定されたクラス (通常は :: 演算子の左側に書かれたもの) となります。静的メソッド以外の場合は、そのオブジェクトのクラスとなります。 &#8220;転送コール&#8221; とは、self:: や parent::、static:: による静的なコール、 あるいはクラス階層の中での forward_static_call() によるコールのことです。 get_called_class() 関数を使うとコール元のクラス名を文字列で取得できます。 static:: はこのクラスのスコープとなります。</p></blockquote>

<h2>遅延静的束縛が無いと困るとき</h2>

<script src="https://gist.github.com/ackintosh/6332540.js?file=1.php"></script>


<p>1,400,000が出力されるかと思いきや、0でした。<br/>
・・・期待していたのと違う。</p>

<h3>selfについて</h3>

<p>PHP Manualにはこう書かれています。</p>

<blockquote><p>self:: あるいは <strong>CLASS</strong> による現在のクラスへの静的参照は、 そのメソッドが属するクラス (つまり、 そのメソッドが定義されているクラス) に解決されます。</p></blockquote>

<p>つまり上記のコードでいうと、getFormattedPriceメソッドはCarクラスで定義されているので、<br/>
<code>self::$price</code> は常に <code>Car::$price</code> に解決されることになります。</p>

<p>これでは、いくらCarのサブクラスでgetFormattedPriceを呼び出しても価格の出力ができません。</p>

<h2>遅延静的束縛を使う</h2>

<p>selfの代わりにstaticを使います。</p>

<script src="https://gist.github.com/ackintosh/6332540.js?file=2.php"></script>


<p>これで期待した通りの結果になりました。</p>

<h3>staticについて</h3>

<p>PHP Manualより</p>

<blockquote><p>実行時に最初にコールされたクラスを参照するようにしています。</p></blockquote>

<p>これにより、<code>static::$price</code> が <code>NissanNote::$price</code> に解決されたことになります。</p>

<h3>もう少し深く</h3>

<p>ただ、「最初にコールされたクラスを参照する」というのは少し浅い説明かもしれません。
Manualには下記のようにも書かれています。</p>

<blockquote><p>より正確に言うと、遅延静的束縛は直近の &#8220;非転送コール&#8221; のクラス名を保存します。</p></blockquote>

<p>例えば、</p>

<script src="https://gist.github.com/ackintosh/6332540.js?file=3.php"></script>


<p>上記コードだと、staticキーワードが「 <em>最初にコールされたクラス</em> 」を参照しているならば<br/>
<code>NissanNote::getDescription();</code>メソッド呼び出しの結果、<code>static::$price</code> は <code>NissanNote::$price</code> に解決されるはずですが<br/>
実際には <code>Car::$price</code> に解決されています。</p>

<p>これは、「 <em>遅延静的束縛は直近の &#8220;非転送コール&#8221; のクラス名を保存する</em> 」と考えると理解できます。</p>

<p>つまり、static::$priceの直近の非転送コールは <code>Car::getFormattedPrice()</code> なので<br/>
<code>static::$price</code> は <code>Car::$price</code> に解決されたことになります。</p>

<p>非転送コールについては、下記リンクが大変参考になりました。</p>

<h2>参考にさせていただきました。</h2>

<p><a href="http://d.hatena.ne.jp/maeharin/20130202/php_late_static_bindings" target="_blank">PHPを愛する試み ～self:: parent:: static:: および遅延静的束縛～</a></p>

<p><a href="http://www.ibm.com/developerworks/jp/opensource/library/os-php-53static/" target="_blank">PHP V5.3 で遅延静的バインディングを使ったオブジェクト指向プログラミングを活用する</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ハイフンとアンダースコアの使い分け]]></title>
    <link href="http://ackintosh.github.io/blog/2013/08/11/hypen-under-score/"/>
    <updated>2013-08-11T14:32:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/08/11/hypen-under-score</id>
    <content type="html"><![CDATA[<p>ネーミングの時のハイフンとアンダースコアの使い分けが、自分の中で曖昧なところがあったのでメモ。</p>

<p>言語やフレームワークによって色々あるかもしれませんが、以下、Ruby(gem)の場合です。</p>

<!-- more -->


<h2>Eric Hodel氏の推奨するネーミングルール</h2>

<p>RubyGemsの作者、Eric Hodel氏は自身のブログで次のように推奨しています。</p>

<p><a href="http://blog.segment7.net/2010/11/15/how-to-name-gems" target="_blank">How to Name Gems</a></p>

<blockquote><p>Here is my <em>STRONG</em> recommendation on how to name gems:</p>

<h2>Use underscores</h2>

<p>・fancy_require<br>
・newrelic_rpm<br>
・ruby_parser<br>
This matches the file the user will require and makes it easier for the user to start using your gem. gem install my_gem will be loaded by require &#8216;my_gem&#8217;.</p>

<h2>Use dashes for extensions</h2>

<p>・net-http-persistent<br>
・rdoc-chm<br>
・autotest-growl<br>
If you&#8217;re adding functionality to another gem use a dash. The dash is different-enough from an underscore to be noticeable. If you tilt the dash a bit it becomes a slash as well, making it easier for the user to know what to require. gem install net-http-persistent becomes require &#8216;net/http/persistent&#8217;</p></blockquote>

<p>要するに</p>

<ul>
<li>ハイフン -> パスの区切り</li>
<li>アンダースコア -> 単語の区切り</li>
</ul>


<p>といったところでしょうか。</p>

<h2>試してみる</h2>

<h3>ハイフン区切り</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle gem ackintosh-tiny-progressbar</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Ackintosh</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Tiny</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Progressbar</span>
</span><span class='line'>      <span class="c1"># Your code goes here ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>全て別のモジュールに分かれています。</p>

<h3>アンダースコア区切り</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="n">gem</span> <span class="n">ackintosh</span><span class="o">-</span><span class="n">tiny_progressbar</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Ackintosh</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">TinyProgressbar</span>
</span><span class='line'>    <span class="c1"># Your code goes here…</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>「tiny」と「progressbar」は別の単語ですが意味的には１つになっています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPで関数合成を書いてみる]]></title>
    <link href="http://ackintosh.github.io/blog/2013/08/05/compose-functions-in-php/"/>
    <updated>2013-08-05T20:20:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/08/05/compose-functions-in-php</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/yuya_takeyama/items/858c5a0652441f54f0a8" target="_blank">PHP で関数合成 - Qiita [キータ]</a></p>

<p>こちらの投稿がとても興味深かったので、自分なりに書いてみました。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Compose</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">_</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$callables</span> <span class="o">=</span> <span class="nb">func_get_args</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nb">array_reduce</span><span class="p">(</span><span class="nv">$callables</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$a</span> <span class="o">===</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nb">call_user_func_array</span><span class="p">(</span><span class="nv">$b</span><span class="p">,</span> <span class="nb">func_get_args</span><span class="p">());</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$arg</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$b</span><span class="p">,</span> <span class="nv">$a</span><span class="p">(</span><span class="nv">$arg</span><span class="p">));</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$mapUcfirst</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">array_map</span><span class="p">(</span><span class="s1">&#39;ucfirst&#39;</span><span class="p">,</span> <span class="nv">$arg</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$splitWithUnderscore</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">,</span> <span class="nv">$arg</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$camelize</span> <span class="o">=</span> <span class="nx">Compose</span><span class="o">::</span><span class="na">_</span><span class="p">(</span><span class="nv">$splitWithUnderscore</span><span class="p">,</span> <span class="nv">$mapUcfirst</span><span class="p">,</span> <span class="s1">&#39;join&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$camelize</span><span class="p">(</span><span class="s1">&#39;man_with_a_mission&#39;</span><span class="p">));</span>
</span><span class='line'><span class="c1">// ManWithAMission</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pryでデバッグ]]></title>
    <link href="http://ackintosh.github.io/blog/2013/07/03/pry/"/>
    <updated>2013-07-03T20:54:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/07/03/pry</id>
    <content type="html"><![CDATA[<p>いいかげんプリントデバッグは疲れるのでpryを使ってみます。</p>

<p><a href="https://github.com/pry/pry" target="_blank">https://github.com/pry/pry</a></p>

<p>φ(..)メモメモ</p>

<!-- more -->


<h2>pry</h2>

<h3>インストール</h3>

<script src="https://gist.github.com/ackintosh/5917386.js?file=install.sh"></script>


<h3>デバッグ</h3>

<p><code>binding.pry</code> でREPLが起動する。</p>

<script src="https://gist.github.com/ackintosh/5917386.js?file=debug.rb"></script>


<h2>pry-nav</h2>

<p>pry-navというgemを入れるとステップ実行ができる。</p>

<script src="https://gist.github.com/ackintosh/5917386.js?file=install_nav.sh"></script>


<p>下記のように<code>~/.pryrc</code>にエイリアスを設定しておくと便利。</p>

<script src="https://gist.github.com/ackintosh/5917386.js?file=.pryrc"></script>


<h2>参考URL</h2>

<ul>
<li><a href="http://blog.ainam.me/2012/03/20/summary-of-pry-plugins/" target="_blank">http://blog.ainam.me/2012/03/20/summary-of-pry-plugins/</a></li>
<li><a href="http://shirusu-ni-tarazu.hatenablog.jp/entry/2012/06/24/051114" target="_blank">http://shirusu-ni-tarazu.hatenablog.jp/entry/2012/06/24/051114</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DateTimeクラス等に依存したクラスをテストする]]></title>
    <link href="http://ackintosh.github.io/blog/2013/06/11/testing-the-object-that-depend-to-datetime/"/>
    <updated>2013-06-11T22:29:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/06/11/testing-the-object-that-depend-to-datetime</id>
    <content type="html"><![CDATA[<p>DateTimeクラス等に依存したクラスをテストするのは難しい。</p>

<p>オブジェクトが生成された日時を正確に知らないといけないから。</p>

<!-- more -->


<p>例えば本の貸出しを表現したコード</p>

<script src="https://gist.github.com/ackintosh/5748987.js?file=before.php"></script>


<p>このクラスをテストしたい場合。</p>

<p>DateTimeクラスへの依存を下げるためにコンストラクタで渡すようにすると・・・</p>

<script src="https://gist.github.com/ackintosh/5748987.js?file=bad.php"></script>


<p>依存度が下がってテストもできるようになったけど、コンストラクタの第２引数はテストの時しか使わない。プロダクトコードには不要なもの。。。</p>

<p>後々、貸出冊数も渡そうとすると更に酷いことに。</p>

<script src="https://gist.github.com/ackintosh/5748987.js?file=too_bad.php"></script>


<p>そこで、DateTimeを差し替えられるようにstaticメソッドを用意しておくのはどうだろう。</p>

<p>こんな感じ。</p>

<script src="https://gist.github.com/ackintosh/5748987.js?file=after.php"></script>


<p>DIを勉強すればもっと良い方法があるのかな。</p>

<p>まだまだ勉強不足です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP用のベンチマークツールを作りました]]></title>
    <link href="http://ackintosh.github.io/blog/2013/06/11/developed-a-benchmark-tool/"/>
    <updated>2013-06-11T20:30:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/06/11/developed-a-benchmark-tool</id>
    <content type="html"><![CDATA[<p>こちらの記事に影響を受けて、参考にさせていただきながら自分でも作ってみました。</p>

<p><a href="http://blog.yuyat.jp/archives/1063" target="_blank">PHP 用ベンチマーキングフレームワーク Joshimane というのを作った http://blog.yuyat.jp/archives/1063</a></p>

<p>自分はなかなかいい名前が思いつかなかったので Benchy にしました。</p>

<p><a href="https://github.com/ackintosh/benchy" target="_blank">https://github.com/ackintosh/benchy</a></p>

<p>PEAR::Benchmarkと比べるとモダンな感じかなぁと思っています。</p>

<p>シンプルさと拡張性の高さをウリにできるように考えました。</p>

<!-- more -->


<h2>インストール</h2>

<p>もちろん<a href="http://getcomposer.org/" target="_blank">Composer</a>でインストールできます。</p>

<p> <script src="https://gist.github.com/ackintosh/5756449.js?file=composer.json"></script></p>

<pre><code>$ php composer.phar install
</code></pre>

<h2>使い方</h2>

<p> <script src="https://gist.github.com/ackintosh/5756449.js?file=sample.php"></script></p>

<p>これで途中経過の時間と、合計・平均時間がわかります。</p>

<h2>拡張性</h2>

<p><code>Ackintosh/Bechy/Marker</code> ディレクトリにクラスを配置してください。</p>

<p> <script src="https://gist.github.com/ackintosh/5756449.js?file=Example.php"></script></p>

<p>そうするとReporterクラスで使えるようになります。</p>

<p> <script src="https://gist.github.com/ackintosh/5756449.js?file=sample2.php"></script></p>

<h2>フックポイント</h2>

<ul>
<li>before：　ベンチマーク開始前</li>
<li>after：　ベンチマーク終了後</li>
<li>before_per_laps：　ベンチマーク前（毎回）</li>
<li>after_per_laps：　ベンチマーク後（毎回）</li>
</ul>


<p> <script src="https://gist.github.com/ackintosh/5756449.js?file=AnotherExample.php"></script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ChefでPHPをインストール]]></title>
    <link href="http://ackintosh.github.io/blog/2013/05/06/install-php-by-chef/"/>
    <updated>2013-05-06T16:45:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/05/06/install-php-by-chef</id>
    <content type="html"><![CDATA[<p>Opscode Communiityでレシピが提供されていますが、練習のために自分で作成します。</p>

<p><a href="http://community.opscode.com/cookbooks/php" target="_blank">Chef Cookbook: php - Opscode Community</a></p>

<ul>
<li><em>対象ノードを192.168.50.12で設定しています。</em></li>
<li><em>実運用では、Template Resouceを利用してphp.iniを設定する等が必要になります。</em></li>
</ul>


<!-- more -->


<h3>クックブック作成</h3>

<pre><code>$ knife cookbook create php

** Creating cookbook php
** Creating README for cookbook: php
** Creating CHANGELOG for cookbook: php
** Creating metadata for cookbook: php
</code></pre>

<h3>レシピを編集</h3>

<p><code>cookbooks/php/recipes/default.rb</code></p>

<pre><code>package "php" do
  action :install
end
</code></pre>

<h3>jsonのrun_listに追加</h3>

<p><code>nodes/192.168.50.12.json</code></p>

<pre><code>{
  "run_list" : [
    "php"
  ]
}
</code></pre>

<h3>レシピをノードに適用</h3>

<pre><code>$ knife solo cook 192.168.50.12

Recipe: php::default
  * package[php] action install
    - install version 5.3.3-22.el6 of package php
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FuelPHPでファイルアップロード]]></title>
    <link href="http://ackintosh.github.io/blog/2013/04/30/fileupload-in-fuelphp/"/>
    <updated>2013-04-30T20:53:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/04/30/fileupload-in-fuelphp</id>
    <content type="html"><![CDATA[<p>FuelPHPでファイルアップロードするときのメモです。φ(..)メモメモ</p>

<p><a href="http://fuelphp.com/" target="_blank">FuelPHP &raquo; A simple, flexible, community driven PHP5.3 framework.</a><br/>
<a href="http://fuelphp.jp/" target="_blank">FuelPHP.JP 日本語ドキュメント</a></p>

<!-- more -->


<h3>設定ファイルをappディレクトリにコピー</h3>

<pre><code>$ cp core/config/upload.php app/config/
</code></pre>

<h3>viewを作成</h3>

<p>gistfile1.php</p>

<h3>controllerを作成</h3>

<p>gistfile2.php</p>

<script src="https://gist.github.com/ackintosh/5488231.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FuelPHPに独自の設定ファイルを追加する]]></title>
    <link href="http://ackintosh.github.io/blog/2013/04/29/custom-configuration-file-for-fuelphp/"/>
    <updated>2013-04-29T16:37:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/04/29/custom-configuration-file-for-fuelphp</id>
    <content type="html"><![CDATA[<p>FuelPHPで、独自に作成した設定ファイルを使う方法のメモです。φ(｀д´)ﾒﾓﾒﾓ…</p>

<p><a href="http://fuelphp.com/" target="_blank">FuelPHP &raquo; A simple, flexible, community driven PHP5.3 framework.</a><br/>
<a href="http://fuelphp.jp/" target="_blank">FuelPHP.JP 日本語ドキュメント</a></p>

<!-- more -->


<h3>設定ファイルを作成</h3>

<p>gistfile1.php</p>

<h3>設定を読み込む</h3>

<p>gistfile2.php</p>

<p><code>Config::load()</code>の第2引数に文字列を渡すと、任意のグループ名を指定できる。</p>

<script src="https://gist.github.com/ackintosh/5480241.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FuelPHPに独自のバリデーションルールを追加する]]></title>
    <link href="http://ackintosh.github.io/blog/2013/04/29/custom-validation-for-fuelphp/"/>
    <updated>2013-04-29T16:08:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/04/29/custom-validation-for-fuelphp</id>
    <content type="html"><![CDATA[<p><a href="http://fuelphp.com/" target="_blank">FuelPHP &raquo; A simple, flexible, community driven PHP5.3 framework.</a><br/>
<a href="http://fuelphp.jp/" target="_blank">FuelPHP.JP 日本語ドキュメント</a></p>

<p>実際の開発では、独自のバリデーションルールがいくつか必要になります。<br/>
FuelPHPで追加する方法のメモです。φ(｀д´)ﾒﾓﾒﾓ…</p>

<!-- more -->


<h3>バリデーションルールを定義する</h3>

<p>gistfile1.php</p>

<h3>定義したルールのテストを書く</h3>

<p>gistfile2.php</p>

<h3>ルールを適用する</h3>

<p>gistfile3.php</p>

<h3>エラーメッセージを定義する</h3>

<p>gistfile4.php</p>

<script src="https://gist.github.com/ackintosh/5479927.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPでTCPサーバー]]></title>
    <link href="http://ackintosh.github.io/blog/2013/04/18/tcp-server-written-in-php/"/>
    <updated>2013-04-18T22:57:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/04/18/tcp-server-written-in-php</id>
    <content type="html"><![CDATA[<p>PHPでTCPサーバーを書いてみました。</p>

<p>pcntl関数を使うには、phpソースをbuildする時に&#8211;enable-pcntlを付けないといけません。</p>

<!-- more -->


<p>個人的には、pcntl_fork()したあとswitch文で分岐する流れが、
理解するのに苦労しました。</p>

<p>ちょうどRubyで並列処理を勉強していたのですが、
やっぱりRubyの方が直感的で書きやすいですね。  <br/>
<a href="http://melborne.github.io/2011/09/29/irb-Ruby-fork-WebSocket/">irbから学ぶRubyの並列処理 ~ forkからWebSocketまで</a></p>

<script src="https://gist.github.com/ackintosh/5381925.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ラムダ・クロージャ・部分適用・カリー化を一言でいうと？]]></title>
    <link href="http://ackintosh.github.io/blog/2013/04/18/lambda/"/>
    <updated>2013-04-18T08:07:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/04/18/lambda</id>
    <content type="html"><![CDATA[<p>すぐに混乱してしまうので、端的にまとめてみました。<br/>
勉強しながら少しづつ修正しています。<br/>
間違いがありましたら、ご指摘いただけると幸いです。</p>

<!-- more -->


<h2>ラムダとクロージャ</h2>

<h3>ラムダ(無名関数)</h3>

<p>使い捨ての名前のない関数。</p>

<h3>クロージャ</h3>

<p>関数を返す関数の中で、 変数を束縛(bind/capture)する関数。</p>

<h5>※クロージャと関数を返す関数の違い → 変数を束縛するかしないか。</h5>

<h2>部分適用とカリー化</h2>

<h3>部分適用</h3>

<p>クロージャ等を利用して引数の数の少ない関数を作ること。<br/>
(下記Rubyコードのうち、invを導出すること)</p>

<h3>カリー化</h3>

<p><strike>部分適用の中でも、関数の引数をひとつだけにすること。</strike><br/>
複数の引数をとる関数を、引数が「もとの関数の最初の引数」で戻り値が「もとの関数の残りの引数を取り結果を返す関数」であるような関数にすること。<br/>
(下記Rubyコードのうち、cdivを導出すること)</p>

<script src="https://gist.github.com/ackintosh/5431663.js"></script>


<hr />

<h4>参考にさせていただきました。</h4>

<ul>
<li><a href="http://prezi.com/9brwewgcxtr2/javascript/" target="_blank">javascript で遊ぶラムダ式、クロージャ、カリー化</a></li>
<li><a href="http://ja.wikipedia.org/wiki/%E3%82%AB%E3%83%AA%E3%83%BC%E5%8C%96" target="_blank">カリー化 - Wikipedia</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPでマージソート]]></title>
    <link href="http://ackintosh.github.io/blog/2013/03/17/mergesort-in-php/"/>
    <updated>2013-03-17T21:03:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/03/17/mergesort-in-php</id>
    <content type="html"><![CDATA[<p>1から自分で実装してみたかったので、
あえてarray系関数は使わないようにしてます。</p>

<!-- more -->




<script src="https://gist.github.com/ackintosh/5180548.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SublimeText2 + MAMPでXdebugを使う]]></title>
    <link href="http://ackintosh.github.io/blog/2013/02/24/using-xdebug-on-st2/"/>
    <updated>2013-02-24T15:23:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/02/24/using-xdebug-on-st2</id>
    <content type="html"><![CDATA[<p>こんな素敵なブログ記事がありましたので試してみました。<br/>
<a href="http://www.calmtech.net/2012/12/18/st2-mamp-xdebug/" target="_blank">Sublime Text 2 + MAMP + Xdebug でPHPデバッグをする方法</a></p>

<p>自分用にメモを残しておきます。</p>

<!-- more -->


<p><img src="https://dl.dropbox.com/u/22083548/octopress/2013/02/st2_xdebug.png" alt="ST2+Xdebug" /></p>

<h2>Package ControlでSublimeXdebugをインストール</h2>

<p><a href="https://github.com/Kindari/SublimeXdebug" target="_blank">Kindari / SublimeXdebug</a></p>

<ul>
<li>Ctrl + Shift + p でコマンドパレットを表示</li>
<li>install とタイプするとPackage Control: Install PackageがハイライトされるのでEnter</li>
<li>xdebug とタイプするとSublimeXDebugがハイライトされるのでEnter</li>
</ul>


<h2>php.iniに設定追加</h2>

<script src="https://gist.github.com/ackintosh/5022883.js"></script>


<p>dbgpをクォーテーションで囲った状態だとエラーになりました。</p>

<pre><code>xdebug.remote_handler="dbgp"
</code></pre>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/2013/02/xdebug_error.png" alt="Xdebug Error" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[群馬でアルゴリズムを学んできました]]></title>
    <link href="http://ackintosh.github.io/blog/2013/02/17/learn-the-algorithm-in-gunma/"/>
    <updated>2013-02-17T00:01:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/02/17/learn-the-algorithm-in-gunma</id>
    <content type="html"><![CDATA[<p>まさか邑楽町で勉強会をやることになるなんて・・・夢にも思いませんでした。</p>

<p><a href="http://atnd.org/events/36390">群馬でアルゴリズムを学ぼう - 第1回 アルゴリズムと計算量</a></p>

<!-- more -->


<p>１人で勉強してる場合、分からないことにぶつかると、、<br/>
「これはこーゆーモノだ！」と取り敢えず自分に思い込ませて先に進まないといけなかったりしたのですが、<br/>
勉強会だと「その場で不明点を挙げる -> 理解できるまで落とし込んでいく」という流れがあって<br/>
すごく濃い時間が過ごせていたなぁと感じました。</p>

<p>まるで、目の前に立ちはだかっていた巨大な氷山が徐々に溶けていくような感覚がありました。</p>

<p>それと、自分が引っかかっていたポイントって他の方達も一緒だったりして、<br/>
妙な安心感(？)みたいなものもあったり・・・ｗ</p>

<p>ツルマウ先生、参加者のみなさまありがとうございました。<br/>
(遠方からありがとうございました)</p>

<p>ちなみにこの日書いた(写経した)コードはこちらです。<br/>
ペチパーな僕はPHPで書いてました。<br/>
<a href="https://gist.github.com/ackintosh/4760829">ackintosh / gist:4760829</a></p>

<script src="https://gist.github.com/ackintosh/4760829.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyでObserverパターン]]></title>
    <link href="http://ackintosh.github.io/blog/2013/02/03/observer-pattern-in-ruby/"/>
    <updated>2013-02-03T19:11:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/02/03/observer-pattern-in-ruby</id>
    <content type="html"><![CDATA[<h2>Observerパターン メモ</h2>

<p>他のコンポーネントの動きを監視するコンポーネントを作ることが出来る。<br/>
オブジェクト同士を結合させることがないので、スパゲッティにならずにすむ。<br/>
情報を通知するクラスをサブジェクト(Subject)、情報を受け取るクラスをオブザーバ(Observer)と呼ぶ。</p>

<!-- more -->


<h4>gistfile1.rb</h4>

<p>Subject: Employee<br/>
Observer: Payroll, TaxMan<br/>
Subjectの機能をモジュールとして実装。</p>

<h4>gistfile2.rb</h4>

<p>Ruby標準のObservableモジュールを使った場合。</p>

<h4>gistfile3.rb</h4>

<p>Observerをコードブロックで実装した場合。</p>

<p><a href="https://gist.github.com/4701126">https://gist.github.com/4701126</a></p>

<script src="https://gist.github.com/4701126.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressで記事が作れない(zsh)]]></title>
    <link href="http://ackintosh.github.io/blog/2013/02/02/cant-create-post/"/>
    <updated>2013-02-02T20:19:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/02/02/cant-create-post</id>
    <content type="html"><![CDATA[<p>zshを使うようになってからOctopressで記事を作成するときにエラーが出るようになってしまった。</p>

<pre><code>$ rake new_post[hoge]
zsh: no matches found: new_post[hoge]
</code></pre>

<!-- more -->


<p>ググったら２つ解決策を発見。<br/>
<a href="https://github.com/imathis/octopress/issues/117">https://github.com/imathis/octopress/issues/117</a></p>

<h4>1. aliasを設定する</h4>

<pre><code>$ alias rake="noglob rake"
</code></pre>

<h4>2. クォーテーションで囲む</h4>

<pre><code>$ rake "new_post[hoge]"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[シェルをzshに変更]]></title>
    <link href="http://ackintosh.github.io/blog/2013/02/02/using-zsh/"/>
    <updated>2013-02-02T20:05:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/02/02/using-zsh</id>
    <content type="html"><![CDATA[<p>※随時更新予定です。</p>

<h2>現在のシェルを確認</h2>

<pre><code>$ echo $SHELL
</code></pre>

<h2>使えるシェルを確認</h2>

<pre><code>$ cat /etc/shells
</code></pre>

<!-- more-->


<h2>zshに変更</h2>

<pre><code>$ chsh -s /bin/zsh
</code></pre>

<h2>oh-my-zshのインストール</h2>

<pre><code>$ git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
$ cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
</code></pre>

<h3>テーマ変更</h3>

<pre><code>$ vi ~/.zshrc
ZSH_THEME="テーマ名"
</code></pre>

<h3>テーマ一覧</h3>

<p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p>

<h2>Git の作業コピーに変更があるかどうかをプロンプトに表示する</h2>

<p><a href="http://mollifier.hatenablog.com/entry/20100906/p1">http://mollifier.hatenablog.com/entry/20100906/p1</a></p>

<h3>※oh-my-zshのアンインストール</h3>

<pre><code>$ uninstall_oh_my_zsh
</code></pre>

<h2>ターミナルからSublime Textを起動する設定</h2>

<pre><code>$ vi ~/.zshrc

alias st="/Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl"

$ source ~/.zshrc
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPで関数型プログラミング]]></title>
    <link href="http://ackintosh.github.io/blog/2013/02/02/functional-programming-in-php/"/>
    <updated>2013-02-02T19:57:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/02/02/functional-programming-in-php</id>
    <content type="html"><![CDATA[<p>ある日、こちらの記事を読んでいて<br/>
<a href="http://melborne.github.com/2013/01/21/why-fp-with-ruby/">Rubyを使って「なぜ関数プログラミングは重要か」を読み解く（改定）─ 前編 ─ 但し後編の予定なし</a><br/>
PHPにもクロージャあるし、PHPで出来そうだ！ということで書いてみました。</p>

<!-- more -->


<p>やっぱりRubyの方が簡潔で良いですね ^_^ ;</p>

<p>まだ関数型の勉強を本格的にできてないのですが、<br/>
余計な変数を一切宣言しなくて済むのが素敵だなぁと思いました。<br/>
ループを再帰で書くのがまたカッコイイ！</p>

<p><a href="https://gist.github.com/4696317.git">https://gist.github.com/4696317.git</a></p>

<script src="https://gist.github.com/4696317.js"></script>



]]></content>
  </entry>
  
</feed>
