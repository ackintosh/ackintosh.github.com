<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[暁 [stfuawsc]]]></title>
  <link href="http://ackintosh.github.com/atom.xml" rel="self"/>
  <link href="http://ackintosh.github.com/"/>
  <updated>2013-02-24T16:02:03+09:00</updated>
  <id>http://ackintosh.github.com/</id>
  <author>
    <name><![CDATA[Ackintosh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SublimeText2 + MAMPでXdebugを使う]]></title>
    <link href="http://ackintosh.github.com/blog/2013/02/24/using-xdebug-on-st2/"/>
    <updated>2013-02-24T15:23:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2013/02/24/using-xdebug-on-st2</id>
    <content type="html"><![CDATA[<p>こんな素敵なブログ記事がありましたので試してみました。<br/>
<a href="http://www.calmtech.net/2012/12/18/st2-mamp-xdebug/" target="_blank">Sublime Text 2 + MAMP + Xdebug でPHPデバッグをする方法</a></p>

<p>自分用にメモを残しておきます。</p>

<!-- more -->


<p><img src="https://dl.dropbox.com/u/22083548/octopress/2013/02/st2_xdebug.png" alt="ST2+Xdebug" /></p>

<h2>Package ControlでSublimeXdebugをインストール</h2>

<p><a href="https://github.com/Kindari/SublimeXdebug" target="_blank">Kindari / SublimeXdebug</a></p>

<ul>
<li>Ctrl + Shift + p でコマンドパレットを表示</li>
<li>install とタイプするとPackage Control: Install PackageがハイライトされるのでEnter</li>
<li>xdebug とタイプするとSublimeXDebugがハイライトされるのでEnter</li>
</ul>


<h2>php.iniに設定追加</h2>

<script src="https://gist.github.com/ackintosh/5022883.js"></script>


<p>dbgpをクォーテーションで囲った状態だとエラーになりました。</p>

<pre><code>xdebug.remote_handler="dbgp"
</code></pre>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/2013/02/xdebug_error.png" alt="Xdebug Error" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[群馬でアルゴリズムを学んできました]]></title>
    <link href="http://ackintosh.github.com/blog/2013/02/17/learn-the-algorithm-in-gunma/"/>
    <updated>2013-02-17T00:01:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2013/02/17/learn-the-algorithm-in-gunma</id>
    <content type="html"><![CDATA[<p>まさか邑楽町で勉強会をやることになるなんて・・・夢にも思いませんでした。</p>

<p><a href="http://atnd.org/events/36390">群馬でアルゴリズムを学ぼう - 第1回 アルゴリズムと計算量</a></p>

<!-- more -->


<p>１人で勉強してる場合、分からないことにぶつかると、、<br/>
「これはこーゆーモノだ！」と取り敢えず自分に思い込ませて先に進まないといけなかったりしたのですが、<br/>
勉強会だと「その場で不明点を挙げる -> 理解できるまで落とし込んでいく」という流れがあって<br/>
すごく濃い時間が過ごせていたなぁと感じました。</p>

<p>まるで、目の前に立ちはだかっていた巨大な氷山が徐々に溶けていくような感覚がありました。</p>

<p>それと、自分が引っかかっていたポイントって他の方達も一緒だったりして、<br/>
妙な安心感(？)みたいなものもあったり・・・ｗ</p>

<p>ツルマウ先生、参加者のみなさまありがとうございました。<br/>
(遠方からありがとうございました)</p>

<p>ちなみにこの日書いた(写経した)コードはこちらです。<br/>
ペチパーな僕はPHPで書いてました。<br/>
<a href="https://gist.github.com/ackintosh/4760829">ackintosh / gist:4760829</a></p>

<script src="https://gist.github.com/ackintosh/4760829.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyでObserverパターン]]></title>
    <link href="http://ackintosh.github.com/blog/2013/02/03/observer-pattern-in-ruby/"/>
    <updated>2013-02-03T19:11:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2013/02/03/observer-pattern-in-ruby</id>
    <content type="html"><![CDATA[<h2>Observerパターン メモ</h2>

<p>他のコンポーネントの動きを監視するコンポーネントを作ることが出来る。<br/>
オブジェクト同士を結合させることがないので、スパゲッティにならずにすむ。<br/>
情報を通知するクラスをサブジェクト(Subject)、情報を受け取るクラスをオブザーバ(Observer)と呼ぶ。</p>

<!-- more -->


<h4>gistfile1.rb</h4>

<p>Subject: Employee<br/>
Observer: Payroll, TaxMan<br/>
Subjectの機能をモジュールとして実装。</p>

<h4>gistfile2.rb</h4>

<p>Ruby標準のObservableモジュールを使った場合。</p>

<h4>gistfile3.rb</h4>

<p>Observerをコードブロックで実装した場合。</p>

<p><a href="https://gist.github.com/4701126">https://gist.github.com/4701126</a></p>

<script src="https://gist.github.com/4701126.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressで記事が作れない(zsh)]]></title>
    <link href="http://ackintosh.github.com/blog/2013/02/02/cant-create-post/"/>
    <updated>2013-02-02T20:19:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2013/02/02/cant-create-post</id>
    <content type="html"><![CDATA[<p>zshを使うようになってからOctopressで記事を作成するときにエラーが出るようになってしまった。</p>

<pre><code>$ rake new_post[hoge]
zsh: no matches found: new_post[hoge]
</code></pre>

<!-- more -->


<p>ググったら２つ解決策を発見。<br/>
<a href="https://github.com/imathis/octopress/issues/117">https://github.com/imathis/octopress/issues/117</a></p>

<h4>1. aliasを設定する</h4>

<pre><code>$ alias rake="noglob rake"
</code></pre>

<h4>2. クォーテーションで囲む</h4>

<pre><code>$ rake "new_post[hoge]"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[シェルをzshに変更]]></title>
    <link href="http://ackintosh.github.com/blog/2013/02/02/using-zsh/"/>
    <updated>2013-02-02T20:05:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2013/02/02/using-zsh</id>
    <content type="html"><![CDATA[<p>※随時更新予定です。</p>

<h2>現在のシェルを確認</h2>

<pre><code>$ echo $SHELL
</code></pre>

<h2>使えるシェルを確認</h2>

<pre><code>$ cat /etc/shells
</code></pre>

<!-- more-->


<h2>zshに変更</h2>

<pre><code>$ chsh -s /bin/zsh
</code></pre>

<h2>oh-my-zshのインストール</h2>

<pre><code>$ git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
$ cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
</code></pre>

<h3>テーマ変更</h3>

<pre><code>$ vi ~/.zshrc
ZSH_THEME="テーマ名"
</code></pre>

<h3>テーマ一覧</h3>

<p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p>

<h2>Git の作業コピーに変更があるかどうかをプロンプトに表示する</h2>

<p><a href="http://mollifier.hatenablog.com/entry/20100906/p1">http://mollifier.hatenablog.com/entry/20100906/p1</a></p>

<h3>※oh-my-zshのアンインストール</h3>

<pre><code>$ uninstall_oh_my_zsh
</code></pre>

<h2>ターミナルからSublime Textを起動する設定</h2>

<pre><code>$ vi ~/.zshrc

alias st="/Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl"

$ source ~/.zshrc
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPで関数型プログラミング]]></title>
    <link href="http://ackintosh.github.com/blog/2013/02/02/functional-programming-in-php/"/>
    <updated>2013-02-02T19:57:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2013/02/02/functional-programming-in-php</id>
    <content type="html"><![CDATA[<p>ある日、こちらの記事を読んでいて<br/>
<a href="http://melborne.github.com/2013/01/21/why-fp-with-ruby/">Rubyを使って「なぜ関数プログラミングは重要か」を読み解く（改定）─ 前編 ─ 但し後編の予定なし</a><br/>
PHPにもクロージャあるし、PHPで出来そうだ！ということで書いてみました。</p>

<!-- more -->


<p>やっぱりRubyの方が簡潔で良いですね ^_^ ;</p>

<p>まだ関数型の勉強を本格的にできてないのですが、<br/>
余計な変数を一切宣言しなくて済むのが素敵だなぁと思いました。<br/>
ループを再帰で書くのがまたカッコイイ！</p>

<p><a href="https://gist.github.com/4696317.git">https://gist.github.com/4696317.git</a></p>

<script src="https://gist.github.com/4696317.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZendQueueとKestrelでメッセージキューサーバーを体験]]></title>
    <link href="http://ackintosh.github.com/blog/2013/01/03/message-queue-server-with-php/"/>
    <updated>2013-01-03T22:58:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2013/01/03/message-queue-server-with-php</id>
    <content type="html"><![CDATA[<h3>Kestrel</h3>

<p>Scalaで書かれたメッセージキューサーバー。Twitterで使われてるらしいです。<br/>
<a href="http://samuraism.jp/diary/2011/11/20/1321770660000.html">Twitterで使っているScalaで書かれたオープンソースのメッセージキューサーバー、Kestrel :侍ズム#samuraism</a></p>

<!-- more -->


<h4>インストールと起動</h4>

<pre><code>$ curl -O http://robey.github.com/kestrel/download/kestrel-2.4.1.zip
$ unzip kestrel-2.4.1.zip
$ cd kestrel-2.4.1
$ sudo java -jar kestrel_2.9.2-2.4.1.jar
</code></pre>

<h3>ZendQueue</h3>

<p>Zend Frameworkのコンポーネントの１つで、メッセージキューを利用するために使います。　　</p>

<p>GitHub
<a href="https://github.com/zendframework/ZendQueue">https://github.com/zendframework/ZendQueue</a></p>

<p>メッセージを格納する方法によって複数のアダプタが用意されています。<br/>
Kestrel用のアダプタはありませんが、Kestrelはmemcachedプロトコルをサポートしているので、MemcacheQアダプタを利用します。</p>

<h3>Memcache</h3>

<p>あらかじめMemcachedライブラリもインストールしておいて下さい。<br/>
Macの場合はHomebrewを使うと簡単にインストールできます♪</p>

<pre><code>$ brew install memcached
$ brew install memcache-php
</code></pre>

<h3>メッセージキューサーバーを体験</h3>

<p>２つのスクリプトを用意してください。<br/>
・worker.php : ワーカープロセス。キューからメッセージを取得して表示する。<br/>
・front.php : キューにメッセージを送信する。</p>

<script src="https://gist.github.com/4444078.js"></script>


<p>
<a href="https://gist.github.com/4444078">https://gist.github.com/4444078</a></p>

<p>ターミナルを２つたちあげてください。<br/>
・ターミナル１でworker.phpを実行<br/>
プロンプトが返ってこない → Kestrelのキューを監視してくれています。</p>

<p>・ターミナル２でfront.phpを実行すると…<br/>
ターミナル１に「Hello, World!」と表示されます！</p>

<p>簡単ですが以上です。<br/>
Hello, Worldが表示された時には感動しますね (・∀・)<br/>
worker.phpを実行するターミナルを増やしたりするとなお楽しくなってきます♪</p>

<h4>参考</h4>

<p><a href="http://samuraism.jp/diary/2011/11/20/1321770660000.html">Twitterで使っているScalaで書かれたオープンソースのメッセージキューサーバー、Kestrel :侍ズム#samuraism</a><br/>
<a href="http://blog.asial.co.jp/875">PHP+Kestrel+Supervisorでお手軽タスクキューイング :アシアルブログ</a><br/>
<a href="http://codezine.jp/article/detail/5744">PHPアプリでメッセージキューサーバを活用する - Zend_Queue - :CodeZine</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacにMemcacheQをインストール]]></title>
    <link href="http://ackintosh.github.com/blog/2013/01/03/install-memcacheq/"/>
    <updated>2013-01-03T17:36:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2013/01/03/install-memcacheq</id>
    <content type="html"><![CDATA[<p><em>MemcacheQ - Simple Queue Service over Memcache</em><br/>
<a href="http://memcachedb.org/memcacheq/">http://memcachedb.org/memcacheq/</a></p>

<!-- more -->


<p>homebrewで一発でした (・∀・)<br/>
もちろん、依存するBerkeley DBとlibeventも自動でインストールしてくれます。</p>

<pre><code>$ brew install memcacheq
</code></pre>

<p>ヘルプ確認</p>

<pre><code>$ memcacheq -h
</code></pre>

<p>とりあえず起動してみる</p>

<pre><code>$ memcacheq -H ./
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012年振り返り]]></title>
    <link href="http://ackintosh.github.com/blog/2013/01/01/looking-back-on-2012/"/>
    <updated>2013-01-01T18:25:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2013/01/01/looking-back-on-2012</id>
    <content type="html"><![CDATA[<p>新年あけましておめでとうございます。<br/>
2012年の振り返りです。<br/>
2012年は色々なことを始めました。</p>

<!-- more -->


<h3>ブログ</h3>

<p>当ブログを2012/07/08から始めました。<br/>
<a href="http://octopress.org/">Octopress</a> + github Pages で作っています。<br/>
ブログを書くこと(アウトプット)を意識したインプットをするようになってきたかな・・？と思います。単なる情報ではなく、知識をアウトプットできるように継続していきたいです。<br/>
このブログをきっかけにMarkdownを知りました。楽に書けて良いですね。<br/>
Markdownエディタはあまり試してないのですがkobitoを使っています。kobitoのファイル連携機能を使うとOctopressの記事更新がかなり快適になります。<br/>
あとはブログ自体に、プログラマらしい仕掛けを何か作りたいなぁと。</p>

<h3>勉強会に参加</h3>

<p>内気で人見知りな私ですが、勇気を振り絞って勉強会に参加しました。<br/>
いまでも参加するときはガチガチに緊張してしまいます。</p>

<h4>6/23 Agile渋谷「The GitHub poweredby Agile渋谷」</h4>

<p><a href="http://atnd.org/events/30016">http://atnd.org/events/30016</a></p>

<h4>6/26 渋谷Rails勉強会</h4>

<p><a href="http://atnd.org/events/27691">http://atnd.org/events/27691</a></p>

<h4>7/27 Developers [Social Enterprise] Summit 2012</h4>

<p><a href="http://codezine.jp/devsumi/2012/social/">http://codezine.jp/devsumi/2012/social/</a></p>

<h4>10/13 Web API勉強会「イベント × 位置情報 マッシュアップワークショップ」</h4>

<p><a href="http://atnd.org/event/E0009968/0">http://atnd.org/event/E0009968/0</a></p>

<h4>12/15〜16 DevLOVE2012</h4>

<p><a href="http://devlove2012.devlove.org/">http://devlove2012.devlove.org/</a></p>

<h3>github</h3>

<p>ソーシャルコーディング時代。<br/>
プログラマだったら、コード書いて公開してなんぼですよね！<br/>
・・・という内容のブログ記事やtweetをいたるところで見かけたのがきっかけです。</p>

<p>6/23のAgile渋谷に参加した日、WEB+DB Press(github特集)を片手に始めました。<br/>
自分に手頃そうなリポジトリを探してforkして、緊張して手に汗をかきながら pull request したのを覚えています。<br/>
mergeされたときはメチャクチャ嬉しかったです。</p>

<h3>Ruby</h3>

<p>phpばっかり書いててもなぁ・・・。ということでRubyを勉強し始めました。(いつ頃からかは忘れてしまいました)<br/>
２年半程前にプログラマーになってから、phpしか知らなかった自分にとって、とても興味深いことばかりです。<br/>
最初は「文字列とかも全部オブジェクト？どゆこと？？」って感じだったのですが、勉強するほど面白さがわかってくるというか、自分のプログラミングの幅が広がっていくような感覚があります。  <br/>
いろんな言語のパラダイムを吸収して、もっともっと成長しないとですね。。。<br/>
Clean Coderに「毎年１つ言語を習得すること」とありますが、まさにこのことなのかなぁと体感しています。</p>

<h3>Rails, Heroku</h3>

<p>Rubyを始めたからにはRailsをさわりたい！Herokuをさわりたい！ということで、Rubyの文法もままならない状態でしたが２つほどWebアプリを作ってみました。<br/>
<strong>Markdownエディタ。Evernoteに保存できます。</strong><br/>
<a href="http://md2note.herokuapp.com/">http://md2note.herokuapp.com/</a><br/>
<strong>感謝の言葉を投稿。Facebookアカウントを使います</strong><br/>
<a href="http://thankyou.heroku.com/">http://thankyou.heroku.com/</a></p>

<h3>コミュニティ</h3>

<p>Ruby関連の勉強会やらコミュニティについて調べていたときに、地元の群馬(しかも隣り町！)の勉強会を見つけました。<br/>
(職場が埼玉県さいたま市なので、どう頑張っても開始時刻に間に合わないのが悔しいところです T_T)<br/>
<em>guRuby</em><br/>
<a href="http://qwik.jp/guruby/">http://qwik.jp/guruby/</a><br/>
さっそく勇気を振り絞って、緊張と寒さでガチガチになりながらも参加させていただきました。(年内最後の勉強会でした)<br/>
まだ、お会いできていない方もいらっしゃいますが、優しい方々で本当によかったです。<br/>
自分も貢献できるように頑張ります。</p>

<h2>2013年は</h2>

<p>2012年に始めたことを継続していきます！
あとScalaの勉強したいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devlove2012に行って来ました]]></title>
    <link href="http://ackintosh.github.com/blog/2012/12/17/devlove2012/"/>
    <updated>2012-12-17T23:53:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/12/17/devlove2012</id>
    <content type="html"><![CDATA[<p>devlove2012にいってきました。
初参加です。<br/>
<a href="http://devlove2012.devlove.org/">http://devlove2012.devlove.org/</a></p>

<p>群馬からの参加ということもあり、１日目のあと帰るのが面倒だったので<br/>
渋谷のカプセルホテルを予め予約していきました。<br/>
カプセルホテルは初めてでしたが、サウナ付きでなかなか良かったと思います。
…</p>

<p>今回のテーマは「自分戦略」</p>

<p>自分の能力やキャリア・環境に悩みながらいつもモヤモヤしている日々をなんとかしたい。<br/>
Web業界の先輩方のお話をきいて何か得られれば、という思いで参加しました。</p>

<!-- more -->


<pre><code>■自分戦略
戦略って？
{
  ・「何にどれだけ時間を費やすのか」
  →取捨選択が必要。
  ・これまでやってきたことと、これからやりたいことを繋ぐこと
}

何のための戦略？
{
  ・やりたいことをやるため
  （やりたくないことをやらないため）
  ・一緒に仕事したい人とするため
  ・収入を上げるため
}

■やるべき事
整理
{
    1. 危機感を持って勉強
    2. アウトプット
    3. 何が自分の情熱なのか
    4. どうすればそれが実現するのか
}

アウトプット
{
  Blog
  github
  勉強会
}    

自分をプロモーション
{
  twitter, facebook
  勉強会で発表する
}

コネクション
{
  コミュニティ
  勉強会
}

■今後のトレンド
・マルチコアの活用
・コンピュータサイエンスの地位向上
</code></pre>

<p>今後はインプット／アウトプットを更に加速しつつ、
guRubyに参加（群馬在住ですので）して、コネクションを少しづつでも広げていきます。<br/>
それと、自分が何に対して情熱とか達成感とかを感じるのかをちゃんと定期的に整理しなければ、と思いました。</p>

<p>また、今回の反省点として、Macの電源を忘れてしまったのが痛かったです・・・</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[__callの使いどころ]]></title>
    <link href="http://ackintosh.github.com/blog/2012/11/25/using-the-call/"/>
    <updated>2012-11-25T13:44:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/11/25/using-the-call</id>
    <content type="html"><![CDATA[<p>既存クラスをラップしたい時とか、委譲をたくさん使いたい時に有用です。</p>

<!-- more -->


<script src="https://gist.github.com/4142451.js?file=gistfile1.php"></script>


<p></p>

<p>※コードが表示されない場合はこちら<br/>
<a href="https://gist.github.com/4142451">https://gist.github.com/4142451</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery MasonryでTOP記事を整列しました]]></title>
    <link href="http://ackintosh.github.com/blog/2012/11/10/introduced-jquery-dot-masonry/"/>
    <updated>2012-11-10T14:32:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/11/10/introduced-jquery-dot-masonry</id>
    <content type="html"><![CDATA[<p>当ブログTOPページに新着記事を並べているのですが、<br/>
ゴチャってたのですごく不満でした。</p>

<!-- more -->


<p>こんな感じです↓
<img src="https://dl.dropbox.com/u/22083548/octopress/201211/top_before.png" alt="top_before" /></p>

<h3>jQuery Masonry</h3>

<p><a href="http://pinterest.com/">pinterest</a>みたいに並べようと調べていたら、jQuery Masonryとやらで出来るとのことなので試してみました。</p>

<p><a href="http://masonry.desandro.com/">jQuery Masonry</a></p>

<script src="https://gist.github.com/4050100.js?file=masonry.html"></script>


<p></p>

<p>※コードが表示されない場合はこちら<br/>
<a href="https://gist.github.com/4050100">https://gist.github.com/4050100</a></p>

<p>綺麗に並びました！</p>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/201211/top_after.png" alt="top_after" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacにScalaをインストール]]></title>
    <link href="http://ackintosh.github.com/blog/2012/11/10/install-the-scala/"/>
    <updated>2012-11-10T13:22:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/11/10/install-the-scala</id>
    <content type="html"><![CDATA[<p>いままでLLしか書いたことないし、話題の関数型言語が気になるなぁという想いからScalaを勉強しようと思いました。</p>

<p>とりあえずAmazonでScalaの本を買いつつ、Macにインストール。</p>

<p><a href="http://www.amazon.co.jp/Scala%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%96%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E3%82%B3%E3%83%B3%E3%82%BB%E3%83%97%E3%83%88-%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0-Programming-Scala/dp/4844327453">Scalaスケーラブルプログラミング[コンセプト&amp;コーディング]</a>
<img src="http://ec2.images-amazon.com/images/I/41nFY0KbnfL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU09_.jpg" alt="Scalaスケーラブルプログラミング[コンセプト&amp;コーディング]" /> <br/>
コップ本って呼ばれているみたいです。</p>

<!-- more -->


<h3>Scalaをインストール</h3>

<p>homebrewでインストールしました。簡単〜</p>

<pre><code>$ brew install scala
==&gt; Downloading http://www.scala-lang.org/downloads/distrib/files/scala-2.9.2.tgz
######################################################################## 100.0%
==&gt; Downloading https://raw.github.com/scala/scala-dist/27bc0c25145a83691e3678c7dda602e765e13413/completion.d/2.9.1/scala
######################################################################## 100.0%
==&gt; Caveats
Bash completion has been installed to:
  /usr/local/etc/bash_completion.d
==&gt; Summary
/usr/local/Cellar/scala/2.9.2: 38 files, 26M, built in 115 seconds
$ scala -version
Scala code runner version 2.9.2 -- Copyright 2002-2011, LAMP/EPFL
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyでStrategyパターン]]></title>
    <link href="http://ackintosh.github.com/blog/2012/11/04/strategy-pattern-in-ruby/"/>
    <updated>2012-11-04T17:04:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/11/04/strategy-pattern-in-ruby</id>
    <content type="html"><![CDATA[<h3>Strategyパターン</h3>

<ul>
<li><p>アルゴリズムに多態性を持たせたい場合の、委譲ベースのアプローチ。</p></li>
<li><p>コンテキストとストラテジオブジェクト間のインターフェースに注意して設計する。</p></li>
</ul>


<!-- more -->


<h3>Rubyで書く</h3>

<ul>
<li><p>基底クラスFormatterはoutput_reportメソッドで例外を投げているだけなので、<br/>
この場合、基底クラスを定義せずに書く具象クラスを書いていったほうがRuby的。(ダックタイピング哲学)</p></li>
<li><p>Report#output_reportの引数がオブジェクトの参照なので、データの流れをシンプルにするが、クラス間の結合度が上がってしまっている。<br/>
→必要な引数の数が少なければ、オブジェクトでなくても良い。<br/>
(コンテキスト - ストラテジオブジェクト間のインターフェースの検討)</p></li>
</ul>


<script src="https://gist.github.com/4010809.js?file=gistfile1.rb"></script>


<p></p>

<p>埋め込んだコードが表示されない場合はこちら<br/>
→ <a href="https://gist.github.com/4010809">https://gist.github.com/4010809</a></p>

<h3>コードブロック(Procオブジェクト)を使って書く</h3>

<ul>
<li>コード例のように、ストラテジオブジェクトの実装がシンプルな場合には、ストラテジをコードブロックに置き換えることでシンプル且つRuby的になる。</li>
</ul>


<script src="https://gist.github.com/4010931.js?file=gistfile1.rb"></script>


<p></p>

<p>埋め込んだコードが表示されない場合はこちら<br/>
→ <a href="https://gist.github.com/4010931">https://gist.github.com/4010931</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyでTemplate Methodパターン]]></title>
    <link href="http://ackintosh.github.com/blog/2012/10/24/template-method-pattern-in-ruby/"/>
    <updated>2012-10-24T20:45:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/10/24/template-method-pattern-in-ruby</id>
    <content type="html"><![CDATA[<p>Template Methodパターンは、アルゴリズムに多態性を持たせたい場合に有効。</p>

<p>Rubyは抽象メソッドをサポートしていないので、Reportクラスのoutput_lineメソッドでは例外を投げるようにしている。</p>

<!-- more -->


<p><em>output_start</em> メソッドや <em>output_end</em> メソッドのように、<br/>
<em>Template Methodの具象クラスによってオーバーライドできる非抽象メソッド</em><br/>
を<strong>フックメソッド</strong> という。</p>

<script src="https://gist.github.com/3945597.js?file=gistfile1.rb"></script>


<p></p>

<p>埋め込んだコードが表示されない場合はこちら
→ <a href="https://gist.github.com/3945597">https://gist.github.com/3945597</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyで抽象クラス／メソッド]]></title>
    <link href="http://ackintosh.github.com/blog/2012/10/23/abstract-method-in-ruby/"/>
    <updated>2012-10-23T20:30:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/10/23/abstract-method-in-ruby</id>
    <content type="html"><![CDATA[<p>Rubyは抽象クラス／メソッドをサポートしていない。<br/>
これらは、Rubyの手軽で動的な考え方にそぐわないから。</p>

<!-- more -->


<p>でも、どうしても同様のことを実装したい場合は、例外を投げるだけのメソッドを定義すれば一応可能。</p>

<p>※ 下記のようなコードはダックタイピングの哲学に反するかもしれない。</p>

<p>※ 埋め込んだコードが表示されない場合
こちら→ <a href="https://gist.github.com/3938364">gist: 3938364</a></p>

<script src="https://gist.github.com/3938364.js?file=gistfile1.rb"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[traitを使ってObserverパターンを書いてみました。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/09/16/sample-of-observer-pattern-using-php5-dot-4/"/>
    <updated>2012-09-16T16:43:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/09/16/sample-of-observer-pattern-using-php5-dot-4</id>
    <content type="html"><![CDATA[<p>php5.4の目玉機能の１つ、trait。<br/>
RubyのMix-in的なことができると噂は聞いていたのですが、今までなんとなくスルーしてました・・・。</p>

<p>そんな中、phpカンファレンス2012に行ってモチベーションアップしてきたので勉強！<br/>
使い方はphpマニュアルにとても詳しく書いてあったので助かりました。感謝。<br/>
<a href="http://php.net/manual/ja/language.oop5.traits.php">http://php.net/manual/ja/language.oop5.traits.php</a></p>

<p>そんな学びたてホヤホヤのtraitを使ってObserverパターンを書いてみました。</p>

<!-- more -->


<p>埋め込んだコードが表示されない方はこちら<br/>
<a href="https://gist.github.com/3731335">https://gist.github.com/3731335</a></p>

<script src="https://gist.github.com/3731335.js"> </script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdownをプレビュー → Evernoteに保存できるサービスを作りました。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/09/02/md2note/"/>
    <updated>2012-09-02T16:58:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/09/02/md2note</id>
    <content type="html"><![CDATA[<p>最近はブログ記事とかをMarkdown記法で書いてる人も多いのではないでしょうか。<br/>
ブログのネタをEvernoteにメモしてる人も多いのではないでしょうか。</p>

<!-- more -->


<hr />

<p>Markdownをプレビューしながら書いてそのままEvernoteに保存できるサービスを作ってみました。<br/>
(RubyとRailsの勉強を兼ねて φ(..))<br/>
上記に当てはまる方は是非使ってみてください。</p>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/20120902/md2note_small.png" alt="md2note" /></p>

<p><em>Md2Note</em></p>

<p><a href="http://md2note.herokuapp.com/">http://md2note.herokuapp.com/</a></p>

<p>Evernoteにログインすると、ノート一覧がでますので<br/>
保存先のノートを選択してください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HerokuのWebサーバーをUnicornに変更する]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/28/using-the-unicorn-in-heroku/"/>
    <updated>2012-08-28T01:34:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/28/using-the-unicorn-in-heroku</id>
    <content type="html"><![CDATA[<p>最近PHPネタばかりだったので、頑張ってRailsについて書いてみます。<br/>
RailsではデフォルトでWEBrickが起動しますが、低速なので本番運用には向かないとされています。</p>

<p><a href="http://www.amazon.co.jp/WEB-DB-PRESS-Vol-70-%E6%88%90%E7%94%B0/dp/4774151904">WEB+DB PRESS Vol.70</a><br/>
<img src="https://dl.dropbox.com/u/22083548/octopress/20120827/webdb_vol70.jpeg" alt="WEB+DB PRESS Vol.70" /><br/>
WEB+DB PRESS vol.70でRails高速化としてUnicornが紹介されています。<br/>
普段Railsで開発するときはherokuを使っているので<br/>
herokuでUnicornを使ってみたいと思います。</p>

<!-- more -->


<h2>heroku ps を確認</h2>

<p>まずはherokuで現在使われているWebサーバーを確認します。</p>

<pre><code>$ heroku ps
</code></pre>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/20120827/heroku_ps_thin.png" alt="heroku_ps" /></p>

<p>herokuのデフォルトはthinなのでしょうか？？<br/>
以下、Unicornのインストールを進めていきます。</p>

<h2>Gemfileに追加</h2>

<pre><code>gem 'unicorn'
</code></pre>

<h2>config/unicorn.rbを作成</h2>

<p>とりあえず設定内容は下記にしました。<br/>
詳しいことは勉強中です。すみません。</p>

<pre><code>worker_processes 2
timeout 20
preload_app false
stdout_path "log/unicorn-out.log"
stderr_path "log/unicorn-err.log"
</code></pre>

<h2>Procfileを作成</h2>

<p>Railsのルートディレクトリ直下にProcfileを作成します。</p>

<pre><code>web: bundle exec unicorn -p $PORT -c ./config/unicorn.rb  
</code></pre>

<h2>herokuにpush</h2>

<p>いつものようにherokuにpushします。</p>

<pre><code>$ git push heroku master
</code></pre>

<h2>heroku ps で確認</h2>

<pre><code>$ heroku ps
</code></pre>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/20120827/heroku_ps_unicorn.png" alt="heroku_ps_unicorn" /></p>

<p>bundle exec unicorn …となっていれば成功です。<br/>
heroku psの出力の2行目が</p>

<pre><code>web.1: crashed for…
</code></pre>

<p>になっていたら設定を見なおしてみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQLでインデックスあり・なしの検索速度を比較してみました。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/26/compared-the-index-with-and-without/"/>
    <updated>2012-08-26T11:14:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/26/compared-the-index-with-and-without</id>
    <content type="html"><![CDATA[<p>usersとfavoritesが１対多になるようにして、
indexの設定あり・なしの2つのDBを用意して比較しました。<br/>
予め、<br/>
usersは 100,000件<br/>
favoritesに300,000件のレコードを用意しました。</p>

<!-- more -->


<h2>indexなし</h2>

<p>・テーブル作成</p>

<pre><code>create table users(
id int(11) not null primary key auto_increment,
name varchar(40) not null
) engine=innodb;

create table favorites(
user_id int(11) not null,
favorite_name varchar(40) not null
) engine=innodb;
</code></pre>

<p>・select<br/>
<img src="https://dl.dropbox.com/u/22083548/octopress/20120826/select_noindex.png" alt="select結果(indexなし)" /></p>

<p>・explain<br/>
<img src="https://dl.dropbox.com/u/22083548/octopress/20120826/explain_noindex.png" alt="explain(indexなし)" /></p>

<h2>indexあり</h2>

<p>・テーブル作成</p>

<pre><code>create table users(
id int(11) not null primary key auto_increment,
name varchar(40) not null
) engine=innodb;

create table favorites(
user_id int(11) not null,
favorite_name varchar(40) not null,
foreign key(user_id) references users(id)
) engine=innodb;
</code></pre>

<p>・select<br/>
<img src="https://dl.dropbox.com/u/22083548/octopress/20120826/select_index.png" alt="select結果(indexあり)" /></p>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/20120826/select_index_phpmyadmin.png" alt="select結果(phpmyadmin)" /></p>

<p>・explain
<img src="https://dl.dropbox.com/u/22083548/octopress/20120826/explain_index.png" alt="explain(indexあり)" /></p>

<h2>結果</h2>

<ul>
<li>indexなし<br/>
クエリ実行時間 0.38  秒</li>
<li>indexあり<br/>
クエリ実行時間 0.0005秒</li>
</ul>


<p>explainの結果から、indexがないと
テーブルのフルスキャンが発生してしまっていることがわかりました。</p>
]]></content>
  </entry>
  
</feed>
