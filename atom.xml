<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[暁]]></title>
  <link href="http://ackintosh.github.com/atom.xml" rel="self"/>
  <link href="http://ackintosh.github.com/"/>
  <updated>2012-10-23T20:27:31+09:00</updated>
  <id>http://ackintosh.github.com/</id>
  <author>
    <name><![CDATA[Ackintosh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[traitを使ってObserverパターンを書いてみました。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/09/16/sample-of-observer-pattern-using-php5-dot-4/"/>
    <updated>2012-09-16T16:43:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/09/16/sample-of-observer-pattern-using-php5-dot-4</id>
    <content type="html"><![CDATA[<p>php5.4の目玉機能の１つ、trait。<br/>
RubyのMix-in的なことができると噂は聞いていたのですが、今までなんとなくスルーしてました・・・。</p>

<p>そんな中、phpカンファレンス2012に行ってモチベーションアップしてきたので勉強！<br/>
使い方はphpマニュアルにとても詳しく書いてあったので助かりました。感謝。<br/>
<a href="http://php.net/manual/ja/language.oop5.traits.php">http://php.net/manual/ja/language.oop5.traits.php</a></p>

<p>そんな学びたてホヤホヤのtraitを使ってObserverパターンを書いてみました。</p>

<!-- more -->


<p>埋め込んだコードが表示されない方はこちら<br/>
<a href="https://gist.github.com/3731335">https://gist.github.com/3731335</a></p>

<script src="https://gist.github.com/3731335.js"> </script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdownをプレビュー → Evernoteに保存できるサービスを作りました。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/09/02/md2note/"/>
    <updated>2012-09-02T16:58:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/09/02/md2note</id>
    <content type="html"><![CDATA[<p>最近はブログ記事とかをMarkdown記法で書いてる人も多いのではないでしょうか。<br/>
ブログのネタをEvernoteにメモしてる人も多いのではないでしょうか。</p>

<!-- more -->


<hr />

<p>Markdownをプレビューしながら書いてそのままEvernoteに保存できるサービスを作ってみました。<br/>
(RubyとRailsの勉強を兼ねて φ(..))<br/>
上記に当てはまる方は是非使ってみてください。</p>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/20120902/md2note_small.png" alt="md2note" /></p>

<p><em>Md2Note</em></p>

<p><a href="http://md2note.herokuapp.com/">http://md2note.herokuapp.com/</a></p>

<p>Evernoteにログインすると、ノート一覧がでますので<br/>
保存先のノートを選択してください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HerokuのWebサーバーをUnicornに変更する]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/28/using-the-unicorn-in-heroku/"/>
    <updated>2012-08-28T01:34:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/28/using-the-unicorn-in-heroku</id>
    <content type="html"><![CDATA[<p>最近PHPネタばかりだったので、頑張ってRailsについて書いてみます。<br/>
RailsではデフォルトでWEBrickが起動しますが、低速なので本番運用には向かないとされています。</p>

<p><a href="http://www.amazon.co.jp/WEB-DB-PRESS-Vol-70-%E6%88%90%E7%94%B0/dp/4774151904">WEB+DB PRESS Vol.70</a><br/>
<img src="https://dl.dropbox.com/u/22083548/octopress/20120827/webdb_vol70.jpeg" alt="WEB+DB PRESS Vol.70" /><br/>
WEB+DB PRESS vol.70でRails高速化としてUnicornが紹介されています。<br/>
普段Railsで開発するときはherokuを使っているので<br/>
herokuでUnicornを使ってみたいと思います。</p>

<!-- more -->


<h2>heroku ps を確認</h2>

<p>まずはherokuで現在使われているWebサーバーを確認します。</p>

<pre><code>$ heroku ps
</code></pre>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/20120827/heroku_ps_thin.png" alt="heroku_ps" /></p>

<p>herokuのデフォルトはthinなのでしょうか？？<br/>
以下、Unicornのインストールを進めていきます。</p>

<h2>Gemfileに追加</h2>

<pre><code>gem 'unicorn'
</code></pre>

<h2>config/unicorn.rbを作成</h2>

<p>とりあえず設定内容は下記にしました。<br/>
詳しいことは勉強中です。すみません。</p>

<pre><code>worker_processes 2
timeout 20
preload_app false
stdout_path "log/unicorn-out.log"
stderr_path "log/unicorn-err.log"
</code></pre>

<h2>Procfileを作成</h2>

<p>Railsのルートディレクトリ直下にProcfileを作成します。</p>

<pre><code>web: bundle exec unicorn -p $PORT -c ./config/unicorn.rb  
</code></pre>

<h2>herokuにpush</h2>

<p>いつものようにherokuにpushします。</p>

<pre><code>$ git push heroku master
</code></pre>

<h2>heroku ps で確認</h2>

<pre><code>$ heroku ps
</code></pre>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/20120827/heroku_ps_unicorn.png" alt="heroku_ps_unicorn" /></p>

<p>bundle exec unicorn …となっていれば成功です。<br/>
heroku psの出力の2行目が</p>

<pre><code>web.1: crashed for…
</code></pre>

<p>になっていたら設定を見なおしてみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQLでインデックスあり・なしの検索速度を比較してみました。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/26/compared-the-index-with-and-without/"/>
    <updated>2012-08-26T11:14:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/26/compared-the-index-with-and-without</id>
    <content type="html"><![CDATA[<p>usersとfavoritesが１対多になるようにして、
indexの設定あり・なしの2つのDBを用意して比較しました。<br/>
予め、<br/>
usersは 100,000件<br/>
favoritesに300,000件のレコードを用意しました。</p>

<!-- more -->


<h2>indexなし</h2>

<p>・テーブル作成</p>

<pre><code>create table users(
id int(11) not null primary key auto_increment,
name varchar(40) not null
) engine=innodb;

create table favorites(
user_id int(11) not null,
favorite_name varchar(40) not null
) engine=innodb;
</code></pre>

<p>・select<br/>
<img src="https://dl.dropbox.com/u/22083548/octopress/20120826/select_noindex.png" alt="select結果(indexなし)" /></p>

<p>・explain<br/>
<img src="https://dl.dropbox.com/u/22083548/octopress/20120826/explain_noindex.png" alt="explain(indexなし)" /></p>

<h2>indexあり</h2>

<p>・テーブル作成</p>

<pre><code>create table users(
id int(11) not null primary key auto_increment,
name varchar(40) not null
) engine=innodb;

create table favorites(
user_id int(11) not null,
favorite_name varchar(40) not null,
foreign key(user_id) references users(id)
) engine=innodb;
</code></pre>

<p>・select<br/>
<img src="https://dl.dropbox.com/u/22083548/octopress/20120826/select_index.png" alt="select結果(indexあり)" /></p>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/20120826/select_index_phpmyadmin.png" alt="select結果(phpmyadmin)" /></p>

<p>・explain
<img src="https://dl.dropbox.com/u/22083548/octopress/20120826/explain_index.png" alt="explain(indexあり)" /></p>

<h2>結果</h2>

<ul>
<li>indexなし<br/>
クエリ実行時間 0.38  秒</li>
<li>indexあり<br/>
クエリ実行時間 0.0005秒</li>
</ul>


<p>explainの結果から、indexがないと
テーブルのフルスキャンが発生してしまっていることがわかりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP5.4でメソッドから返る配列の扱いが便利になったようです。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/25/array-is-useful-in-php5-dot-4/"/>
    <updated>2012-08-25T16:16:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/25/array-is-useful-in-php5-dot-4</id>
    <content type="html"><![CDATA[<p>以前書いた、<a href="http://ackintosh.github.com/blog/2012/08/14/method-chain-is-useful-in-php5-dot-4/">PHP5.4でメソッドチェーンが便利になったようです。</a> の配列版みたいなものです。</p>

<p><em>もう知ってるよ！という方は、光よりも速く読み飛ばしてください。</em></p>

<!-- more -->


<h2>PHP5.3以前</h2>

<p>メソッドから返ってくる配列にアクセスする場合、PHP5.3以前では<br/>
わざわざ変数に入れる必要がありました。</p>

<pre><code>&lt;?php
$result_array = getSomethingArray();
echo $result_array[1];  
</code></pre>

<p>特定の要素だけが欲しい時はこれがストレスになってしょうがないです。</p>

<h2>PHP5.4</h2>

<p>関数やメソッドの実行に続けてブラケットで要素を指定できるようになりました！</p>

<pre><code>&lt;?php
function hogefuga()
{
    return array('ho', 'ge', 'fu', 'ga');
}
echo hogefuga()[1];// 'ge'

$str = "ho,ge,fu,ga";
echo explode(",", $str)[2];// 'fu'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP5.4でメソッドチェーンが便利になったようです。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/14/method-chain-is-useful-in-php5-dot-4/"/>
    <updated>2012-08-14T01:39:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/14/method-chain-is-useful-in-php5-dot-4</id>
    <content type="html"><![CDATA[<h2>PHP5.0〜5.3</h2>

<p>インスタンス生成から直接メソッドチェーンを実行するために、Creation Methodを定義する必要がありました。<br/>
面倒ですよね(；´∀｀)</p>

<!-- more -->


<pre><code>Hoge::create('Hello')-&gt;fuga();

class Hoge
{
    private $message;

    private function __construct($message)
    {
        $this-&gt;message = $message;
    }

    public static function create($message)
    {
        return new self($message);
    }

    public function fuga()
    {
        echo $this-&gt;message;
    }
}
</code></pre>

<h2>PHP5.4〜</h2>

<p>Creation Method を定義せず、コンストラクタから直接メソッドチェーンが実行できます。</p>

<pre><code>(new Hoge('Hello'))-&gt;fuga();

class Hoge
{
    private $message;

    public function __construct($message)
    {
        $this-&gt;message = $message;
    }

    public function fuga()
    {
        echo $this-&gt;message;
    }
}
</code></pre>

<h2>MacへのPHP5.4インストールでこちらを参考にさせていただきました</h2>

<p><a href="http://www.1x1.jp/blog/2012/05/php_54_for_mac_os_x_as_binary_package.html">Macで一番簡単にPHP5.4をインストールする方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TravisCIを使ってみました。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/12/using-travis-ci/"/>
    <updated>2012-08-12T15:03:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/12/using-travis-ci</id>
    <content type="html"><![CDATA[<p>先日githubで、<a href="https://github.com/ackintosh/Anote">Anote(アノート)</a>というPHPフレームワークを公開しました。<br/>
一応テストコードっぽいのも書いたので、CIをやってみようと思っていたところ辿り着いたのがTravisCIです。</p>

<p><strong>Travis CI</strong><br/>
<a href="http://travis-ci.org/">http://travis-ci.org/</a></p>

<p>クラウド版Jenkinsみたいな感じでしょうか？？</p>

<!-- more -->


<h2>githubと連携する</h2>

<h3>githubリポジトリのルートに.travis.ymlを作成</h3>

<p>自分はこんな風に書きました。</p>

<pre><code>language: php
php:
  - 5.3
script: sh testrunner.sh
</code></pre>

<p>script行を省略すれば、デフォルトでphpunitを実行してくれるみたいです。<br/>
僕はわけあって、シェルスクリプトの中で実行しています・・・。</p>

<h3>Travisにサインアップ</h3>

<p>githubアカウントでサインアップすると、マイページのReposに自分のリポジトリが表示されます。</p>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/howto_travis-1.png" alt="TravisCI Repos" /></p>

<p>右側のスイッチをONにするだけで連携されます。</p>

<h2>コードカバレッジを表示する</h2>

<p>.travis.yml</p>

<pre><code>language: php
php:
  - 5.3
script: phpunit --coverage-text
</code></pre>

<p>phpunit のオプションを指定するとコードカバレッジが表示されます。<br/>
<img src="https://dl.dropbox.com/u/22083548/octopress/howto_travis-2.png" alt="TravisCIコードカバレッジ" /></p>

<h2>参考にさせていただきました</h2>

<p><a href="http://project-p.jp/halt/?p=1718">Travis CIを使ってPHP-5.2, 5.3, 5.4でテストを実行しコードカバレッジを表示する</a></p>

<p><a href="http://blog.yuyat.jp/archives/1540">Travis CI で PHP 5.4 も CI する, PHPUnit も Behat もやる</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPでWebアプリフレームワーク作ってみました。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/12/developed-php-framework/"/>
    <updated>2012-08-12T11:03:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/12/developed-php-framework</id>
    <content type="html"><![CDATA[<p>Anote(アノート)という名前にしました。</p>

<p><a href="https://github.com/ackintosh/Anote">https://github.com/ackintosh/Anote</a></p>

<p>アノテーションを使って何かやりたいと思ったのと、フレームワークの習作を兼ねて作りはじめました。</p>

<p>まだまだお粗末な実装なので(；´∀｀)ガンガンforkしてください(・∀・)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MAMPでPHPUnitを使う]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/04/using-phpunit-with-mamp/"/>
    <updated>2012-08-04T16:39:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/04/using-phpunit-with-mamp</id>
    <content type="html"><![CDATA[<p>既にMAMPにインストールされている。</p>

<pre><code>$ /Applications/MAMP/bin/php/php5.3.6/bin/phpunit --version
PHPUnit 3.6.10 by Sebastian Bergmann.  
</code></pre>

<p>下記のようにインクルードして使う。</p>

<pre><code>require_once('PHPUnit/Autoload.php');
class HogeTest extends PHPUnit_Framework_TestCase
{
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacにphpDocumentorをインストール]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/28/install-phpdocumentor/"/>
    <updated>2012-07-28T18:02:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/28/install-phpdocumentor</id>
    <content type="html"><![CDATA[<h2>phpDocumentor</h2>

<p><a href="http://www.phpdoc.org/">http://www.phpdoc.org/</a></p>

<p>現時点では、php5.3.3以上が必須。</p>

<!-- more -->


<h2>インストール</h2>

<pre><code>$ php -v
PHP 5.3.10 with Suhosin-Patch (cli) (built: Feb 20 2012 22:55:53) 
</code></pre>

<p>githubからダウンロード<br/>
<a href="https://github.com/phpDocumentor/phpDocumentor2">phpDocumentor / phpDocumentor2</a></p>

<p>解凍したファイル群中のREADME.mdを参考にインストールする。</p>

<h3>pearを使う方法が推奨されているようだが、今回は手動でインストール。</h3>

<pre><code>$ sudo php ./installer.php
</code></pre>

<p>※ここで、php.iniの設定が必要との警告が表示された</p>

<pre><code>The detect_unicode setting must be disabled.
Add the following to the end of your `php.ini`:
detect_unicode = Off  
</code></pre>

<h3>macのphp.iniを編集</h3>

<pre><code>$ sudo cp /etc/php.ini.default /etc/php.ini
$ sudo vi /etc/php.ini
detect_unicode = Off
date.timezone = Asia/Tokyo  
</code></pre>

<h3>installer再実行</h3>

<pre><code>$ sudo php ./installer.php
&gt; Thank you for installing phpDocumentor.
&gt; You can run it using the command `php /{phpDocumentorの設置path}/bin/phpdoc.php`
</code></pre>

<h3>シンボリックリンク作成</h3>

<pre><code>$ sudo ln -s /{phpDocumentorの設置path}/bin/phpdoc.php /usr/bin/phpdoc
</code></pre>

<h2>phpDocumentor実行</h2>

<pre><code>$ phpdoc run -d {対象ソースディレクトリ} -t {保存先ディレクトリ}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP5.3以降、mysql拡張モジュールは非推奨]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/27/deprecated-php-mysql-extension/"/>
    <updated>2012-07-27T19:37:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/27/deprecated-php-mysql-extension</id>
    <content type="html"><![CDATA[<h2>代替として、mysqli拡張モジュールやPDO(PHP Data Object)ドライバが用意されている。</h2>

<ul>
<li><p>mysqli拡張モジュール<br/>
<a href="http://php.net/manual/ja/book.mysqli.php">http://php.net/manual/ja/book.mysqli.php</a></p></li>
<li><p>PDO_MYSQL<br/>
<a href="http://www.php.net/manual/ja/ref.pdo-mysql.php">http://www.php.net/manual/ja/ref.pdo-mysql.php</a></p></li>
</ul>


<p>古いmysql関数も含めた3つの機能の比較表がありました。
<a href="http://www.php.net/manual/ja/mysqlinfo.api.choosing.php">http://www.php.net/manual/ja/mysqlinfo.api.choosing.php</a></p>

<p>新しいモジュールでは、
* OOPインターフェース
* プリペアドステートメント
* ストアドプロシージャ
* トランザクション<br/>
をAPIレベルでサポートしている。</p>

<h2>オブジェクト指向型が使えるのでラッパークラスを定義できる</h2>

<p><a href="http://php.net/manual/ja/mysqli.real-connect.php">http://php.net/manual/ja/mysqli.real-connect.php</a></p>

<pre><code>class OriginalMysqli extends mysqli
{
    …
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBoxのCentOSにJenkinsをインストール]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/22/install-jenkins-to-centos/"/>
    <updated>2012-07-22T20:53:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/22/install-jenkins-to-centos</id>
    <content type="html"><![CDATA[<h2>VirtualBoxの設定</h2>

<ul>
<li>ホストOS〜ゲストOS間で通信できる</li>
<li>ゲストOS〜外部で通信できる</li>
</ul>


<p>上記を満たすためのVirtualBox設定をする。<br/>
設定→ネットワーク<br/>
→アダプタ１　割り当て→「ブリッジアダプタ」<br/>
→アダプタ２　割り当て→「NAT」</p>

<!-- more -->


<h2>CentOSの設定</h2>

<p>デフォルトではiptablesが設定されていて、ホストOSからSSHやHTTP接続等ができないので変更。<br/>
iptables設定用スクリプトを用意して実行する。</p>

<pre><code># vi iptables.sh
#!/bin/sh

IPTABLES=/sbin/iptables

# ルールの初期化
$IPTABLES -F

# ポリシーの設定
$IPTABLES -P INPUT DROP
$IPTABLES -P OUTPUT ACCEPT
$IPTABLES -P FORWARD DROP

# ループバックアドレス
$IPTABLES -A INPUT -i lo -j ACCEPT

# 接続済みを許可
$IPTABLES -A INPUT -m state --state  ESTABLISHED,RELATED -j ACCEPT

# ping を許可(1req/sのみ許可)
$IPTABLES -A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/s -j ACCEPT

# 公開サービス
$IPTABLES -A INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT # SSH
$IPTABLES -A INPUT -p tcp --dport 25 -m state --state NEW -j ACCEPT # SMTP
$IPTABLES -A INPUT -p tcp --dport 80 -m state --state NEW -j ACCEPT # HTTP
$IPTABLES -A INPUT -p tcp --dport 443 -m state --state NEW -j ACCEPT # HTTPS

# chmod 744 iptables.sh
# ./iptables.sh
# iptables -L (設定確認)
# service iptables save
# service iptables restart
</code></pre>

<h2>Jenkinsインストール</h2>

<h3>OpenJDKインストール</h3>

<pre><code># yum install java-1.6.0-openjdk
</code></pre>

<h3>公開鍵インポート</h3>

<pre><code># wget /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
# rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
</code></pre>

<h3>Jenkinsインストール</h3>

<pre><code># yum install jenkins
</code></pre>

<h3>Jenkinsのデーモン起動</h3>

<pre><code># /sbin/service jenkins start
</code></pre>

<h2>起動確認</h2>

<pre><code>http://localhost:8080
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL(InnoDB)でバルクinsertのベンチマークとってみました]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/18/benchmark-of-bulk-insert/"/>
    <updated>2012-07-18T00:33:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/18/benchmark-of-bulk-insert</id>
    <content type="html"><![CDATA[<h2>テーブル作成</h2>

<pre><code>create table test (
id int(11) unsigned auto_increment primary key,
name varchar(255) not null,
created datetime not null
);
</code></pre>

<h2>通常のinsert文</h2>

<pre><code>insert into test (name, created) values ('name1', now());
insert into test (name, created) values ('name2', now());
・・・ 10,000回
</code></pre>

<p>結果<br/>
<em>6.39秒</em></p>

<h2>バルクinsert</h2>

<pre><code>insert into test (name, created) values ('name1', now()), ('name2', now()) ・・・
・・・10,000回
</code></pre>

<p>結果<br/>
<em>0.20秒</em></p>

<p>全然違う(・∀・)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 1.9ではString#to_aは使えない]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/17/cant-use-string-number-to-a-in-ruby-1-dot-9/"/>
    <updated>2012-07-17T00:08:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/17/cant-use-string-number-to-a-in-ruby-1-dot-9</id>
    <content type="html"><![CDATA[<pre><code>"hoge".to_a
 undefined method `to_a' for "the":String (NoMethodError)
</code></pre>

<p>参考URL</p>

<p><a href="http://d.hatena.ne.jp/modka/20110210/1297322853">Ruby1.9ではStringはEnumerableではない</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyで日本語を扱う]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/14/use-japanese-in-ruby/"/>
    <updated>2012-07-14T17:30:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/14/use-japanese-in-ruby</id>
    <content type="html"><![CDATA[<p>Ruby1.9以降では</p>

<pre><code># encoding : 文字コード
</code></pre>

<p>をスクリプトの１行目に書いて文字コードを指定する。</p>

<p>実際のファイルの文字コードと一致していなければならない。</p>

<pre><code># encoding : utf-8
# encoding : shift_jis
# encoding : euc-jp
</code></pre>

<p>shift_jisだけアンダースコア…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressに静的HTMLファイルを設置する]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/14/put-html-file-to-octopress/"/>
    <updated>2012-07-14T09:18:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/14/put-html-file-to-octopress</id>
    <content type="html"><![CDATA[<p>構築したブログをGoogleウェブマスターツールに登録する時などに、
静的なHTMLファイルを設置したい時があります。</p>

<p>その場合は、sourceディレクトリ下にHTMLを置いて</p>

<pre><code>$ rake gen_deploy
</code></pre>

<p>するとデプロイされます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown記法のパーサー　markdown-jsを使う]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/10/use-the-markdown-js/"/>
    <updated>2012-07-10T22:38:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/10/use-the-markdown-js</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropbox.com/u/22083548/octopress/markdown-to-html.jpeg" alt="markdown2HTML" /></p>

<p>最近githubやOctopressを使うようになってきたので、markdownをしっかり覚えたい今日この頃です。<br/>
ふと、Javascriptでmarkdown→HTMLに変換してくれるのはないかなと気になったので
今回markdown-jsというのを使ってみました。</p>

<p><strong>markdown-js</strong><br/>
<a href="https://github.com/evilstreak/markdown-js">https://github.com/evilstreak/markdown-js</a></p>

<h2>例</h2>

<pre><code>var md = "#markdown";
console.dir(window.markdown.toHTML(md));
</code></pre>

<h2>リアルタイムにmarkdown→HTMLに変換してみる</h2>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;markdown 2 html&lt;/title&gt;
    &lt;script type="text/javascript" src="./lib/markdown.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;textarea id="markdown"&gt;&lt;/textarea&gt;
    &lt;div id="html"&gt;&lt;/div&gt;
    &lt;script type="text/javascript"&gt;
        $('#markdown').keyup(function (e){
        $('#html').html(window.markdown.toHTML($('#markdown').val()));
        });
    &lt;/script&gt;
&lt;/body&gt;
</code></pre>

<p></html></p>

<h2>参考URL</h2>

<p>にのせき日記　<a href="http://d.hatena.ne.jp/ninoseki/20110620/1308574793">Javascript製Markdown記法パーサー、markdown-js</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Herokuでアプリを作る]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/09/make-an-app-in-heroku/"/>
    <updated>2012-07-09T23:04:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/09/make-an-app-in-heroku</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropbox.com/u/22083548/octopress/heroku.jpeg" alt="heroku" /></p>

<p><strong>Heroku</strong><br/>
<a href="http://www.heroku.com/">http://www.heroku.com/</a></p>

<p>ユーザー登録後、Herokuのgemをインストールする。</p>

<!-- more -->


<pre><code>$ gem install heroku
</code></pre>

<p>herokuの利用に必要なコマンドがインストールされる。</p>

<h2>作成したアプリ一覧を確認</h2>

<pre><code>$ heroku list
</code></pre>

<h2>新規Railsアプリを作成</h2>

<pre><code>$ rails new newApp
</code></pre>

<h2>アプリの起動確認</h2>

<pre><code>$ cd newApp
$ rails s
</code></pre>

<h2>git初期化</h2>

<pre><code>$ git init
$ git add .
$ git commit -m "initialize"
</code></pre>

<h2>Herokuで動かす</h2>

<pre><code>$ heroku create appname
</code></pre>

<p><a href="http://ppworks.hatenablog.jp/entry/2012/03/04/141951">macを買って、今すぐherokuでruby1.9.3 + rails3.2しよう！</a> から引用させていただきます。<br/>
必要最低限のgemを記述。</p>

<pre><code>$ curl https://raw.github.com/gist/1970532/376b6a26ed936ac43cad0b17a64512f5c0216a50/Gemifile &gt; Gemfile
$ rm -f Gemfile.lock
$ bundle install --without production
$ git add -A
$ git commit -m 'Update Gemfile'
</code></pre>

<p>中身はこんな感じ。<br/>
herokuでは、PostgreSQL使うので、pgを指定したり、developmentでしか使わないものはそこに移動とかです。</p>

<pre><code>source 'https://rubygems.org'

gem 'rails', '3.2.2'
gem 'jquery-rails'

group :assets do
  gem 'sass-rails',   '~&gt; 3.2.3'
  gem 'coffee-rails', '~&gt; 3.2.1'
  gem 'uglifier', '&gt;= 1.0.3'
end

group :test, :development do
  gem 'sqlite3'
  gem 'heroku'
end

group :production do
  gem 'pg'
  gem 'thin'
end
</code></pre>

<p>Herokuにデプロイ</p>

<pre><code>$ git push heroku master
$ heroku open
</code></pre>

<p>参考URL<br/>
<a href="http://ppworks.hatenablog.jp/entry/2012/03/04/141951">macを買って、今すぐherokuでruby1.9.3 + rails3.2しよう！</a><br/>
<a href="http://gihyo.jp/dev/serial/01/heroku/0002?page=2">Herokuで作るFacebookアプリ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressにコメント機能を追加する]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/08/add-comments-feature-to-octopress/"/>
    <updated>2012-07-08T14:46:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/08/add-comments-feature-to-octopress</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropbox.com/u/22083548/octopress/disqus.jpeg" alt="DISQUS" /></p>

<p>OctopressはデフォルトでDISQUSをサポートしているので、<br/>
DISQUSにサイトを登録して、_config.ymlに設定するだけでコメントを利用できる。</p>

<p><strong>DISQUS</strong><br/>
<a href="http://disqus.com/">http://disqus.com/</a></p>

<p>_config.ymlに、DISQUSで登録したshortnameを設定する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>disqus_short_name: your shortname</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rbenvを使う]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/08/use-rbenv/"/>
    <updated>2012-07-08T03:11:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/08/use-rbenv</id>
    <content type="html"><![CDATA[<h2>インストール可能な一覧</h2>

<p>$ rbenv install</p>

<h2>インストール</h2>

<p>$ rbenv install 1.9.2-p320</p>

<h2>インストールされているバージョンを確認</h2>

<p>$ rbenv versions</p>

<h2>通常使うバージョンを指定</h2>

<p>$ rbenv global 1.9.3-p194
$ rbenv rehash</p>

<h2>不要になったRubyを削除</h2>

<p>$ rbenv -rf .rbenv/versions/1.8.6-p420</p>

<h2>ディレクトリで使うrubyのバージョンを固定する</h2>

<p>$ rbenv local 1.9.2-p320
→ .rbenv-version ファイルが作られて、その中に選択したバージョンが書き込まれる</p>
]]></content>
  </entry>
  
</feed>
