<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[暁 [stfuawsc]]]></title>
  <link href="http://ackintosh.github.io/atom.xml" rel="self"/>
  <link href="http://ackintosh.github.io/"/>
  <updated>2014-02-01T17:47:59+09:00</updated>
  <id>http://ackintosh.github.io/</id>
  <author>
    <name><![CDATA[Ackintosh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[phpでバイナリ/テキストファイルの判定]]></title>
    <link href="http://ackintosh.github.io/blog/2014/02/01/is-binary-in-php/"/>
    <updated>2014-02-01T17:32:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2014/02/01/is-binary-in-php</id>
    <content type="html"><![CDATA[<p>拡張子での判定は、除外対象のメンテが必要になったりするので今回はボツです。</p>

<p>最良の方法か分かりませんが、ファイル内にnull文字が含まれる場合にバイナリファイルとして判定するようにしました。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nb">preg_match</span><span class="p">(</span><span class="s1">&#39;#\0#&#39;</span><span class="p">,</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$file</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$result</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s1">&#39;binary&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">elseif</span> <span class="p">(</span><span class="nv">$result</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s1">&#39;text&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>より良い方法がありましたらご教授ください m(＿ ＿)m</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Berkshelfを使ってMongoDBをインストール]]></title>
    <link href="http://ackintosh.github.io/blog/2013/12/01/installing-mongodb-with-berkshelf/"/>
    <updated>2013-12-01T17:25:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/12/01/installing-mongodb-with-berkshelf</id>
    <content type="html"><![CDATA[<p>メモ。<br/>
下記チュートリアル後にやる前提です。</p>

<p><a href="http://qiita.com/taiki45/items/b46a2f32248720ec2bae" target="_blank">
今っぽい Vagrant + Chef Solo チュートリアル</a></p>

<!-- more -->


<h3>Berksfile</h3>

<p>githubで公開されてるcookbookを使っています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cookbook 'mongodb', git:'git@github.com:edelight/chef-mongodb.git'</span></code></pre></td></tr></table></div></figure>


<h3>githubからcookbookと依存cookbookをインストール</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ berks --path=site-cookbooks</span></code></pre></td></tr></table></div></figure>


<h3>Vagrantfile</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.vm.provision :chef_solo do |chef|
</span><span class='line'>  chef.run_list = ["hello", "mongodb::10gen_repo", "mongodb"]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h3>仮想マシン起動</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant up</span></code></pre></td></tr></table></div></figure>


<h3>確認</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mongo --version</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クラス／関数宣言だけをインクルードできるライブラリを作りました]]></title>
    <link href="http://ackintosh.github.io/blog/2013/11/24/toumi/"/>
    <updated>2013-11-24T22:31:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/11/24/toumi</id>
    <content type="html"><![CDATA[<p>クラスや関数の宣言と諸々の処理がごちゃ混ぜに書かれてるスクリプトをメンテナンスする時、<br/>
リファクタリングするためにテストを書きたいけど、テストを書くためにはリファクタリングしないと…(＊_＊)　という状況ありませんか？</p>

<!-- more -->


<p>例えば</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;xxx.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">hoge</span><span class="p">(</span><span class="nv">$arg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;hoge&#39;</span> <span class="o">.</span> <span class="nv">$arg</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">somefunction</span><span class="p">(</span><span class="mi">1234</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">,</span> <span class="nx">hoge</span><span class="p">(</span><span class="s1">&#39;fuga&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;hoge.html&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">exit</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じのコードがあって、hoge()関数のテストを書きたい時<br/>
関数宣言の部分だけインクルードできれば、既存コードに一切手を入れずにテスト書き始められます。</p>

<p>ということで作りました。</p>

<p><a href="https://github.com/ackintosh/toumi" target="_blank">ackintosh / toumi</a></p>

<p>このライブラリを使って上記スクリプトをインクルードすれば、<br/>
下記のようにテストが書けます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">// Only function declaration is included.</span>
</span><span class='line'><span class="nx">Ackintosh_Toumi</span><span class="o">::</span><span class="na">load</span><span class="p">(</span><span class="s1">&#39;legacy.php&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">LegacyTest</span> <span class="k">extends</span> <span class="nx">PHPUnit_Framework_TestCase</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">test_hoge</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertSame</span><span class="p">(</span><span class="s1">&#39;hogefuga&#39;</span><span class="p">,</span> <span class="nx">hoge</span><span class="p">(</span><span class="s1">&#39;fuga&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>composerに対応してますが、PHP5.2等の環境も考慮して名前空間は使っていません。</p>

<p>そもそもこれを使わずに済めば良いんですが…(・_・;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyの制御構造は式]]></title>
    <link href="http://ackintosh.github.io/blog/2013/11/24/control-structures-in-ruby-is-expression/"/>
    <updated>2013-11-24T15:58:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/11/24/control-structures-in-ruby-is-expression</id>
    <content type="html"><![CDATA[<blockquote><p>Rubyでは(Cなどとは異なり)制御構造は式であって、何らかの値を返すものがあります</p></blockquote>

<p><a href="http://docs.ruby-lang.org/ja/2.0.0/doc/spec=2fcontrol.html" target="_blank">Ruby 2.0.0 リファレンスマニュアル > 制御構造</a></p>

<p>PHP脳な自分には最初ピンとこなかったのでメモ代わりに。</p>

<!-- more -->


<h3>if</h3>

<ul>
<li>Ruby</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mes</span> <span class="o">=</span> <span class="k">if</span> <span class="p">(</span><span class="kp">true</span><span class="p">)</span> <span class="k">then</span> <span class="s2">&quot;hoge&quot;</span> <span class="k">else</span> <span class="s2">&quot;fuga&quot;</span> <span class="k">end</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">mes</span>
</span><span class='line'><span class="c1"># hoge</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>PHP</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$mes</span> <span class="o">=</span> <span class="s1">&#39;hoge&#39;</span><span class="p">;</span> <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="nv">$mes</span> <span class="o">=</span> <span class="s1">&#39;fuga&#39;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$mes</span><span class="p">;</span>
</span><span class='line'><span class="c1">// hoge</span>
</span></code></pre></td></tr></table></div></figure>


<h3>case</h3>

<ul>
<li>Ruby</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">age</span> <span class="o">=</span> <span class="mi">29</span>
</span><span class='line'><span class="n">mes</span> <span class="o">=</span> <span class="k">case</span> <span class="n">age</span>
</span><span class='line'>      <span class="k">when</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span>
</span><span class='line'>        <span class="s2">&quot;child&quot;</span>
</span><span class='line'>      <span class="k">when</span> <span class="mi">10</span><span class="o">.</span><span class="n">.</span><span class="mi">19</span>
</span><span class='line'>        <span class="s2">&quot;teenager&quot;</span>
</span><span class='line'>      <span class="k">when</span> <span class="mi">20</span><span class="o">.</span><span class="n">.</span><span class="mi">29</span>
</span><span class='line'>        <span class="s2">&quot;adult&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="s2">&quot;other&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">mes</span>
</span><span class='line'><span class="c1"># adult</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>PHP</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$age</span> <span class="o">=</span> <span class="mi">29</span><span class="p">;</span>
</span><span class='line'><span class="k">switch</span> <span class="p">(</span><span class="nv">$age</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nb">in_array</span><span class="p">(</span><span class="nv">$age</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">))</span><span class="o">:</span>
</span><span class='line'>        <span class="nv">$mes</span> <span class="o">=</span> <span class="s1">&#39;child&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nb">in_array</span><span class="p">(</span><span class="nv">$age</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">19</span><span class="p">))</span><span class="o">:</span>
</span><span class='line'>        <span class="nv">$mes</span> <span class="o">=</span> <span class="s1">&#39;teenager&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="nb">in_array</span><span class="p">(</span><span class="nv">$age</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">29</span><span class="p">))</span><span class="o">:</span>
</span><span class='line'>        <span class="nv">$mes</span> <span class="o">=</span> <span class="s1">&#39;adult&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="nv">$mes</span> <span class="o">=</span> <span class="s1">&#39;other&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$mes</span><span class="p">;</span>
</span><span class='line'><span class="c1">// adult</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rubyの方がシュッとしてます。</p>

<p>caseについては下記が大変勉強になりました。<br/>
<a href="http://melborne.github.io/2013/02/25/i-wanna-say-something-about-rubys-case/" target="_blank">Rubyのcaseを〇〇(言語名)のswitch文だと思っている人たちにぼくから一言ガツンと申し上げたい</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[当たり前のことだけど自戒を込めて]]></title>
    <link href="http://ackintosh.github.io/blog/2013/11/23/a-matter-of-course/"/>
    <updated>2013-11-23T11:21:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/11/23/a-matter-of-course</id>
    <content type="html"><![CDATA[<p>当たり前のことだけど自戒を込めて。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;hoge&quot;</span> <span class="k">if</span> <span class="n">a?</span> <span class="o">||</span> <span class="n">b?</span>
</span></code></pre></td></tr></table></div></figure>


<p>if式の条件として、a? が先が良いのか、あるいは b? が先か。<br/>
ちゃんと考えて実装しなくちゃいけない。</p>

<!-- more -->


<p>例えば</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">a?</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c1"># 重い処理</span>
</span><span class='line'>  <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">b?</span>
</span><span class='line'>  <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>この場合は b? が先の方が良いですよね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[spika hackathonに参加しました]]></title>
    <link href="http://ackintosh.github.io/blog/2013/10/21/spika-hackathon/"/>
    <updated>2013-10-21T22:06:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/10/21/spika-hackathon</id>
    <content type="html"><![CDATA[<p>先日、<a href="http://connpass.com/event/3698/" target="_blank">spika hackathon</a>に参加してきました。</p>

<p><a href="http://spikaapp.com/ja/" target="_blank">Spika - world first opensource messenger for ios/android</a></p>

<p>今回のハッカソン関係者のみなさんもブログに書かれていますので、<br/>
Spikaについてとか、ハッカソン開催の経緯や技術的なことについてはこちらを見てください。</p>

<p><a href="http://cloverstudioceo.hatenablog.com/entry/2013/10/21/033700" target="_blank">Spikaを公開して起こった事 - ヨーロッパで働く社長のブログ</a></p>

<p><a href="http://kuzuha.hatenablog.com/entry/2013/10/21/214116" target="_blank">spika hackathon というのをやった - id:k-z-h</a></p>

<p><a href="http://blog.yuyat.jp/" target="_blank">Spika Hackathon に参加してきた - Born Too Late</a></p>

<p>要するに↑を見れば全てわかるので<br/>
この記事に意味はありません。</p>

<!-- more -->


<h3>動機</h3>

<p>この記事を見ている方はご存知だと思いますが、Spikaはコードの品質の低さで話題になりました。<br/>
で、自分もSpikaのコードを見て同じような印象を持ったのですが、</p>

<p><em>これなら、自分みたいにショボいプログラマでも何かできるんじゃないか…！？</em></p>

<p>と思ったのがハッカソンに参加した動機です。<br/>
（貢献したいというよりは、自分の経験値を上げたいという）</p>

<p>趣味で一人でgithub使っててもつまらないし<br/>
ソーシャルコーディングとかプルリクエストとか楽しそうだし<br/>
なんかカッコイイなぁ、自分も参加したいなぁと思いながらリポジトリを見渡しても<br/>
何か難しそうだし、英語ばっかりだし(当たり前か…)って感じで悶々とする日々が続いてました。</p>

<p>なんていうか、高速道路の中央分離帯に立っているような感じで、<br/>
流れに入りたいけど何も出来ない…みたいな(?)。<br/>
なので、それを打破するチャンスかなと思ったので参加しました。</p>

<h3>やったこと</h3>

<p><em>二人の素晴らしいhackerの隣で黙々とテスト書いてました。</em></p>

<p>テストを書こうと最初から決めていたのですが、<br/>
ハッカソン直前にオーナーがSilexで書きなおしてたので、</p>

<p>やばい！Silex触ったこと無い！</p>

<p>と、かなり焦りましたがなんとかなりました。<br/>
むしろテスト書きやすかったです。WebTestCaseっていうのがあったので使いました、素晴らしいですね。<br/>
正直、ハッカソンに参加するまでプルリクエスト3回位しかやったことなかったので<br/>
リポジトリの扱いでわからないことがあって参加者の皆さんにご迷惑をかけてしまいました。</p>

<p>developブランチでSilexで書きなおしてたのに<br/>
自分が間違ってmasterブランチにプルリクエストしてしてしまったり。<br/>
（そしてそれがmergeされてしまったり）<br/>
再度謝罪いたしますm(<em> </em>)m</p>

<h3>まとめ</h3>

<p>やっぱり自分が書いたコードがmergeされた時はちょっとした感動がありました。<br/>
（ハッカソンでは一切表に出しませんでしたが、密かに感動してました）</p>

<p>あと、自分みたいに高速道路の中央分離帯に立っている人って意外といるんじゃないかなぁと思いますので<br/>
そういう人は、エイッと飛び込んでみると良いかもしれません。
自分も引き続きがんばります。</p>

<p>それと、自分は群馬在住なので1日目は都内のカプセルホテルに泊まりました。</p>

<p><a href="http://travel.rakuten.co.jp/HOTEL/104580/">カプセルランド　湯島 【楽天トラベル】</a></p>

<p>当日予約ができてサウナあり、無料モーニングパンサービスありで<br/>
値段の割には良いと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ラッパーオブジェクトを使ってテスタビリティを上げる〜WordPressプラグイン]]></title>
    <link href="http://ackintosh.github.io/blog/2013/10/20/wrapper-object/"/>
    <updated>2013-10-20T04:02:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/10/20/wrapper-object</id>
    <content type="html"><![CDATA[<p><a href="http://ackintosh.github.io/blog/2013/10/18/php-testability/">前回</a>、グローバル関数への依存について書いたので
その流れでWordPressプラグインのテストについて。</p>

<!-- more -->


<p>投稿やコメント等を取得するためにWordPressが用意してる関数は
グローバル関数がほとんどです。</p>

<p>なので、テーマのカスタマイズやらプラグインを作る時に
テスタビリティを意識しないとグローバル関数に依存しまくったコードになっちゃいます。</p>

<p>例えば、下記は新着投稿を表示するプラグインなんかでよくあるコードだと思います。</p>

<script src="https://gist.github.com/ackintosh/7060084.js?file=1.php"></script>


<p>これをテストコードで保護するには最低限下記パターンが必要です。</p>

<ul>
<li>get_postsの戻り値が配列でなければ(新着投稿がなければ)、nullを返す</li>
<li>get_postsの戻り値が配列であれば(新着投稿があれば)、その後の処理をして値を返す</li>
</ul>


<p>ですがグローバル関数に依存していると、これを実現するのは難しい。</p>

<p>そこで、関数のラッパーオブジェクト(Proxy)を使います。</p>

<script src="https://gist.github.com/ackintosh/7060084.js?file=2.php"></script>


<p>FooクラスはコンストラクタでFooProxyクラスを受け取っていて、
FooProxyクラスはグローバル関数に処理を委譲しているだけです。</p>

<p>で、テストコードではFooProxyクラスをモックに差し替えればOKです。
例えば</p>

<blockquote><p>・get_postsの戻り値が配列でなければ(新着投稿がなければ)、nullを返す</p></blockquote>

<p>のパターンのテストコードは下記のようになります。</p>

<script src="https://gist.github.com/ackintosh/7060084.js?file=3.php"></script>


<p>同様にして他パターンもテストできます。</p>

<p>これで、モックによってget_postsが返す値を明示することで
Foo::bar() の振る舞いを網羅的にテストできるようになりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[グローバル関数への依存を排除してテスタビリティを上げる]]></title>
    <link href="http://ackintosh.github.io/blog/2013/10/18/php-testability/"/>
    <updated>2013-10-18T00:14:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/10/18/php-testability</id>
    <content type="html"><![CDATA[<p>テストしにくい状況って色々な原因があると思いますが、
今回はグローバル関数への依存について。</p>

<!-- more -->


<p>例えば下記のコードでは receiveDataメソッドの中でmail関数を呼び出しているので
テストしにくくなっています。
（テストは書けるけどテスト走らせる度にメールが飛ぶのはアレですね）</p>

<script src="https://gist.github.com/ackintosh/7026140.js?file=1.php"></script>


<p><a href="http://www.amazon.co.jp/%E3%83%AC%E3%82%AC%E3%82%B7%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89%E6%94%B9%E5%96%84%E3%82%AC%E3%82%A4%E3%83%89-Object-Oriented-SELECTION-%E3%83%9E%E3%82%A4%E3%82%B1%E3%83%AB%E3%83%BBC%E3%83%BB%E3%83%95%E3%82%A7%E3%82%B6%E3%83%BC%E3%82%BA/dp/4798116831" target="_blank">レガシーコード改善ガイド</a>では
グローバル関数の部分をインスタンスメソッドにして、処理をグローバル関数にまるっと委譲することで、接合部を作る方法が紹介されています。
例えばこんな感じでしょうか。</p>

<script src="https://gist.github.com/ackintosh/7026140.js?file=2.php"></script>


<p>接合部となったメソッドをサブクラスでオーバーライドしてテストしてます。</p>

<p>ただ、わざわざサブクラスを定義するのも面倒な気もするし
もう少しカジュアルな方法がないかなということで</p>

<script src="https://gist.github.com/ackintosh/7026140.js?file=3.php"></script>


<p>テストのためにややプロダクションコードが増えますがメソッドの差し替えができるようになりました。</p>

<p>ちなみに、無名関数の中でアサーションが書けるのでmail関数が受け取る引数をアサートすることもできます。</p>

<p>こんな感じです。</p>

<script src="https://gist.github.com/ackintosh/7026140.js?file=4.php"></script>


<p>こちらにもっと良い方法が解説されてます。<br/>
<a href="http://phpmentors.jp/post/46982737824" target="_blank">PHPメンターズ -&gt; 時計オブジェクト（ドメインクロック）を導入してテスト容易性と意図性を高める</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[PHP5.4]PDOのhostにlocalhostを指定するとエラー]]></title>
    <link href="http://ackintosh.github.io/blog/2013/08/26/pdo-error-php5-dot-4/"/>
    <updated>2013-08-26T00:21:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/08/26/pdo-error-php5-dot-4</id>
    <content type="html"><![CDATA[<p>手元の環境でエラーになっただけで、他の環境は未検証です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php -v
</span><span class='line'>PHP 5.4.5 (cli) (built: Jul 21 2012 11:09:19)</span></code></pre></td></tr></table></div></figure>




<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$pdo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="s1">&#39;mysql:dbname=active_record;host=localhost&#39;</span><span class="p">,</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;root&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">PDOException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">die</span><span class="p">(</span><span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// SQLSTATE[HY000] [2002] No such file or directory</span>
</span></code></pre></td></tr></table></div></figure>


<p>hostをIPアドレスで指定したらでなくなりました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$pdo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="s1">&#39;mysql:dbname=active_record;host=127.0.0.1&#39;</span><span class="p">,</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span> <span class="s1">&#39;root&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[遅延静的束縛は何が嬉しいのか]]></title>
    <link href="http://ackintosh.github.io/blog/2013/08/25/late-static-binding/"/>
    <updated>2013-08-25T15:31:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/08/25/late-static-binding</id>
    <content type="html"><![CDATA[<p>名前は見かけていたものの、いまいち理解していなかった。</p>

<p><a href="http://php.net/manual/ja/language.oop5.late-static-bindings.php" target="_blank">PHP: 遅延静的束縛 (Late Static Bindings) - Manual</a></p>

<!-- more -->


<blockquote><p>PHP 5.3.0 以降、PHP に遅延静的束縛と呼ばれる機能が搭載されます。 これを使用すると、静的継承のコンテキストで呼び出し元のクラスを参照できるようになります。</p>

<p>より正確に言うと、遅延静的束縛は直近の &#8220;非転送コール&#8221; のクラス名を保存します。 静的メソッドの場合、これは明示的に指定されたクラス (通常は :: 演算子の左側に書かれたもの) となります。静的メソッド以外の場合は、そのオブジェクトのクラスとなります。 &#8220;転送コール&#8221; とは、self:: や parent::、static:: による静的なコール、 あるいはクラス階層の中での forward_static_call() によるコールのことです。 get_called_class() 関数を使うとコール元のクラス名を文字列で取得できます。 static:: はこのクラスのスコープとなります。</p></blockquote>

<h2>遅延静的束縛が無いと困るとき</h2>

<script src="https://gist.github.com/ackintosh/6332540.js?file=1.php"></script>


<p>1,400,000が出力されるかと思いきや、0でした。<br/>
・・・期待していたのと違う。</p>

<h3>selfについて</h3>

<p>PHP Manualにはこう書かれています。</p>

<blockquote><p>self:: あるいは <strong>CLASS</strong> による現在のクラスへの静的参照は、 そのメソッドが属するクラス (つまり、 そのメソッドが定義されているクラス) に解決されます。</p></blockquote>

<p>つまり上記のコードでいうと、getFormattedPriceメソッドはCarクラスで定義されているので、<br/>
<code>self::$price</code> は常に <code>Car::$price</code> に解決されることになります。</p>

<p>これでは、いくらCarのサブクラスでgetFormattedPriceを呼び出しても価格の出力ができません。</p>

<h2>遅延静的束縛を使う</h2>

<p>selfの代わりにstaticを使います。</p>

<script src="https://gist.github.com/ackintosh/6332540.js?file=2.php"></script>


<p>これで期待した通りの結果になりました。</p>

<h3>staticについて</h3>

<p>PHP Manualより</p>

<blockquote><p>実行時に最初にコールされたクラスを参照するようにしています。</p></blockquote>

<p>これにより、<code>static::$price</code> が <code>NissanNote::$price</code> に解決されたことになります。</p>

<h3>もう少し深く</h3>

<p>ただ、「最初にコールされたクラスを参照する」というのは少し浅い説明かもしれません。
Manualには下記のようにも書かれています。</p>

<blockquote><p>より正確に言うと、遅延静的束縛は直近の &#8220;非転送コール&#8221; のクラス名を保存します。</p></blockquote>

<p>例えば、</p>

<script src="https://gist.github.com/ackintosh/6332540.js?file=3.php"></script>


<p>上記コードだと、staticキーワードが「 <em>最初にコールされたクラス</em> 」を参照しているならば<br/>
<code>NissanNote::getDescription();</code>メソッド呼び出しの結果、<code>static::$price</code> は <code>NissanNote::$price</code> に解決されるはずですが<br/>
実際には <code>Car::$price</code> に解決されています。</p>

<p>これは、「 <em>遅延静的束縛は直近の &#8220;非転送コール&#8221; のクラス名を保存する</em> 」と考えると理解できます。</p>

<p>つまり、static::$priceの直近の非転送コールは <code>Car::getFormattedPrice()</code> なので<br/>
<code>static::$price</code> は <code>Car::$price</code> に解決されたことになります。</p>

<p>非転送コールについては、下記リンクが大変参考になりました。</p>

<h2>参考にさせていただきました。</h2>

<p><a href="http://d.hatena.ne.jp/maeharin/20130202/php_late_static_bindings" target="_blank">PHPを愛する試み ～self:: parent:: static:: および遅延静的束縛～</a></p>

<p><a href="http://www.ibm.com/developerworks/jp/opensource/library/os-php-53static/" target="_blank">PHP V5.3 で遅延静的バインディングを使ったオブジェクト指向プログラミングを活用する</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ハイフンとアンダースコアの使い分け]]></title>
    <link href="http://ackintosh.github.io/blog/2013/08/11/hypen-under-score/"/>
    <updated>2013-08-11T14:32:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/08/11/hypen-under-score</id>
    <content type="html"><![CDATA[<p>ネーミングの時のハイフンとアンダースコアの使い分けが、自分の中で曖昧なところがあったのでメモ。</p>

<p>言語やフレームワークによって色々あるかもしれませんが、以下、Ruby(gem)の場合です。</p>

<!-- more -->


<h2>Eric Hodel氏の推奨するネーミングルール</h2>

<p>RubyGemsの作者、Eric Hodel氏は自身のブログで次のように推奨しています。</p>

<p><a href="http://blog.segment7.net/2010/11/15/how-to-name-gems" target="_blank">How to Name Gems</a></p>

<blockquote><p>Here is my <em>STRONG</em> recommendation on how to name gems:</p>

<h2>Use underscores</h2>

<p>・fancy_require<br>
・newrelic_rpm<br>
・ruby_parser<br>
This matches the file the user will require and makes it easier for the user to start using your gem. gem install my_gem will be loaded by require &#8216;my_gem&#8217;.</p>

<h2>Use dashes for extensions</h2>

<p>・net-http-persistent<br>
・rdoc-chm<br>
・autotest-growl<br>
If you&#8217;re adding functionality to another gem use a dash. The dash is different-enough from an underscore to be noticeable. If you tilt the dash a bit it becomes a slash as well, making it easier for the user to know what to require. gem install net-http-persistent becomes require &#8216;net/http/persistent&#8217;</p></blockquote>

<p>要するに</p>

<ul>
<li>ハイフン -> パスの区切り</li>
<li>アンダースコア -> 単語の区切り</li>
</ul>


<p>といったところでしょうか。</p>

<h2>試してみる</h2>

<h3>ハイフン区切り</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle gem ackintosh-tiny-progressbar</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Ackintosh</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Tiny</span>
</span><span class='line'>    <span class="k">module</span> <span class="nn">Progressbar</span>
</span><span class='line'>      <span class="c1"># Your code goes here ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>全て別のモジュールに分かれています。</p>

<h3>アンダースコア区切り</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="n">gem</span> <span class="n">ackintosh</span><span class="o">-</span><span class="n">tiny_progressbar</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Ackintosh</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">TinyProgressbar</span>
</span><span class='line'>    <span class="c1"># Your code goes here…</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>「tiny」と「progressbar」は別の単語ですが意味的には１つになっています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPで関数合成を書いてみる]]></title>
    <link href="http://ackintosh.github.io/blog/2013/08/05/compose-functions-in-php/"/>
    <updated>2013-08-05T20:20:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/08/05/compose-functions-in-php</id>
    <content type="html"><![CDATA[<p><a href="http://qiita.com/yuya_takeyama/items/858c5a0652441f54f0a8" target="_blank">PHP で関数合成 - Qiita [キータ]</a></p>

<p>こちらの投稿がとても興味深かったので、自分なりに書いてみました。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Compose</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">_</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$callables</span> <span class="o">=</span> <span class="nb">func_get_args</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nb">array_reduce</span><span class="p">(</span><span class="nv">$callables</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$a</span> <span class="o">===</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nb">call_user_func_array</span><span class="p">(</span><span class="nv">$b</span><span class="p">,</span> <span class="nb">func_get_args</span><span class="p">());</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$arg</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nb">call_user_func</span><span class="p">(</span><span class="nv">$b</span><span class="p">,</span> <span class="nv">$a</span><span class="p">(</span><span class="nv">$arg</span><span class="p">));</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$mapUcfirst</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">array_map</span><span class="p">(</span><span class="s1">&#39;ucfirst&#39;</span><span class="p">,</span> <span class="nv">$arg</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$splitWithUnderscore</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">explode</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">,</span> <span class="nv">$arg</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$camelize</span> <span class="o">=</span> <span class="nx">Compose</span><span class="o">::</span><span class="na">_</span><span class="p">(</span><span class="nv">$splitWithUnderscore</span><span class="p">,</span> <span class="nv">$mapUcfirst</span><span class="p">,</span> <span class="s1">&#39;join&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$camelize</span><span class="p">(</span><span class="s1">&#39;man_with_a_mission&#39;</span><span class="p">));</span>
</span><span class='line'><span class="c1">// ManWithAMission</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pryでデバッグ]]></title>
    <link href="http://ackintosh.github.io/blog/2013/07/03/pry/"/>
    <updated>2013-07-03T20:54:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/07/03/pry</id>
    <content type="html"><![CDATA[<p>いいかげんプリントデバッグは疲れるのでpryを使ってみます。</p>

<p><a href="https://github.com/pry/pry" target="_blank">https://github.com/pry/pry</a></p>

<p>φ(..)メモメモ</p>

<!-- more -->


<h2>pry</h2>

<h3>インストール</h3>

<script src="https://gist.github.com/ackintosh/5917386.js?file=install.sh"></script>


<h3>デバッグ</h3>

<p><code>binding.pry</code> でREPLが起動する。</p>

<script src="https://gist.github.com/ackintosh/5917386.js?file=debug.rb"></script>


<h2>pry-nav</h2>

<p>pry-navというgemを入れるとステップ実行ができる。</p>

<script src="https://gist.github.com/ackintosh/5917386.js?file=install_nav.sh"></script>


<p>下記のように<code>~/.pryrc</code>にエイリアスを設定しておくと便利。</p>

<script src="https://gist.github.com/ackintosh/5917386.js?file=.pryrc"></script>


<h2>参考URL</h2>

<ul>
<li><a href="http://blog.ainam.me/2012/03/20/summary-of-pry-plugins/" target="_blank">http://blog.ainam.me/2012/03/20/summary-of-pry-plugins/</a></li>
<li><a href="http://shirusu-ni-tarazu.hatenablog.jp/entry/2012/06/24/051114" target="_blank">http://shirusu-ni-tarazu.hatenablog.jp/entry/2012/06/24/051114</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DateTimeクラス等に依存したクラスをテストする]]></title>
    <link href="http://ackintosh.github.io/blog/2013/06/11/testing-the-object-that-depend-to-datetime/"/>
    <updated>2013-06-11T22:29:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/06/11/testing-the-object-that-depend-to-datetime</id>
    <content type="html"><![CDATA[<p>DateTimeクラス等に依存したクラスをテストするのは難しい。</p>

<p>オブジェクトが生成された日時を正確に知らないといけないから。</p>

<!-- more -->


<p>例えば本の貸出しを表現したコード</p>

<script src="https://gist.github.com/ackintosh/5748987.js?file=before.php"></script>


<p>このクラスをテストしたい場合。</p>

<p>DateTimeクラスへの依存を下げるためにコンストラクタで渡すようにすると・・・</p>

<script src="https://gist.github.com/ackintosh/5748987.js?file=bad.php"></script>


<p>依存度が下がってテストもできるようになったけど、コンストラクタの第２引数はテストの時しか使わない。プロダクトコードには不要なもの。。。</p>

<p>後々、貸出冊数も渡そうとすると更に酷いことに。</p>

<script src="https://gist.github.com/ackintosh/5748987.js?file=too_bad.php"></script>


<p>そこで、DateTimeを差し替えられるようにstaticメソッドを用意しておくのはどうだろう。</p>

<p>こんな感じ。</p>

<script src="https://gist.github.com/ackintosh/5748987.js?file=after.php"></script>


<p>DIを勉強すればもっと良い方法があるのかな。</p>

<p>まだまだ勉強不足です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP用のベンチマークツールを作りました]]></title>
    <link href="http://ackintosh.github.io/blog/2013/06/11/developed-a-benchmark-tool/"/>
    <updated>2013-06-11T20:30:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/06/11/developed-a-benchmark-tool</id>
    <content type="html"><![CDATA[<p>こちらの記事に影響を受けて、参考にさせていただきながら自分でも作ってみました。</p>

<p><a href="http://blog.yuyat.jp/archives/1063" target="_blank">PHP 用ベンチマーキングフレームワーク Joshimane というのを作った http://blog.yuyat.jp/archives/1063</a></p>

<p>自分はなかなかいい名前が思いつかなかったので Benchy にしました。</p>

<p><a href="https://github.com/ackintosh/benchy" target="_blank">https://github.com/ackintosh/benchy</a></p>

<p>PEAR::Benchmarkと比べるとモダンな感じかなぁと思っています。</p>

<p>シンプルさと拡張性の高さをウリにできるように考えました。</p>

<!-- more -->


<h2>インストール</h2>

<p>もちろん<a href="http://getcomposer.org/" target="_blank">Composer</a>でインストールできます。</p>

<p> <script src="https://gist.github.com/ackintosh/5756449.js?file=composer.json"></script></p>

<pre><code>$ php composer.phar install
</code></pre>

<h2>使い方</h2>

<p> <script src="https://gist.github.com/ackintosh/5756449.js?file=sample.php"></script></p>

<p>これで途中経過の時間と、合計・平均時間がわかります。</p>

<h2>拡張性</h2>

<p><code>Ackintosh/Bechy/Marker</code> ディレクトリにクラスを配置してください。</p>

<p> <script src="https://gist.github.com/ackintosh/5756449.js?file=Example.php"></script></p>

<p>そうするとReporterクラスで使えるようになります。</p>

<p> <script src="https://gist.github.com/ackintosh/5756449.js?file=sample2.php"></script></p>

<h2>フックポイント</h2>

<ul>
<li>before：　ベンチマーク開始前</li>
<li>after：　ベンチマーク終了後</li>
<li>before_per_laps：　ベンチマーク前（毎回）</li>
<li>after_per_laps：　ベンチマーク後（毎回）</li>
</ul>


<p> <script src="https://gist.github.com/ackintosh/5756449.js?file=AnotherExample.php"></script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ChefでPHPをインストール]]></title>
    <link href="http://ackintosh.github.io/blog/2013/05/06/install-php-by-chef/"/>
    <updated>2013-05-06T16:45:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/05/06/install-php-by-chef</id>
    <content type="html"><![CDATA[<p>Opscode Communiityでレシピが提供されていますが、練習のために自分で作成します。</p>

<p><a href="http://community.opscode.com/cookbooks/php" target="_blank">Chef Cookbook: php - Opscode Community</a></p>

<ul>
<li><em>対象ノードを192.168.50.12で設定しています。</em></li>
<li><em>実運用では、Template Resouceを利用してphp.iniを設定する等が必要になります。</em></li>
</ul>


<!-- more -->


<h3>クックブック作成</h3>

<pre><code>$ knife cookbook create php

** Creating cookbook php
** Creating README for cookbook: php
** Creating CHANGELOG for cookbook: php
** Creating metadata for cookbook: php
</code></pre>

<h3>レシピを編集</h3>

<p><code>cookbooks/php/recipes/default.rb</code></p>

<pre><code>package "php" do
  action :install
end
</code></pre>

<h3>jsonのrun_listに追加</h3>

<p><code>nodes/192.168.50.12.json</code></p>

<pre><code>{
  "run_list" : [
    "php"
  ]
}
</code></pre>

<h3>レシピをノードに適用</h3>

<pre><code>$ knife solo cook 192.168.50.12

Recipe: php::default
  * package[php] action install
    - install version 5.3.3-22.el6 of package php
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FuelPHPでファイルアップロード]]></title>
    <link href="http://ackintosh.github.io/blog/2013/04/30/fileupload-in-fuelphp/"/>
    <updated>2013-04-30T20:53:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/04/30/fileupload-in-fuelphp</id>
    <content type="html"><![CDATA[<p>FuelPHPでファイルアップロードするときのメモです。φ(..)メモメモ</p>

<p><a href="http://fuelphp.com/" target="_blank">FuelPHP &raquo; A simple, flexible, community driven PHP5.3 framework.</a><br/>
<a href="http://fuelphp.jp/" target="_blank">FuelPHP.JP 日本語ドキュメント</a></p>

<!-- more -->


<h3>設定ファイルをappディレクトリにコピー</h3>

<pre><code>$ cp core/config/upload.php app/config/
</code></pre>

<h3>viewを作成</h3>

<p>gistfile1.php</p>

<h3>controllerを作成</h3>

<p>gistfile2.php</p>

<script src="https://gist.github.com/ackintosh/5488231.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FuelPHPに独自の設定ファイルを追加する]]></title>
    <link href="http://ackintosh.github.io/blog/2013/04/29/custom-configuration-file-for-fuelphp/"/>
    <updated>2013-04-29T16:37:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/04/29/custom-configuration-file-for-fuelphp</id>
    <content type="html"><![CDATA[<p>FuelPHPで、独自に作成した設定ファイルを使う方法のメモです。φ(｀д´)ﾒﾓﾒﾓ…</p>

<p><a href="http://fuelphp.com/" target="_blank">FuelPHP &raquo; A simple, flexible, community driven PHP5.3 framework.</a><br/>
<a href="http://fuelphp.jp/" target="_blank">FuelPHP.JP 日本語ドキュメント</a></p>

<!-- more -->


<h3>設定ファイルを作成</h3>

<p>gistfile1.php</p>

<h3>設定を読み込む</h3>

<p>gistfile2.php</p>

<p><code>Config::load()</code>の第2引数に文字列を渡すと、任意のグループ名を指定できる。</p>

<script src="https://gist.github.com/ackintosh/5480241.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FuelPHPに独自のバリデーションルールを追加する]]></title>
    <link href="http://ackintosh.github.io/blog/2013/04/29/custom-validation-for-fuelphp/"/>
    <updated>2013-04-29T16:08:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/04/29/custom-validation-for-fuelphp</id>
    <content type="html"><![CDATA[<p><a href="http://fuelphp.com/" target="_blank">FuelPHP &raquo; A simple, flexible, community driven PHP5.3 framework.</a><br/>
<a href="http://fuelphp.jp/" target="_blank">FuelPHP.JP 日本語ドキュメント</a></p>

<p>実際の開発では、独自のバリデーションルールがいくつか必要になります。<br/>
FuelPHPで追加する方法のメモです。φ(｀д´)ﾒﾓﾒﾓ…</p>

<!-- more -->


<h3>バリデーションルールを定義する</h3>

<p>gistfile1.php</p>

<h3>定義したルールのテストを書く</h3>

<p>gistfile2.php</p>

<h3>ルールを適用する</h3>

<p>gistfile3.php</p>

<h3>エラーメッセージを定義する</h3>

<p>gistfile4.php</p>

<script src="https://gist.github.com/ackintosh/5479927.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPでTCPサーバー]]></title>
    <link href="http://ackintosh.github.io/blog/2013/04/18/tcp-server-written-in-php/"/>
    <updated>2013-04-18T22:57:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/04/18/tcp-server-written-in-php</id>
    <content type="html"><![CDATA[<p>PHPでTCPサーバーを書いてみました。</p>

<p>pcntl関数を使うには、phpソースをbuildする時に&#8211;enable-pcntlを付けないといけません。</p>

<!-- more -->


<p>個人的には、pcntl_fork()したあとswitch文で分岐する流れが、
理解するのに苦労しました。</p>

<p>ちょうどRubyで並列処理を勉強していたのですが、
やっぱりRubyの方が直感的で書きやすいですね。  <br/>
<a href="http://melborne.github.io/2011/09/29/irb-Ruby-fork-WebSocket/">irbから学ぶRubyの並列処理 ~ forkからWebSocketまで</a></p>

<script src="https://gist.github.com/ackintosh/5381925.js"></script>

]]></content>
  </entry>
  
</feed>
