<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[暁 [stfuawsc]]]></title>
  <link href="http://ackintosh.github.com/atom.xml" rel="self"/>
  <link href="http://ackintosh.github.com/"/>
  <updated>2013-01-02T17:23:09+09:00</updated>
  <id>http://ackintosh.github.com/</id>
  <author>
    <name><![CDATA[Ackintosh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2012年振り返り]]></title>
    <link href="http://ackintosh.github.com/blog/2013/01/01/looking-back-on-2012/"/>
    <updated>2013-01-01T18:25:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2013/01/01/looking-back-on-2012</id>
    <content type="html"><![CDATA[<p>新年あけましておめでとうございます。<br/>
2012年の振り返りです。<br/>
2012年は色々なことを始めました。</p>

<!-- more -->


<h3>ブログ</h3>

<p>当ブログを2012/07/08から始めました。<br/>
<a href="http://octopress.org/">Octopress</a> + github Pages で作っています。<br/>
ブログを書くこと(アウトプット)を意識したインプットをするようになってきたかな・・？と思います。単なる情報ではなく、知識をアウトプットできるように継続していきたいです。<br/>
このブログをきっかけにMarkdownを知りました。楽に書けて良いですね。<br/>
Markdownエディタはあまり試してないのですがkobitoを使っています。kobitoのファイル連携機能を使うとOctopressの記事更新がかなり快適になります。<br/>
あとはブログ自体に、プログラマらしい仕掛けを何か作りたいなぁと。</p>

<h3>勉強会に参加</h3>

<p>内気で人見知りな私ですが、勇気を振り絞って勉強会に参加しました。<br/>
いまでも参加するときはガチガチに緊張してしまいます。</p>

<h4>6/23 Agile渋谷「The GitHub poweredby Agile渋谷」</h4>

<p><a href="http://atnd.org/events/30016">http://atnd.org/events/30016</a></p>

<h4>6/26 渋谷Rails勉強会</h4>

<p><a href="http://atnd.org/events/27691">http://atnd.org/events/27691</a></p>

<h4>7/27 Developers [Social Enterprise] Summit 2012</h4>

<p><a href="http://codezine.jp/devsumi/2012/social/">http://codezine.jp/devsumi/2012/social/</a></p>

<h4>10/13 Web API勉強会「イベント × 位置情報 マッシュアップワークショップ」</h4>

<p><a href="http://atnd.org/event/E0009968/0">http://atnd.org/event/E0009968/0</a></p>

<h4>12/15〜16 DevLOVE2012</h4>

<p><a href="http://devlove2012.devlove.org/">http://devlove2012.devlove.org/</a></p>

<h3>github</h3>

<p>ソーシャルコーディング時代。<br/>
プログラマだったら、コード書いて公開してなんぼですよね！<br/>
・・・という内容のブログ記事やtweetをいたるところで見かけたのがきっかけです。</p>

<p>6/23のAgile渋谷に参加した日、WEB+DB Press(github特集)を片手に始めました。<br/>
自分に手頃そうなリポジトリを探してforkして、緊張して手に汗をかきながら pull request したのを覚えています。<br/>
mergeされたときはメチャクチャ嬉しかったです。</p>

<h3>Ruby</h3>

<p>phpばっかり書いててもなぁ・・・。ということでRubyを勉強し始めました。(いつ頃からかは忘れてしまいました)<br/>
２年半程前にプログラマーになってから、phpしか知らなかった自分にとって、とても興味深いことばかりです。<br/>
最初は「文字列とかも全部オブジェクト？どゆこと？？」って感じだったのですが、勉強するほど面白さがわかってくるというか、自分のプログラミングの幅が広がっていくような感覚があります。  <br/>
いろんな言語のパラダイムを吸収して、もっともっと成長しないとですね。。。<br/>
Clean Coderに「毎年１つ言語を習得すること」とありますが、まさにこのことなのかなぁと体感しています。</p>

<h3>Rails, Heroku</h3>

<p>Rubyを始めたからにはRailsをさわりたい！Herokuをさわりたい！ということで、Rubyの文法もままならない状態でしたが２つほどWebアプリを作ってみました。<br/>
<strong>Markdownエディタ。Evernoteに保存できます。</strong><br/>
<a href="http://md2note.herokuapp.com/">http://md2note.herokuapp.com/</a><br/>
<strong>感謝の言葉を投稿。Facebookアカウントを使います</strong><br/>
<a href="http://thankyou.heroku.com/">http://thankyou.heroku.com/</a></p>

<h3>コミュニティ</h3>

<p>Ruby関連の勉強会やらコミュニティについて調べていたときに、地元の群馬(しかも隣り町！)の勉強会を見つけました。<br/>
(職場が埼玉県さいたま市なので、どう頑張っても開始時刻に間に合わないのが悔しいところです T_T)<br/>
<em>guRuby</em><br/>
<a href="http://qwik.jp/guruby/">http://qwik.jp/guruby/</a><br/>
さっそく勇気を振り絞って、緊張と寒さでガチガチになりながらも参加させていただきました。(年内最後の勉強会でした)<br/>
まだ、お会いできていない方もいらっしゃいますが、優しい方々で本当によかったです。<br/>
自分も貢献できるように頑張ります。</p>

<h2>2013年は</h2>

<p>2012年に始めたことを継続していきます！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[devlove2012に行って来ました]]></title>
    <link href="http://ackintosh.github.com/blog/2012/12/17/devlove2012/"/>
    <updated>2012-12-17T23:53:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/12/17/devlove2012</id>
    <content type="html"><![CDATA[<p>devlove2012にいってきました。
初参加です。<br/>
<a href="http://devlove2012.devlove.org/">http://devlove2012.devlove.org/</a></p>

<p>群馬からの参加ということもあり、１日目のあと帰るのが面倒だったので<br/>
渋谷のカプセルホテルを予め予約していきました。<br/>
カプセルホテルは初めてでしたが、サウナ付きでなかなか良かったと思います。
…</p>

<p>今回のテーマは「自分戦略」</p>

<p>自分の能力やキャリア・環境に悩みながらいつもモヤモヤしている日々をなんとかしたい。<br/>
Web業界の先輩方のお話をきいて何か得られれば、という思いで参加しました。</p>

<!-- more -->


<pre><code>■自分戦略
戦略って？
{
  ・「何にどれだけ時間を費やすのか」
  →取捨選択が必要。
  ・これまでやってきたことと、これからやりたいことを繋ぐこと
}

何のための戦略？
{
  ・やりたいことをやるため
  （やりたくないことをやらないため）
  ・一緒に仕事したい人とするため
  ・収入を上げるため
}

■やるべき事
整理
{
    1. 危機感を持って勉強
    2. アウトプット
    3. 何が自分の情熱なのか
    4. どうすればそれが実現するのか
}

アウトプット
{
  Blog
  github
  勉強会
}    

自分をプロモーション
{
  twitter, facebook
  勉強会で発表する
}

コネクション
{
  コミュニティ
  勉強会
}

■今後のトレンド
・マルチコアの活用
・コンピュータサイエンスの地位向上
</code></pre>

<p>今後はインプット／アウトプットを更に加速しつつ、
guRubyに参加（群馬在住ですので）して、コネクションを少しづつでも広げていきます。<br/>
それと、自分が何に対して情熱とか達成感とかを感じるのかをちゃんと定期的に整理しなければ、と思いました。</p>

<p>また、今回の反省点として、Macの電源を忘れてしまったのが痛かったです・・・</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[__callの使いどころ]]></title>
    <link href="http://ackintosh.github.com/blog/2012/11/25/using-the-call/"/>
    <updated>2012-11-25T13:44:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/11/25/using-the-call</id>
    <content type="html"><![CDATA[<p>既存クラスをラップしたい時とか、委譲をたくさん使いたい時に有用です。</p>

<!-- more -->


<script src="https://gist.github.com/4142451.js?file=gistfile1.php"></script>


<p></p>

<p>※コードが表示されない場合はこちら<br/>
<a href="https://gist.github.com/4142451">https://gist.github.com/4142451</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery MasonryでTOP記事を整列しました]]></title>
    <link href="http://ackintosh.github.com/blog/2012/11/10/introduced-jquery-dot-masonry/"/>
    <updated>2012-11-10T14:32:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/11/10/introduced-jquery-dot-masonry</id>
    <content type="html"><![CDATA[<p>当ブログTOPページに新着記事を並べているのですが、<br/>
ゴチャってたのですごく不満でした。</p>

<!-- more -->


<p>こんな感じです↓
<img src="https://dl.dropbox.com/u/22083548/octopress/201211/top_before.png" alt="top_before" /></p>

<h3>jQuery Masonry</h3>

<p><a href="http://pinterest.com/">pinterest</a>みたいに並べようと調べていたら、jQuery Masonryとやらで出来るとのことなので試してみました。</p>

<p><a href="http://masonry.desandro.com/">jQuery Masonry</a></p>

<script src="https://gist.github.com/4050100.js?file=masonry.html"></script>


<p></p>

<p>※コードが表示されない場合はこちら<br/>
<a href="https://gist.github.com/4050100">https://gist.github.com/4050100</a></p>

<p>綺麗に並びました！</p>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/201211/top_after.png" alt="top_after" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacにScalaをインストール]]></title>
    <link href="http://ackintosh.github.com/blog/2012/11/10/install-the-scala/"/>
    <updated>2012-11-10T13:22:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/11/10/install-the-scala</id>
    <content type="html"><![CDATA[<p>いままでLLしか書いたことないし、話題の関数型言語が気になるなぁという想いからScalaを勉強しようと思いました。</p>

<p>とりあえずAmazonでScalaの本を買いつつ、Macにインストール。</p>

<p><a href="http://www.amazon.co.jp/Scala%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%A9%E3%83%96%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%E3%82%B3%E3%83%B3%E3%82%BB%E3%83%97%E3%83%88-%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0-Programming-Scala/dp/4844327453">Scalaスケーラブルプログラミング[コンセプト&amp;コーディング]</a>
<img src="http://ec2.images-amazon.com/images/I/41nFY0KbnfL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU09_.jpg" alt="Scalaスケーラブルプログラミング[コンセプト&amp;コーディング]" /> <br/>
コップ本って呼ばれているみたいです。</p>

<!-- more -->


<h3>Scalaをインストール</h3>

<p>homebrewでインストールしました。簡単〜</p>

<pre><code>$ brew install scala
==&gt; Downloading http://www.scala-lang.org/downloads/distrib/files/scala-2.9.2.tgz
######################################################################## 100.0%
==&gt; Downloading https://raw.github.com/scala/scala-dist/27bc0c25145a83691e3678c7dda602e765e13413/completion.d/2.9.1/scala
######################################################################## 100.0%
==&gt; Caveats
Bash completion has been installed to:
  /usr/local/etc/bash_completion.d
==&gt; Summary
/usr/local/Cellar/scala/2.9.2: 38 files, 26M, built in 115 seconds
$ scala -version
Scala code runner version 2.9.2 -- Copyright 2002-2011, LAMP/EPFL
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyでStrategyパターン]]></title>
    <link href="http://ackintosh.github.com/blog/2012/11/04/strategy-pattern-in-ruby/"/>
    <updated>2012-11-04T17:04:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/11/04/strategy-pattern-in-ruby</id>
    <content type="html"><![CDATA[<h3>Strategyパターン</h3>

<ul>
<li><p>アルゴリズムに多態性を持たせたい場合の、委譲ベースのアプローチ。</p></li>
<li><p>コンテキストとストラテジオブジェクト間のインターフェースに注意して設計する。</p></li>
</ul>


<!-- more -->


<h3>Rubyで書く</h3>

<ul>
<li><p>基底クラスFormatterはoutput_reportメソッドで例外を投げているだけなので、<br/>
この場合、基底クラスを定義せずに書く具象クラスを書いていったほうがRuby的。(ダックタイピング哲学)</p></li>
<li><p>Report#output_reportの引数がオブジェクトの参照なので、データの流れをシンプルにするが、クラス間の結合度が上がってしまっている。<br/>
→必要な引数の数が少なければ、オブジェクトでなくても良い。<br/>
(コンテキスト - ストラテジオブジェクト間のインターフェースの検討)</p></li>
</ul>


<script src="https://gist.github.com/4010809.js?file=gistfile1.rb"></script>


<p></p>

<p>埋め込んだコードが表示されない場合はこちら<br/>
→ <a href="https://gist.github.com/4010809">https://gist.github.com/4010809</a></p>

<h3>コードブロック(Procオブジェクト)を使って書く</h3>

<ul>
<li>コード例のように、ストラテジオブジェクトの実装がシンプルな場合には、ストラテジをコードブロックに置き換えることでシンプル且つRuby的になる。</li>
</ul>


<script src="https://gist.github.com/4010931.js?file=gistfile1.rb"></script>


<p></p>

<p>埋め込んだコードが表示されない場合はこちら<br/>
→ <a href="https://gist.github.com/4010931">https://gist.github.com/4010931</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyでTemplate Methodパターン]]></title>
    <link href="http://ackintosh.github.com/blog/2012/10/24/template-method-pattern-in-ruby/"/>
    <updated>2012-10-24T20:45:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/10/24/template-method-pattern-in-ruby</id>
    <content type="html"><![CDATA[<p>Template Methodパターンは、アルゴリズムに多態性を持たせたい場合に有効。</p>

<p>Rubyは抽象メソッドをサポートしていないので、Reportクラスのoutput_lineメソッドでは例外を投げるようにしている。</p>

<!-- more -->


<p><em>output_start</em> メソッドや <em>output_end</em> メソッドのように、<br/>
<em>Template Methodの具象クラスによってオーバーライドできる非抽象メソッド</em><br/>
を<strong>フックメソッド</strong> という。</p>

<script src="https://gist.github.com/3945597.js?file=gistfile1.rb"></script>


<p></p>

<p>埋め込んだコードが表示されない場合はこちら
→ <a href="https://gist.github.com/3945597">https://gist.github.com/3945597</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyで抽象クラス／メソッド]]></title>
    <link href="http://ackintosh.github.com/blog/2012/10/23/abstract-method-in-ruby/"/>
    <updated>2012-10-23T20:30:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/10/23/abstract-method-in-ruby</id>
    <content type="html"><![CDATA[<p>Rubyは抽象クラス／メソッドをサポートしていない。<br/>
これらは、Rubyの手軽で動的な考え方にそぐわないから。</p>

<!-- more -->


<p>でも、どうしても同様のことを実装したい場合は、例外を投げるだけのメソッドを定義すれば一応可能。</p>

<p>※ 下記のようなコードはダックタイピングの哲学に反するかもしれない。</p>

<p>※ 埋め込んだコードが表示されない場合
こちら→ <a href="https://gist.github.com/3938364">gist: 3938364</a></p>

<script src="https://gist.github.com/3938364.js?file=gistfile1.rb"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[traitを使ってObserverパターンを書いてみました。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/09/16/sample-of-observer-pattern-using-php5-dot-4/"/>
    <updated>2012-09-16T16:43:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/09/16/sample-of-observer-pattern-using-php5-dot-4</id>
    <content type="html"><![CDATA[<p>php5.4の目玉機能の１つ、trait。<br/>
RubyのMix-in的なことができると噂は聞いていたのですが、今までなんとなくスルーしてました・・・。</p>

<p>そんな中、phpカンファレンス2012に行ってモチベーションアップしてきたので勉強！<br/>
使い方はphpマニュアルにとても詳しく書いてあったので助かりました。感謝。<br/>
<a href="http://php.net/manual/ja/language.oop5.traits.php">http://php.net/manual/ja/language.oop5.traits.php</a></p>

<p>そんな学びたてホヤホヤのtraitを使ってObserverパターンを書いてみました。</p>

<!-- more -->


<p>埋め込んだコードが表示されない方はこちら<br/>
<a href="https://gist.github.com/3731335">https://gist.github.com/3731335</a></p>

<script src="https://gist.github.com/3731335.js"> </script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdownをプレビュー → Evernoteに保存できるサービスを作りました。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/09/02/md2note/"/>
    <updated>2012-09-02T16:58:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/09/02/md2note</id>
    <content type="html"><![CDATA[<p>最近はブログ記事とかをMarkdown記法で書いてる人も多いのではないでしょうか。<br/>
ブログのネタをEvernoteにメモしてる人も多いのではないでしょうか。</p>

<!-- more -->


<hr />

<p>Markdownをプレビューしながら書いてそのままEvernoteに保存できるサービスを作ってみました。<br/>
(RubyとRailsの勉強を兼ねて φ(..))<br/>
上記に当てはまる方は是非使ってみてください。</p>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/20120902/md2note_small.png" alt="md2note" /></p>

<p><em>Md2Note</em></p>

<p><a href="http://md2note.herokuapp.com/">http://md2note.herokuapp.com/</a></p>

<p>Evernoteにログインすると、ノート一覧がでますので<br/>
保存先のノートを選択してください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HerokuのWebサーバーをUnicornに変更する]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/28/using-the-unicorn-in-heroku/"/>
    <updated>2012-08-28T01:34:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/28/using-the-unicorn-in-heroku</id>
    <content type="html"><![CDATA[<p>最近PHPネタばかりだったので、頑張ってRailsについて書いてみます。<br/>
RailsではデフォルトでWEBrickが起動しますが、低速なので本番運用には向かないとされています。</p>

<p><a href="http://www.amazon.co.jp/WEB-DB-PRESS-Vol-70-%E6%88%90%E7%94%B0/dp/4774151904">WEB+DB PRESS Vol.70</a><br/>
<img src="https://dl.dropbox.com/u/22083548/octopress/20120827/webdb_vol70.jpeg" alt="WEB+DB PRESS Vol.70" /><br/>
WEB+DB PRESS vol.70でRails高速化としてUnicornが紹介されています。<br/>
普段Railsで開発するときはherokuを使っているので<br/>
herokuでUnicornを使ってみたいと思います。</p>

<!-- more -->


<h2>heroku ps を確認</h2>

<p>まずはherokuで現在使われているWebサーバーを確認します。</p>

<pre><code>$ heroku ps
</code></pre>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/20120827/heroku_ps_thin.png" alt="heroku_ps" /></p>

<p>herokuのデフォルトはthinなのでしょうか？？<br/>
以下、Unicornのインストールを進めていきます。</p>

<h2>Gemfileに追加</h2>

<pre><code>gem 'unicorn'
</code></pre>

<h2>config/unicorn.rbを作成</h2>

<p>とりあえず設定内容は下記にしました。<br/>
詳しいことは勉強中です。すみません。</p>

<pre><code>worker_processes 2
timeout 20
preload_app false
stdout_path "log/unicorn-out.log"
stderr_path "log/unicorn-err.log"
</code></pre>

<h2>Procfileを作成</h2>

<p>Railsのルートディレクトリ直下にProcfileを作成します。</p>

<pre><code>web: bundle exec unicorn -p $PORT -c ./config/unicorn.rb  
</code></pre>

<h2>herokuにpush</h2>

<p>いつものようにherokuにpushします。</p>

<pre><code>$ git push heroku master
</code></pre>

<h2>heroku ps で確認</h2>

<pre><code>$ heroku ps
</code></pre>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/20120827/heroku_ps_unicorn.png" alt="heroku_ps_unicorn" /></p>

<p>bundle exec unicorn …となっていれば成功です。<br/>
heroku psの出力の2行目が</p>

<pre><code>web.1: crashed for…
</code></pre>

<p>になっていたら設定を見なおしてみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQLでインデックスあり・なしの検索速度を比較してみました。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/26/compared-the-index-with-and-without/"/>
    <updated>2012-08-26T11:14:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/26/compared-the-index-with-and-without</id>
    <content type="html"><![CDATA[<p>usersとfavoritesが１対多になるようにして、
indexの設定あり・なしの2つのDBを用意して比較しました。<br/>
予め、<br/>
usersは 100,000件<br/>
favoritesに300,000件のレコードを用意しました。</p>

<!-- more -->


<h2>indexなし</h2>

<p>・テーブル作成</p>

<pre><code>create table users(
id int(11) not null primary key auto_increment,
name varchar(40) not null
) engine=innodb;

create table favorites(
user_id int(11) not null,
favorite_name varchar(40) not null
) engine=innodb;
</code></pre>

<p>・select<br/>
<img src="https://dl.dropbox.com/u/22083548/octopress/20120826/select_noindex.png" alt="select結果(indexなし)" /></p>

<p>・explain<br/>
<img src="https://dl.dropbox.com/u/22083548/octopress/20120826/explain_noindex.png" alt="explain(indexなし)" /></p>

<h2>indexあり</h2>

<p>・テーブル作成</p>

<pre><code>create table users(
id int(11) not null primary key auto_increment,
name varchar(40) not null
) engine=innodb;

create table favorites(
user_id int(11) not null,
favorite_name varchar(40) not null,
foreign key(user_id) references users(id)
) engine=innodb;
</code></pre>

<p>・select<br/>
<img src="https://dl.dropbox.com/u/22083548/octopress/20120826/select_index.png" alt="select結果(indexあり)" /></p>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/20120826/select_index_phpmyadmin.png" alt="select結果(phpmyadmin)" /></p>

<p>・explain
<img src="https://dl.dropbox.com/u/22083548/octopress/20120826/explain_index.png" alt="explain(indexあり)" /></p>

<h2>結果</h2>

<ul>
<li>indexなし<br/>
クエリ実行時間 0.38  秒</li>
<li>indexあり<br/>
クエリ実行時間 0.0005秒</li>
</ul>


<p>explainの結果から、indexがないと
テーブルのフルスキャンが発生してしまっていることがわかりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP5.4でメソッドから返る配列の扱いが便利になったようです。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/25/array-is-useful-in-php5-dot-4/"/>
    <updated>2012-08-25T16:16:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/25/array-is-useful-in-php5-dot-4</id>
    <content type="html"><![CDATA[<p>以前書いた、<a href="http://ackintosh.github.com/blog/2012/08/14/method-chain-is-useful-in-php5-dot-4/">PHP5.4でメソッドチェーンが便利になったようです。</a> の配列版みたいなものです。</p>

<p><em>もう知ってるよ！という方は、光よりも速く読み飛ばしてください。</em></p>

<!-- more -->


<h2>PHP5.3以前</h2>

<p>メソッドから返ってくる配列にアクセスする場合、PHP5.3以前では<br/>
わざわざ変数に入れる必要がありました。</p>

<pre><code>&lt;?php
$result_array = getSomethingArray();
echo $result_array[1];  
</code></pre>

<p>特定の要素だけが欲しい時はこれがストレスになってしょうがないです。</p>

<h2>PHP5.4</h2>

<p>関数やメソッドの実行に続けてブラケットで要素を指定できるようになりました！</p>

<pre><code>&lt;?php
function hogefuga()
{
    return array('ho', 'ge', 'fu', 'ga');
}
echo hogefuga()[1];// 'ge'

$str = "ho,ge,fu,ga";
echo explode(",", $str)[2];// 'fu'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP5.4でメソッドチェーンが便利になったようです。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/14/method-chain-is-useful-in-php5-dot-4/"/>
    <updated>2012-08-14T01:39:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/14/method-chain-is-useful-in-php5-dot-4</id>
    <content type="html"><![CDATA[<h2>PHP5.0〜5.3</h2>

<p>インスタンス生成から直接メソッドチェーンを実行するために、Creation Methodを定義する必要がありました。<br/>
面倒ですよね(；´∀｀)</p>

<!-- more -->


<pre><code>Hoge::create('Hello')-&gt;fuga();

class Hoge
{
    private $message;

    private function __construct($message)
    {
        $this-&gt;message = $message;
    }

    public static function create($message)
    {
        return new self($message);
    }

    public function fuga()
    {
        echo $this-&gt;message;
    }
}
</code></pre>

<h2>PHP5.4〜</h2>

<p>Creation Method を定義せず、コンストラクタから直接メソッドチェーンが実行できます。</p>

<pre><code>(new Hoge('Hello'))-&gt;fuga();

class Hoge
{
    private $message;

    public function __construct($message)
    {
        $this-&gt;message = $message;
    }

    public function fuga()
    {
        echo $this-&gt;message;
    }
}
</code></pre>

<h2>MacへのPHP5.4インストールでこちらを参考にさせていただきました</h2>

<p><a href="http://www.1x1.jp/blog/2012/05/php_54_for_mac_os_x_as_binary_package.html">Macで一番簡単にPHP5.4をインストールする方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TravisCIを使ってみました。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/12/using-travis-ci/"/>
    <updated>2012-08-12T15:03:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/12/using-travis-ci</id>
    <content type="html"><![CDATA[<p>先日githubで、<a href="https://github.com/ackintosh/Anote">Anote(アノート)</a>というPHPフレームワークを公開しました。<br/>
一応テストコードっぽいのも書いたので、CIをやってみようと思っていたところ辿り着いたのがTravisCIです。</p>

<p><strong>Travis CI</strong><br/>
<a href="http://travis-ci.org/">http://travis-ci.org/</a></p>

<p>クラウド版Jenkinsみたいな感じでしょうか？？</p>

<!-- more -->


<h2>githubと連携する</h2>

<h3>githubリポジトリのルートに.travis.ymlを作成</h3>

<p>自分はこんな風に書きました。</p>

<pre><code>language: php
php:
  - 5.3
script: sh testrunner.sh
</code></pre>

<p>script行を省略すれば、デフォルトでphpunitを実行してくれるみたいです。<br/>
僕はわけあって、シェルスクリプトの中で実行しています・・・。</p>

<h3>Travisにサインアップ</h3>

<p>githubアカウントでサインアップすると、マイページのReposに自分のリポジトリが表示されます。</p>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/howto_travis-1.png" alt="TravisCI Repos" /></p>

<p>右側のスイッチをONにするだけで連携されます。</p>

<h2>コードカバレッジを表示する</h2>

<p>.travis.yml</p>

<pre><code>language: php
php:
  - 5.3
script: phpunit --coverage-text
</code></pre>

<p>phpunit のオプションを指定するとコードカバレッジが表示されます。<br/>
<img src="https://dl.dropbox.com/u/22083548/octopress/howto_travis-2.png" alt="TravisCIコードカバレッジ" /></p>

<h2>参考にさせていただきました</h2>

<p><a href="http://project-p.jp/halt/?p=1718">Travis CIを使ってPHP-5.2, 5.3, 5.4でテストを実行しコードカバレッジを表示する</a></p>

<p><a href="http://blog.yuyat.jp/archives/1540">Travis CI で PHP 5.4 も CI する, PHPUnit も Behat もやる</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPでWebアプリフレームワーク作ってみました。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/12/developed-php-framework/"/>
    <updated>2012-08-12T11:03:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/12/developed-php-framework</id>
    <content type="html"><![CDATA[<p>Anote(アノート)という名前にしました。</p>

<p><a href="https://github.com/ackintosh/Anote">https://github.com/ackintosh/Anote</a></p>

<p>アノテーションを使って何かやりたいと思ったのと、フレームワークの習作を兼ねて作りはじめました。</p>

<p>まだまだお粗末な実装なので(；´∀｀)ガンガンforkしてください(・∀・)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MAMPでPHPUnitを使う]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/04/using-phpunit-with-mamp/"/>
    <updated>2012-08-04T16:39:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/04/using-phpunit-with-mamp</id>
    <content type="html"><![CDATA[<p>既にMAMPにインストールされている。</p>

<pre><code>$ /Applications/MAMP/bin/php/php5.3.6/bin/phpunit --version
PHPUnit 3.6.10 by Sebastian Bergmann.  
</code></pre>

<p>下記のようにインクルードして使う。</p>

<pre><code>require_once('PHPUnit/Autoload.php');
class HogeTest extends PHPUnit_Framework_TestCase
{
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacにphpDocumentorをインストール]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/28/install-phpdocumentor/"/>
    <updated>2012-07-28T18:02:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/28/install-phpdocumentor</id>
    <content type="html"><![CDATA[<h2>phpDocumentor</h2>

<p><a href="http://www.phpdoc.org/">http://www.phpdoc.org/</a></p>

<p>現時点では、php5.3.3以上が必須。</p>

<!-- more -->


<h2>インストール</h2>

<pre><code>$ php -v
PHP 5.3.10 with Suhosin-Patch (cli) (built: Feb 20 2012 22:55:53) 
</code></pre>

<p>githubからダウンロード<br/>
<a href="https://github.com/phpDocumentor/phpDocumentor2">phpDocumentor / phpDocumentor2</a></p>

<p>解凍したファイル群中のREADME.mdを参考にインストールする。</p>

<h3>pearを使う方法が推奨されているようだが、今回は手動でインストール。</h3>

<pre><code>$ sudo php ./installer.php
</code></pre>

<p>※ここで、php.iniの設定が必要との警告が表示された</p>

<pre><code>The detect_unicode setting must be disabled.
Add the following to the end of your `php.ini`:
detect_unicode = Off  
</code></pre>

<h3>macのphp.iniを編集</h3>

<pre><code>$ sudo cp /etc/php.ini.default /etc/php.ini
$ sudo vi /etc/php.ini
detect_unicode = Off
date.timezone = Asia/Tokyo  
</code></pre>

<h3>installer再実行</h3>

<pre><code>$ sudo php ./installer.php
&gt; Thank you for installing phpDocumentor.
&gt; You can run it using the command `php /{phpDocumentorの設置path}/bin/phpdoc.php`
</code></pre>

<h3>シンボリックリンク作成</h3>

<pre><code>$ sudo ln -s /{phpDocumentorの設置path}/bin/phpdoc.php /usr/bin/phpdoc
</code></pre>

<h2>phpDocumentor実行</h2>

<pre><code>$ phpdoc run -d {対象ソースディレクトリ} -t {保存先ディレクトリ}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP5.3以降、mysql拡張モジュールは非推奨]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/27/deprecated-php-mysql-extension/"/>
    <updated>2012-07-27T19:37:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/27/deprecated-php-mysql-extension</id>
    <content type="html"><![CDATA[<h2>代替として、mysqli拡張モジュールやPDO(PHP Data Object)ドライバが用意されている。</h2>

<ul>
<li><p>mysqli拡張モジュール<br/>
<a href="http://php.net/manual/ja/book.mysqli.php">http://php.net/manual/ja/book.mysqli.php</a></p></li>
<li><p>PDO_MYSQL<br/>
<a href="http://www.php.net/manual/ja/ref.pdo-mysql.php">http://www.php.net/manual/ja/ref.pdo-mysql.php</a></p></li>
</ul>


<p>古いmysql関数も含めた3つの機能の比較表がありました。
<a href="http://www.php.net/manual/ja/mysqlinfo.api.choosing.php">http://www.php.net/manual/ja/mysqlinfo.api.choosing.php</a></p>

<p>新しいモジュールでは、
* OOPインターフェース
* プリペアドステートメント
* ストアドプロシージャ
* トランザクション<br/>
をAPIレベルでサポートしている。</p>

<h2>オブジェクト指向型が使えるのでラッパークラスを定義できる</h2>

<p><a href="http://php.net/manual/ja/mysqli.real-connect.php">http://php.net/manual/ja/mysqli.real-connect.php</a></p>

<pre><code>class OriginalMysqli extends mysqli
{
    …
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBoxのCentOSにJenkinsをインストール]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/22/install-jenkins-to-centos/"/>
    <updated>2012-07-22T20:53:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/22/install-jenkins-to-centos</id>
    <content type="html"><![CDATA[<h2>VirtualBoxの設定</h2>

<ul>
<li>ホストOS〜ゲストOS間で通信できる</li>
<li>ゲストOS〜外部で通信できる</li>
</ul>


<p>上記を満たすためのVirtualBox設定をする。<br/>
設定→ネットワーク<br/>
→アダプタ１　割り当て→「ブリッジアダプタ」<br/>
→アダプタ２　割り当て→「NAT」</p>

<!-- more -->


<h2>CentOSの設定</h2>

<p>デフォルトではiptablesが設定されていて、ホストOSからSSHやHTTP接続等ができないので変更。<br/>
iptables設定用スクリプトを用意して実行する。</p>

<pre><code># vi iptables.sh
#!/bin/sh

IPTABLES=/sbin/iptables

# ルールの初期化
$IPTABLES -F

# ポリシーの設定
$IPTABLES -P INPUT DROP
$IPTABLES -P OUTPUT ACCEPT
$IPTABLES -P FORWARD DROP

# ループバックアドレス
$IPTABLES -A INPUT -i lo -j ACCEPT

# 接続済みを許可
$IPTABLES -A INPUT -m state --state  ESTABLISHED,RELATED -j ACCEPT

# ping を許可(1req/sのみ許可)
$IPTABLES -A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/s -j ACCEPT

# 公開サービス
$IPTABLES -A INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT # SSH
$IPTABLES -A INPUT -p tcp --dport 25 -m state --state NEW -j ACCEPT # SMTP
$IPTABLES -A INPUT -p tcp --dport 80 -m state --state NEW -j ACCEPT # HTTP
$IPTABLES -A INPUT -p tcp --dport 443 -m state --state NEW -j ACCEPT # HTTPS

# chmod 744 iptables.sh
# ./iptables.sh
# iptables -L (設定確認)
# service iptables save
# service iptables restart
</code></pre>

<h2>Jenkinsインストール</h2>

<h3>OpenJDKインストール</h3>

<pre><code># yum install java-1.6.0-openjdk
</code></pre>

<h3>公開鍵インポート</h3>

<pre><code># wget /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
# rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
</code></pre>

<h3>Jenkinsインストール</h3>

<pre><code># yum install jenkins
</code></pre>

<h3>Jenkinsのデーモン起動</h3>

<pre><code># /sbin/service jenkins start
</code></pre>

<h2>起動確認</h2>

<pre><code>http://localhost:8080
</code></pre>
]]></content>
  </entry>
  
</feed>
