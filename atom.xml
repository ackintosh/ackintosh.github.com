<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://ackintosh.github.com/atom.xml" rel="self"/>
  <link href="http://ackintosh.github.com/"/>
  <updated>2012-07-28T18:08:22+09:00</updated>
  <id>http://ackintosh.github.com/</id>
  <author>
    <name><![CDATA[Ackintosh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MacにphpDocumentorをインストール]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/28/install-phpdocumentor/"/>
    <updated>2012-07-28T18:02:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/28/install-phpdocumentor</id>
    <content type="html"><![CDATA[<h2>phpDocumentor</h2>

<p><a href="http://www.phpdoc.org/">http://www.phpdoc.org/</a></p>

<p>現時点では、php5.3.3以上が必須。</p>

<h2>インストール</h2>

<pre><code>$ php -v
PHP 5.3.10 with Suhosin-Patch (cli) (built: Feb 20 2012 22:55:53) 
</code></pre>

<p>githubからダウンロード<br/>
<a href="https://github.com/phpDocumentor/phpDocumentor2">phpDocumentor / phpDocumentor2</a></p>

<p>解凍したファイル群中のREADME.mdを参考にインストールする。</p>

<h3>pearを使う方法が推奨されているようだが、今回は手動でインストール。</h3>

<pre><code>$ sudo php ./installer.php
</code></pre>

<p>※ここで、php.iniの設定が必要との警告が表示された</p>

<pre><code>The detect_unicode setting must be disabled.
Add the following to the end of your `php.ini`:
detect_unicode = Off  
</code></pre>

<h3>macのphp.iniを編集</h3>

<pre><code>$ sudo cp /etc/php.ini.default /etc/php.ini
$ sudo vi /etc/php.ini
detect_unicode = Off
date.timezone = Asia/Tokyo  
</code></pre>

<h3>installer再実行</h3>

<pre><code>$ sudo php ./installer.php
&gt; Thank you for installing phpDocumentor.
&gt; You can run it using the command `php /{phpDocumentorの設置path}/bin/phpdoc.php`
</code></pre>

<h3>シンボリックリンク作成</h3>

<pre><code>$ sudo ln -s /{phpDocumentorの設置path}/bin/phpdoc.php /usr/bin/phpdoc
</code></pre>

<h2>phpDocumentor実行</h2>

<pre><code>$ phpdoc run -d {対象ソースディレクトリ} -t {保存先ディレクトリ}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP5.3以降、mysql拡張モジュールは非推奨]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/27/deprecated-php-mysql-extension/"/>
    <updated>2012-07-27T19:37:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/27/deprecated-php-mysql-extension</id>
    <content type="html"><![CDATA[<h2>代替として、mysqli拡張モジュールやPDO(PHP Data Object)ドライバが用意されている。</h2>

<ul>
<li><p>mysqli拡張モジュール<br/>
<a href="http://php.net/manual/ja/book.mysqli.php">http://php.net/manual/ja/book.mysqli.php</a></p></li>
<li><p>PDO_MYSQL<br/>
<a href="http://www.php.net/manual/ja/ref.pdo-mysql.php">http://www.php.net/manual/ja/ref.pdo-mysql.php</a></p></li>
</ul>


<p>古いmysql関数も含めた3つの機能の比較表がありました。
<a href="http://www.php.net/manual/ja/mysqlinfo.api.choosing.php">http://www.php.net/manual/ja/mysqlinfo.api.choosing.php</a></p>

<p>新しいモジュールでは、
* OOPインターフェース
* プリペアドステートメント
* ストアドプロシージャ
* トランザクション<br/>
をAPIレベルでサポートしている。</p>

<h2>オブジェクト指向型が使えるのでラッパークラスを定義できる</h2>

<p><a href="http://php.net/manual/ja/mysqli.real-connect.php">http://php.net/manual/ja/mysqli.real-connect.php</a></p>

<pre><code>class OriginalMysqli extends mysqli
{
    …
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBoxのCentOSにJenkinsをインストール]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/22/install-jenkins-to-centos/"/>
    <updated>2012-07-22T20:53:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/22/install-jenkins-to-centos</id>
    <content type="html"><![CDATA[<h2>VirtualBoxの設定</h2>

<ul>
<li>ホストOS〜ゲストOS間で通信できる</li>
<li>ゲストOS〜外部で通信できる</li>
</ul>


<p>上記を満たすためのVirtualBox設定をする。<br/>
設定→ネットワーク<br/>
→アダプタ１　割り当て→「ブリッジアダプタ」<br/>
→アダプタ２　割り当て→「NAT」</p>

<h2>CentOSの設定</h2>

<p>デフォルトではiptablesが設定されていて、ホストOSからSSHやHTTP接続等ができないので変更。<br/>
iptables設定用スクリプトを用意して実行する。</p>

<pre><code># vi iptables.sh
#!/bin/sh

IPTABLES=/sbin/iptables

# ルールの初期化
$IPTABLES -F

# ポリシーの設定
$IPTABLES -P INPUT DROP
$IPTABLES -P OUTPUT ACCEPT
$IPTABLES -P FORWARD DROP

# ループバックアドレス
$IPTABLES -A INPUT -i lo -j ACCEPT

# 接続済みを許可
$IPTABLES -A INPUT -m state --state  ESTABLISHED,RELATED -j ACCEPT

# ping を許可(1req/sのみ許可)
$IPTABLES -A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/s -j ACCEPT

# 公開サービス
$IPTABLES -A INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT # SSH
$IPTABLES -A INPUT -p tcp --dport 25 -m state --state NEW -j ACCEPT # SMTP
$IPTABLES -A INPUT -p tcp --dport 80 -m state --state NEW -j ACCEPT # HTTP
$IPTABLES -A INPUT -p tcp --dport 443 -m state --state NEW -j ACCEPT # HTTPS

# chmod 744 iptables.sh
# ./iptables.sh
# iptables -L (設定確認)
# service iptables save
# service iptables restart
</code></pre>

<h2>Jenkinsインストール</h2>

<h3>OpenJDKインストール</h3>

<pre><code># yum install java-1.6.0-openjdk
</code></pre>

<h3>公開鍵インポート</h3>

<pre><code># wget /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
# rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
</code></pre>

<h3>Jenkinsインストール</h3>

<pre><code># yum install jenkins
</code></pre>

<h3>Jenkinsのデーモン起動</h3>

<pre><code># /sbin/service jenkins start
</code></pre>

<h2>起動確認</h2>

<pre><code>http://localhost:8080
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL(InnoDB)でバルクinsertのベンチマークとってみました]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/18/benchmark-of-bulk-insert/"/>
    <updated>2012-07-18T00:33:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/18/benchmark-of-bulk-insert</id>
    <content type="html"><![CDATA[<h2>テーブル作成</h2>

<pre><code>create table test (
id int(11) unsigned auto_increment primary key,
name varchar(255) not null,
created datetime not null
);
</code></pre>

<h2>通常のinsert文</h2>

<pre><code>insert into test (name, created) values ('name1', now());
insert into test (name, created) values ('name2', now());
・・・ 10,000回
</code></pre>

<p>結果<br/>
<em>6.39秒</em></p>

<h2>バルクinsert</h2>

<pre><code>insert into test (name, created) values ('name1', now()), ('name2', now()) ・・・
・・・10,000回
</code></pre>

<p>結果<br/>
<em>0.20秒</em></p>

<p>全然違う(・∀・)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 1.9ではString#to_aは使えない]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/17/cant-use-string-number-to-a-in-ruby-1-dot-9/"/>
    <updated>2012-07-17T00:08:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/17/cant-use-string-number-to-a-in-ruby-1-dot-9</id>
    <content type="html"><![CDATA[<pre><code>"hoge".to_a
 undefined method `to_a' for "the":String (NoMethodError)
</code></pre>

<p>参考URL</p>

<p><a href="http://d.hatena.ne.jp/modka/20110210/1297322853">Ruby1.9ではStringはEnumerableではない</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyで日本語を扱う]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/14/use-japanese-in-ruby/"/>
    <updated>2012-07-14T17:30:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/14/use-japanese-in-ruby</id>
    <content type="html"><![CDATA[<p>Ruby1.9以降では</p>

<pre><code># encoding : 文字コード
</code></pre>

<p>をスクリプトの１行目に書いて文字コードを指定する。</p>

<p>実際のファイルの文字コードと一致していなければならない。</p>

<pre><code># encoding : utf-8
# encoding : shift_jis
# encoding : euc-jp
</code></pre>

<p>shift_jisだけアンダースコア…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressに静的HTMLファイルを設置する]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/14/put-html-file-to-octopress/"/>
    <updated>2012-07-14T09:18:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/14/put-html-file-to-octopress</id>
    <content type="html"><![CDATA[<p>構築したブログをGoogleウェブマスターツールに登録する時などに、
静的なHTMLファイルを設置したい時があります。</p>

<p>その場合は、sourceディレクトリ下にHTMLを置いて</p>

<pre><code>$ rake gen_deploy
</code></pre>

<p>するとデプロイされます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown記法のパーサー　markdown-jsを使う]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/10/use-the-markdown-js/"/>
    <updated>2012-07-10T22:38:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/10/use-the-markdown-js</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropbox.com/u/22083548/octopress/markdown-to-html.jpeg" alt="markdown2HTML" /></p>

<p>最近githubやOctopressを使うようになってきたので、markdownをしっかり覚えたい今日この頃です。<br/>
ふと、Javascriptでmarkdown→HTMLに変換してくれるのはないかなと気になったので
今回markdown-jsというのを使ってみました。</p>

<p><strong>markdown-js</strong><br/>
<a href="https://github.com/evilstreak/markdown-js">https://github.com/evilstreak/markdown-js</a></p>

<h2>例</h2>

<pre><code>var md = "#markdown";
console.dir(window.markdown.toHTML(md));
</code></pre>

<h2>リアルタイムにmarkdown→HTMLに変換してみる</h2>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;markdown 2 html&lt;/title&gt;
    &lt;script type="text/javascript" src="./lib/markdown.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;textarea id="markdown"&gt;&lt;/textarea&gt;
    &lt;div id="html"&gt;&lt;/div&gt;
    &lt;script type="text/javascript"&gt;
        $('#markdown').keyup(function (e){
        $('#html').html(window.markdown.toHTML($('#markdown').val()));
        });
    &lt;/script&gt;
&lt;/body&gt;
</code></pre>

<p></html></p>

<h2>参考URL</h2>

<p>にのせき日記　<a href="http://d.hatena.ne.jp/ninoseki/20110620/1308574793">Javascript製Markdown記法パーサー、markdown-js</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Herokuでアプリを作る]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/09/make-an-app-in-heroku/"/>
    <updated>2012-07-09T23:04:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/09/make-an-app-in-heroku</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropbox.com/u/22083548/octopress/heroku.jpeg" alt="heroku" /></p>

<p><strong>Heroku</strong><br/>
<a href="http://www.heroku.com/">http://www.heroku.com/</a></p>

<p>ユーザー登録後、Herokuのgemをインストールする。</p>

<pre><code>$ gem install heroku
</code></pre>

<p>herokuの利用に必要なコマンドがインストールされる。</p>

<h2>作成したアプリ一覧を確認</h2>

<pre><code>$ heroku list
</code></pre>

<h2>新規Railsアプリを作成</h2>

<pre><code>$ rails new newApp
</code></pre>

<h2>アプリの起動確認</h2>

<pre><code>$ cd newApp
$ rails s
</code></pre>

<h2>git初期化</h2>

<pre><code>$ git init
$ git add .
$ git commit -m "initialize"
</code></pre>

<h2>Herokuで動かす</h2>

<pre><code>$ heroku create appname
</code></pre>

<p><a href="http://ppworks.hatenablog.jp/entry/2012/03/04/141951">macを買って、今すぐherokuでruby1.9.3 + rails3.2しよう！</a> から引用させていただきます。<br/>
必要最低限のgemを記述。</p>

<pre><code>$ curl https://raw.github.com/gist/1970532/376b6a26ed936ac43cad0b17a64512f5c0216a50/Gemifile &gt; Gemfile
$ rm -f Gemfile.lock
$ bundle install --without production
$ git add -A
$ git commit -m 'Update Gemfile'
</code></pre>

<p>中身はこんな感じ。<br/>
herokuでは、PostgreSQL使うので、pgを指定したり、developmentでしか使わないものはそこに移動とかです。</p>

<pre><code>source 'https://rubygems.org'

gem 'rails', '3.2.2'
gem 'jquery-rails'

group :assets do
  gem 'sass-rails',   '~&gt; 3.2.3'
  gem 'coffee-rails', '~&gt; 3.2.1'
  gem 'uglifier', '&gt;= 1.0.3'
end

group :test, :development do
  gem 'sqlite3'
  gem 'heroku'
end

group :production do
  gem 'pg'
  gem 'thin'
end
</code></pre>

<p>Herokuにデプロイ</p>

<pre><code>$ git push heroku master
$ heroku open
</code></pre>

<p>参考URL<br/>
<a href="http://ppworks.hatenablog.jp/entry/2012/03/04/141951">macを買って、今すぐherokuでruby1.9.3 + rails3.2しよう！</a><br/>
<a href="http://gihyo.jp/dev/serial/01/heroku/0002?page=2">Herokuで作るFacebookアプリ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressにコメント機能を追加する]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/08/add-comments-feature-to-octopress/"/>
    <updated>2012-07-08T14:46:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/08/add-comments-feature-to-octopress</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropbox.com/u/22083548/octopress/disqus.jpeg" alt="DISQUS" /></p>

<p>OctopressはデフォルトでDISQUSをサポートしているので、<br/>
DISQUSにサイトを登録して、_config.ymlに設定するだけでコメントを利用できる。</p>

<p><strong>DISQUS</strong><br/>
<a href="http://disqus.com/">http://disqus.com/</a></p>

<p>_config.ymlに、DISQUSで登録したshortnameを設定する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>disqus_short_name: your shortname</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rbenvを使う]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/08/use-rbenv/"/>
    <updated>2012-07-08T03:11:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/08/use-rbenv</id>
    <content type="html"><![CDATA[<h2>インストール可能な一覧</h2>

<p>$ rbenv install</p>

<h2>インストール</h2>

<p>$ rbenv install 1.9.2-p320</p>

<h2>インストールされているバージョンを確認</h2>

<p>$ rbenv versions</p>

<h2>通常使うバージョンを指定</h2>

<p>$ rbenv global 1.9.3-p194
$ rbenv rehash</p>

<h2>不要になったRubyを削除</h2>

<p>$ rbenv -rf .rbenv/versions/1.8.6-p420</p>

<h2>ディレクトリで使うrubyのバージョンを固定する</h2>

<p>$ rbenv local 1.9.2-p320
→ .rbenv-version ファイルが作られて、その中に選択したバージョンが書き込まれる</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress + github でブログを始める]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/08/octopress-plus-github/"/>
    <updated>2012-07-08T01:56:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/08/octopress-plus-github</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropbox.com/u/22083548/octopress/octopress.png" alt="OCTOPRESS" /></p>

<p><strong>Octopress</strong></p>

<p><a href="http://octopress.org/" title="Octopress">http://octopress.org/</a></p>

<p><strong>github</strong></p>

<p><a href="https://github.com/" title="Octopress">https://github.com/</a></p>

<h2>githubでリポジトリを作成</h2>

<p>リポジトリ名がURLになる。</p>

<p>http://{ユーザー名}.github.com/{リポジトリ名}/</p>

<h2>Octopressインストール</h2>

<ul>
<li><p>2012/07/08 時点ではRuby 1.9.2でしか動作しないようなので
rbenv等で環境を用意する。</p></li>
<li><p>Octopress用のディレクトリで使うRubyのバージョンを固定する</p></li>
</ul>


<p>$ rubyenv local 1.9.2-p320
→ .rbenv-version ファイルが作られて、その中に選択したバージョンが書き込まれる</p>

<p><em>Octopress Setup</em></p>

<p><a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></p>

<h2>Octpressの設定</h2>

<p>_config.yml を編集する</p>

<h2>Github Pagesにデプロイ</h2>

<p><em>Deploying to Github Pages</em></p>

<p><a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a></p>

<ul>
<li>投稿作成</li>
</ul>


<p>$ rake new_post[&#8220;投稿タイトル&#8221;]</p>

<p>source/_posts/YYYY-MM-DD-{投稿タイトル}.markdown を編集</p>

<ul>
<li>HTML生成</li>
</ul>


<p>$ rake generate</p>

<ul>
<li>プレビュー(localhost:4000)</li>
</ul>


<p>$ rake preview</p>

<p>編集内容は即時反映される</p>

<ul>
<li>ブログにアップ</li>
</ul>


<p>$ rake deploy</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rbenvでrubyをインストールする時にエラー]]></title>
    <link href="http://ackintosh.github.com/blog/2012/07/08/rvenvderubywoinsutorusurushi-niera/"/>
    <updated>2012-07-08T00:01:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/07/08/rvenvderubywoinsutorusurushi-niera</id>
    <content type="html"><![CDATA[<h3>rbenvでrubyをインストールする時に下記のエラーがでる場合</h3>

<p>readline.c: In function ‘username_completion_proc_call’:<br/>
readline.c:1386: error: ‘username_completion_function’ undeclared (first use in this function)<br/>
readline.c:1386: error: (Each undeclared identifier is reported only once<br/>
readline.c:1386: error: for each function it appears in.)<br/>
make[1]: *** [readline.o] Error 1<br/>
make: *** [mkmain.sh] Error 1</p>

<h3>下記実行して再トライ</h3>

<p>$ export CONFIGURE_OPTS=&#8221;&#8211;with-arch=i386 &#8211;with-readline-dir=/usr/local/Cellar/readline/6.2.2&#8221;</p>
]]></content>
  </entry>
  
</feed>
