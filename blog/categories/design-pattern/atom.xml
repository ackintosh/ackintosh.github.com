<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design Pattern | 暁 [stfuawsc]]]></title>
  <link href="http://ackintosh.github.com/blog/categories/design-pattern/atom.xml" rel="self"/>
  <link href="http://ackintosh.github.com/"/>
  <updated>2013-02-24T16:29:55+09:00</updated>
  <id>http://ackintosh.github.com/</id>
  <author>
    <name><![CDATA[Ackintosh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyでObserverパターン]]></title>
    <link href="http://ackintosh.github.com/blog/2013/02/03/observer-pattern-in-ruby/"/>
    <updated>2013-02-03T19:11:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2013/02/03/observer-pattern-in-ruby</id>
    <content type="html"><![CDATA[<h2>Observerパターン メモ</h2>

<p>他のコンポーネントの動きを監視するコンポーネントを作ることが出来る。<br/>
オブジェクト同士を結合させることがないので、スパゲッティにならずにすむ。<br/>
情報を通知するクラスをサブジェクト(Subject)、情報を受け取るクラスをオブザーバ(Observer)と呼ぶ。</p>

<!-- more -->


<h4>gistfile1.rb</h4>

<p>Subject: Employee<br/>
Observer: Payroll, TaxMan<br/>
Subjectの機能をモジュールとして実装。</p>

<h4>gistfile2.rb</h4>

<p>Ruby標準のObservableモジュールを使った場合。</p>

<h4>gistfile3.rb</h4>

<p>Observerをコードブロックで実装した場合。</p>

<p><a href="https://gist.github.com/4701126">https://gist.github.com/4701126</a></p>

<script src="https://gist.github.com/4701126.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyでStrategyパターン]]></title>
    <link href="http://ackintosh.github.com/blog/2012/11/04/strategy-pattern-in-ruby/"/>
    <updated>2012-11-04T17:04:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/11/04/strategy-pattern-in-ruby</id>
    <content type="html"><![CDATA[<h3>Strategyパターン</h3>

<ul>
<li><p>アルゴリズムに多態性を持たせたい場合の、委譲ベースのアプローチ。</p></li>
<li><p>コンテキストとストラテジオブジェクト間のインターフェースに注意して設計する。</p></li>
</ul>


<!-- more -->


<h3>Rubyで書く</h3>

<ul>
<li><p>基底クラスFormatterはoutput_reportメソッドで例外を投げているだけなので、<br/>
この場合、基底クラスを定義せずに書く具象クラスを書いていったほうがRuby的。(ダックタイピング哲学)</p></li>
<li><p>Report#output_reportの引数がオブジェクトの参照なので、データの流れをシンプルにするが、クラス間の結合度が上がってしまっている。<br/>
→必要な引数の数が少なければ、オブジェクトでなくても良い。<br/>
(コンテキスト - ストラテジオブジェクト間のインターフェースの検討)</p></li>
</ul>


<script src="https://gist.github.com/4010809.js?file=gistfile1.rb"></script>


<p></p>

<p>埋め込んだコードが表示されない場合はこちら<br/>
→ <a href="https://gist.github.com/4010809">https://gist.github.com/4010809</a></p>

<h3>コードブロック(Procオブジェクト)を使って書く</h3>

<ul>
<li>コード例のように、ストラテジオブジェクトの実装がシンプルな場合には、ストラテジをコードブロックに置き換えることでシンプル且つRuby的になる。</li>
</ul>


<script src="https://gist.github.com/4010931.js?file=gistfile1.rb"></script>


<p></p>

<p>埋め込んだコードが表示されない場合はこちら<br/>
→ <a href="https://gist.github.com/4010931">https://gist.github.com/4010931</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyでTemplate Methodパターン]]></title>
    <link href="http://ackintosh.github.com/blog/2012/10/24/template-method-pattern-in-ruby/"/>
    <updated>2012-10-24T20:45:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/10/24/template-method-pattern-in-ruby</id>
    <content type="html"><![CDATA[<p>Template Methodパターンは、アルゴリズムに多態性を持たせたい場合に有効。</p>

<p>Rubyは抽象メソッドをサポートしていないので、Reportクラスのoutput_lineメソッドでは例外を投げるようにしている。</p>

<!-- more -->


<p><em>output_start</em> メソッドや <em>output_end</em> メソッドのように、<br/>
<em>Template Methodの具象クラスによってオーバーライドできる非抽象メソッド</em><br/>
を<strong>フックメソッド</strong> という。</p>

<script src="https://gist.github.com/3945597.js?file=gistfile1.rb"></script>


<p></p>

<p>埋め込んだコードが表示されない場合はこちら
→ <a href="https://gist.github.com/3945597">https://gist.github.com/3945597</a></p>
]]></content>
  </entry>
  
</feed>
