<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | 暁]]></title>
  <link href="http://ackintosh.github.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://ackintosh.github.com/"/>
  <updated>2012-10-21T22:01:37+09:00</updated>
  <id>http://ackintosh.github.com/</id>
  <author>
    <name><![CDATA[Ackintosh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[traitを使ってObserverパターンを書いてみました。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/09/16/sample-of-observer-pattern-using-php5-dot-4/"/>
    <updated>2012-09-16T16:43:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/09/16/sample-of-observer-pattern-using-php5-dot-4</id>
    <content type="html"><![CDATA[<p>php5.4の目玉機能の１つ、trait。<br/>
RubyのMix-in的なことができると噂は聞いていたのですが、今までなんとなくスルーしてました・・・。</p>

<p>そんな中、phpカンファレンス2012に行ってモチベーションアップしてきたので勉強！<br/>
使い方はphpマニュアルにとても詳しく書いてあったので助かりました。感謝。<br/>
<a href="http://php.net/manual/ja/language.oop5.traits.php">http://php.net/manual/ja/language.oop5.traits.php</a></p>

<p>そんな学びたてホヤホヤのtraitを使ってObserverパターンを書いてみました。</p>

<!-- more -->


<p>埋め込んだコードが表示されない方はこちら<br/>
<a href="https://gist.github.com/3731335">https://gist.github.com/3731335</a></p>

<script src="https://gist.github.com/3731335.js"> </script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP5.4でメソッドから返る配列の扱いが便利になったようです。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/25/array-is-useful-in-php5-dot-4/"/>
    <updated>2012-08-25T16:16:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/25/array-is-useful-in-php5-dot-4</id>
    <content type="html"><![CDATA[<p>以前書いた、<a href="http://ackintosh.github.com/blog/2012/08/14/method-chain-is-useful-in-php5-dot-4/">PHP5.4でメソッドチェーンが便利になったようです。</a> の配列版みたいなものです。</p>

<p><em>もう知ってるよ！という方は、光よりも速く読み飛ばしてください。</em></p>

<!-- more -->


<h2>PHP5.3以前</h2>

<p>メソッドから返ってくる配列にアクセスする場合、PHP5.3以前では<br/>
わざわざ変数に入れる必要がありました。</p>

<pre><code>&lt;?php
$result_array = getSomethingArray();
echo $result_array[1];  
</code></pre>

<p>特定の要素だけが欲しい時はこれがストレスになってしょうがないです。</p>

<h2>PHP5.4</h2>

<p>関数やメソッドの実行に続けてブラケットで要素を指定できるようになりました！</p>

<pre><code>&lt;?php
function hogefuga()
{
    return array('ho', 'ge', 'fu', 'ga');
}
echo hogefuga()[1];// 'ge'

$str = "ho,ge,fu,ga";
echo explode(",", $str)[2];// 'fu'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP5.4でメソッドチェーンが便利になったようです。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/14/method-chain-is-useful-in-php5-dot-4/"/>
    <updated>2012-08-14T01:39:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/14/method-chain-is-useful-in-php5-dot-4</id>
    <content type="html"><![CDATA[<h2>PHP5.0〜5.3</h2>

<p>インスタンス生成から直接メソッドチェーンを実行するために、Creation Methodを定義する必要がありました。<br/>
面倒ですよね(；´∀｀)</p>

<!-- more -->


<pre><code>Hoge::create('Hello')-&gt;fuga();

class Hoge
{
    private $message;

    private function __construct($message)
    {
        $this-&gt;message = $message;
    }

    public static function create($message)
    {
        return new self($message);
    }

    public function fuga()
    {
        echo $this-&gt;message;
    }
}
</code></pre>

<h2>PHP5.4〜</h2>

<p>Creation Method を定義せず、コンストラクタから直接メソッドチェーンが実行できます。</p>

<pre><code>(new Hoge('Hello'))-&gt;fuga();

class Hoge
{
    private $message;

    public function __construct($message)
    {
        $this-&gt;message = $message;
    }

    public function fuga()
    {
        echo $this-&gt;message;
    }
}
</code></pre>

<h2>MacへのPHP5.4インストールでこちらを参考にさせていただきました</h2>

<p><a href="http://www.1x1.jp/blog/2012/05/php_54_for_mac_os_x_as_binary_package.html">Macで一番簡単にPHP5.4をインストールする方法</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPでWebアプリフレームワーク作ってみました。]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/12/developed-php-framework/"/>
    <updated>2012-08-12T11:03:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/12/developed-php-framework</id>
    <content type="html"><![CDATA[<p>Anote(アノート)という名前にしました。</p>

<p><a href="https://github.com/ackintosh/Anote">https://github.com/ackintosh/Anote</a></p>

<p>アノテーションを使って何かやりたいと思ったのと、フレームワークの習作を兼ねて作りはじめました。</p>

<p>まだまだお粗末な実装なので(；´∀｀)ガンガンforkしてください(・∀・)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MAMPでPHPUnitを使う]]></title>
    <link href="http://ackintosh.github.com/blog/2012/08/04/using-phpunit-with-mamp/"/>
    <updated>2012-08-04T16:39:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/08/04/using-phpunit-with-mamp</id>
    <content type="html"><![CDATA[<p>既にMAMPにインストールされている。</p>

<pre><code>$ /Applications/MAMP/bin/php/php5.3.6/bin/phpunit --version
PHPUnit 3.6.10 by Sebastian Bergmann.  
</code></pre>

<p>下記のようにインクルードして使う。</p>

<pre><code>require_once('PHPUnit/Autoload.php');
class HogeTest extends PHPUnit_Framework_TestCase
{
}
</code></pre>
]]></content>
  </entry>
  
</feed>
