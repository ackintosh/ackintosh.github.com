<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | 暁 [stfuawsc]]]></title>
  <link href="http://ackintosh.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://ackintosh.github.io/"/>
  <updated>2013-05-24T00:06:57+09:00</updated>
  <id>http://ackintosh.github.io/</id>
  <author>
    <name><![CDATA[Ackintosh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ChefでPHPをインストール]]></title>
    <link href="http://ackintosh.github.io/blog/2013/05/06/install-php-by-chef/"/>
    <updated>2013-05-06T16:45:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/05/06/install-php-by-chef</id>
    <content type="html"><![CDATA[<p>Opscode Communiityでレシピが提供されていますが、練習のために自分で作成します。</p>

<p><a href="http://community.opscode.com/cookbooks/php" target="_blank">Chef Cookbook: php - Opscode Community</a></p>

<ul>
<li><em>対象ノードを192.168.50.12で設定しています。</em></li>
<li><em>実運用では、Template Resouceを利用してphp.iniを設定する等が必要になります。</em></li>
</ul>


<!-- more -->


<h3>クックブック作成</h3>

<pre><code>$ knife cookbook create php

** Creating cookbook php
** Creating README for cookbook: php
** Creating CHANGELOG for cookbook: php
** Creating metadata for cookbook: php
</code></pre>

<h3>レシピを編集</h3>

<p><code>cookbooks/php/recipes/default.rb</code></p>

<pre><code>package "php" do
  action :install
end
</code></pre>

<h3>jsonのrun_listに追加</h3>

<p><code>nodes/192.168.50.12.json</code></p>

<pre><code>{
  "run_list" : [
    "php"
  ]
}
</code></pre>

<h3>レシピをノードに適用</h3>

<pre><code>$ knife solo cook 192.168.50.12

Recipe: php::default
  * package[php] action install
    - install version 5.3.3-22.el6 of package php
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FuelPHPでファイルアップロード]]></title>
    <link href="http://ackintosh.github.io/blog/2013/04/30/fileupload-in-fuelphp/"/>
    <updated>2013-04-30T20:53:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/04/30/fileupload-in-fuelphp</id>
    <content type="html"><![CDATA[<p>FuelPHPでファイルアップロードするときのメモです。φ(..)メモメモ</p>

<p><a href="http://fuelphp.com/" target="_blank">FuelPHP &raquo; A simple, flexible, community driven PHP5.3 framework.</a><br/>
<a href="http://fuelphp.jp/" target="_blank">FuelPHP.JP 日本語ドキュメント</a></p>

<!-- more -->


<h3>設定ファイルをappディレクトリにコピー</h3>

<pre><code>$ cp core/config/upload.php app/config/
</code></pre>

<h3>viewを作成</h3>

<p>gistfile1.php</p>

<h3>controllerを作成</h3>

<p>gistfile2.php</p>

<script src="https://gist.github.com/ackintosh/5488231.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FuelPHPに独自の設定ファイルを追加する]]></title>
    <link href="http://ackintosh.github.io/blog/2013/04/29/custom-configuration-file-for-fuelphp/"/>
    <updated>2013-04-29T16:37:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/04/29/custom-configuration-file-for-fuelphp</id>
    <content type="html"><![CDATA[<p>FuelPHPで、独自に作成した設定ファイルを使う方法のメモです。φ(｀д´)ﾒﾓﾒﾓ…</p>

<p><a href="http://fuelphp.com/" target="_blank">FuelPHP &raquo; A simple, flexible, community driven PHP5.3 framework.</a><br/>
<a href="http://fuelphp.jp/" target="_blank">FuelPHP.JP 日本語ドキュメント</a></p>

<!-- more -->


<h3>設定ファイルを作成</h3>

<p>gistfile1.php</p>

<h3>設定を読み込む</h3>

<p>gistfile2.php</p>

<p><code>Config::load()</code>の第2引数に文字列を渡すと、任意のグループ名を指定できる。</p>

<script src="https://gist.github.com/ackintosh/5480241.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FuelPHPに独自のバリデーションルールを追加する]]></title>
    <link href="http://ackintosh.github.io/blog/2013/04/29/custom-validation-for-fuelphp/"/>
    <updated>2013-04-29T16:08:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/04/29/custom-validation-for-fuelphp</id>
    <content type="html"><![CDATA[<p><a href="http://fuelphp.com/" target="_blank">FuelPHP &raquo; A simple, flexible, community driven PHP5.3 framework.</a><br/>
<a href="http://fuelphp.jp/" target="_blank">FuelPHP.JP 日本語ドキュメント</a></p>

<p>実際の開発では、独自のバリデーションルールがいくつか必要になります。<br/>
FuelPHPで追加する方法のメモです。φ(｀д´)ﾒﾓﾒﾓ…</p>

<!-- more -->


<h3>バリデーションルールを定義する</h3>

<p>gistfile1.php</p>

<h3>定義したルールのテストを書く</h3>

<p>gistfile2.php</p>

<h3>ルールを適用する</h3>

<p>gistfile3.php</p>

<h3>エラーメッセージを定義する</h3>

<p>gistfile4.php</p>

<script src="https://gist.github.com/ackintosh/5479927.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPでTCPサーバー]]></title>
    <link href="http://ackintosh.github.io/blog/2013/04/18/tcp-server-written-in-php/"/>
    <updated>2013-04-18T22:57:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/04/18/tcp-server-written-in-php</id>
    <content type="html"><![CDATA[<p>PHPでTCPサーバーを書いてみました。</p>

<p>pcntl関数を使うには、phpソースをbuildする時に--enable-pcntlを付けないといけません。</p>

<!-- more -->


<p>個人的には、pcntl_fork()したあとswitch文で分岐する流れが、
理解するのに苦労しました。</p>

<p>ちょうどRubyで並列処理を勉強していたのですが、
やっぱりRubyの方が直感的で書きやすいですね。  <br/>
<a href="http://melborne.github.io/2011/09/29/irb-Ruby-fork-WebSocket/">irbから学ぶRubyの並列処理 ~ forkからWebSocketまで</a></p>

<script src="https://gist.github.com/ackintosh/5381925.js"></script>

]]></content>
  </entry>
  
</feed>
