<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | 暁 [stfuawsc]]]></title>
  <link href="http://ackintosh.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://ackintosh.github.io/"/>
  <updated>2013-04-29T16:24:18+09:00</updated>
  <id>http://ackintosh.github.io/</id>
  <author>
    <name><![CDATA[Ackintosh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FuelPHPに独自のバリデーションルールを追加する]]></title>
    <link href="http://ackintosh.github.io/blog/2013/04/29/custom-validation-for-fuelphp/"/>
    <updated>2013-04-29T16:08:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/04/29/custom-validation-for-fuelphp</id>
    <content type="html"><![CDATA[<p><a href="http://fuelphp.com/" target="_blank">FuelPHP &raquo; A simple, flexible, community driven PHP5.3 framework.</a><br/>
<a href="http://fuelphp.jp/" target="_blank">FuelPHP.JP 日本語ドキュメント</a></p>

<p>実際の開発では、独自のバリデーションルールがいくつか必要になります。<br/>
FuelPHPで追加する方法のメモです。φ(｀д´)ﾒﾓﾒﾓ…</p>

<!-- more -->


<h3>バリデーションルールを定義する</h3>

<p>gistfile1.php</p>

<h3>定義したルールのテストを書く</h3>

<p>gistfile2.php</p>

<h3>ルールを適用する</h3>

<p>gistfile3.php</p>

<h3>エラーメッセージを定義する</h3>

<p>gistfile4.php</p>

<script src="https://gist.github.com/ackintosh/5479927.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPでTCPサーバー]]></title>
    <link href="http://ackintosh.github.io/blog/2013/04/18/tcp-server-written-in-php/"/>
    <updated>2013-04-18T22:57:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/04/18/tcp-server-written-in-php</id>
    <content type="html"><![CDATA[<p>PHPでTCPサーバーを書いてみました。</p>

<p>pcntl関数を使うには、phpソースをbuildする時に--enable-pcntlを付けないといけません。</p>

<!-- more -->


<p>個人的には、pcntl_fork()したあとswitch文で分岐する流れが、
理解するのに苦労しました。</p>

<p>ちょうどRubyで並列処理を勉強していたのですが、
やっぱりRubyの方が直感的で書きやすいですね。  <br/>
<a href="http://melborne.github.io/2011/09/29/irb-Ruby-fork-WebSocket/">irbから学ぶRubyの並列処理 ~ forkからWebSocketまで</a></p>

<script src="https://gist.github.com/ackintosh/5381925.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPでマージソート]]></title>
    <link href="http://ackintosh.github.io/blog/2013/03/17/mergesort-in-php/"/>
    <updated>2013-03-17T21:03:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/03/17/mergesort-in-php</id>
    <content type="html"><![CDATA[<p>1から自分で実装してみたかったので、
あえてarray系関数は使わないようにしてます。</p>

<!-- more -->




<script src="https://gist.github.com/ackintosh/5180548.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SublimeText2 + MAMPでXdebugを使う]]></title>
    <link href="http://ackintosh.github.io/blog/2013/02/24/using-xdebug-on-st2/"/>
    <updated>2013-02-24T15:23:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/02/24/using-xdebug-on-st2</id>
    <content type="html"><![CDATA[<p>こんな素敵なブログ記事がありましたので試してみました。<br/>
<a href="http://www.calmtech.net/2012/12/18/st2-mamp-xdebug/" target="_blank">Sublime Text 2 + MAMP + Xdebug でPHPデバッグをする方法</a></p>

<p>自分用にメモを残しておきます。</p>

<!-- more -->


<p><img src="https://dl.dropbox.com/u/22083548/octopress/2013/02/st2_xdebug.png" alt="ST2+Xdebug" /></p>

<h2>Package ControlでSublimeXdebugをインストール</h2>

<p><a href="https://github.com/Kindari/SublimeXdebug" target="_blank">Kindari / SublimeXdebug</a></p>

<ul>
<li>Ctrl + Shift + p でコマンドパレットを表示</li>
<li>install とタイプするとPackage Control: Install PackageがハイライトされるのでEnter</li>
<li>xdebug とタイプするとSublimeXDebugがハイライトされるのでEnter</li>
</ul>


<h2>php.iniに設定追加</h2>

<script src="https://gist.github.com/ackintosh/5022883.js"></script>


<p>dbgpをクォーテーションで囲った状態だとエラーになりました。</p>

<pre><code>xdebug.remote_handler="dbgp"
</code></pre>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/2013/02/xdebug_error.png" alt="Xdebug Error" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPで関数型プログラミング]]></title>
    <link href="http://ackintosh.github.io/blog/2013/02/02/functional-programming-in-php/"/>
    <updated>2013-02-02T19:57:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/02/02/functional-programming-in-php</id>
    <content type="html"><![CDATA[<p>ある日、こちらの記事を読んでいて<br/>
<a href="http://melborne.github.com/2013/01/21/why-fp-with-ruby/">Rubyを使って「なぜ関数プログラミングは重要か」を読み解く（改定）─ 前編 ─ 但し後編の予定なし</a><br/>
PHPにもクロージャあるし、PHPで出来そうだ！ということで書いてみました。</p>

<!-- more -->


<p>やっぱりRubyの方が簡潔で良いですね ^_^ ;</p>

<p>まだ関数型の勉強を本格的にできてないのですが、<br/>
余計な変数を一切宣言しなくて済むのが素敵だなぁと思いました。<br/>
ループを再帰で書くのがまたカッコイイ！</p>

<p><a href="https://gist.github.com/4696317.git">https://gist.github.com/4696317.git</a></p>

<script src="https://gist.github.com/4696317.js"></script>



]]></content>
  </entry>
  
</feed>
