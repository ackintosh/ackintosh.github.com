<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | 暁 [stfuawsc]]]></title>
  <link href="http://ackintosh.github.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://ackintosh.github.com/"/>
  <updated>2013-04-18T08:46:09+09:00</updated>
  <id>http://ackintosh.github.com/</id>
  <author>
    <name><![CDATA[Ackintosh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHPでマージソート]]></title>
    <link href="http://ackintosh.github.com/blog/2013/03/17/mergesort-in-php/"/>
    <updated>2013-03-17T21:03:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2013/03/17/mergesort-in-php</id>
    <content type="html"><![CDATA[<p>1から自分で実装してみたかったので、
あえてarray系関数は使わないようにしてます。</p>

<!-- more -->




<script src="https://gist.github.com/ackintosh/5180548.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SublimeText2 + MAMPでXdebugを使う]]></title>
    <link href="http://ackintosh.github.com/blog/2013/02/24/using-xdebug-on-st2/"/>
    <updated>2013-02-24T15:23:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2013/02/24/using-xdebug-on-st2</id>
    <content type="html"><![CDATA[<p>こんな素敵なブログ記事がありましたので試してみました。<br/>
<a href="http://www.calmtech.net/2012/12/18/st2-mamp-xdebug/" target="_blank">Sublime Text 2 + MAMP + Xdebug でPHPデバッグをする方法</a></p>

<p>自分用にメモを残しておきます。</p>

<!-- more -->


<p><img src="https://dl.dropbox.com/u/22083548/octopress/2013/02/st2_xdebug.png" alt="ST2+Xdebug" /></p>

<h2>Package ControlでSublimeXdebugをインストール</h2>

<p><a href="https://github.com/Kindari/SublimeXdebug" target="_blank">Kindari / SublimeXdebug</a></p>

<ul>
<li>Ctrl + Shift + p でコマンドパレットを表示</li>
<li>install とタイプするとPackage Control: Install PackageがハイライトされるのでEnter</li>
<li>xdebug とタイプするとSublimeXDebugがハイライトされるのでEnter</li>
</ul>


<h2>php.iniに設定追加</h2>

<script src="https://gist.github.com/ackintosh/5022883.js"></script>


<p>dbgpをクォーテーションで囲った状態だとエラーになりました。</p>

<pre><code>xdebug.remote_handler="dbgp"
</code></pre>

<p><img src="https://dl.dropbox.com/u/22083548/octopress/2013/02/xdebug_error.png" alt="Xdebug Error" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPで関数型プログラミング]]></title>
    <link href="http://ackintosh.github.com/blog/2013/02/02/functional-programming-in-php/"/>
    <updated>2013-02-02T19:57:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2013/02/02/functional-programming-in-php</id>
    <content type="html"><![CDATA[<p>ある日、こちらの記事を読んでいて<br/>
<a href="http://melborne.github.com/2013/01/21/why-fp-with-ruby/">Rubyを使って「なぜ関数プログラミングは重要か」を読み解く（改定）─ 前編 ─ 但し後編の予定なし</a><br/>
PHPにもクロージャあるし、PHPで出来そうだ！ということで書いてみました。</p>

<!-- more -->


<p>やっぱりRubyの方が簡潔で良いですね ^_^ ;</p>

<p>まだ関数型の勉強を本格的にできてないのですが、<br/>
余計な変数を一切宣言しなくて済むのが素敵だなぁと思いました。<br/>
ループを再帰で書くのがまたカッコイイ！</p>

<p><a href="https://gist.github.com/4696317.git">https://gist.github.com/4696317.git</a></p>

<script src="https://gist.github.com/4696317.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ZendQueueとKestrelでメッセージキューサーバーを体験]]></title>
    <link href="http://ackintosh.github.com/blog/2013/01/03/message-queue-server-with-php/"/>
    <updated>2013-01-03T22:58:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2013/01/03/message-queue-server-with-php</id>
    <content type="html"><![CDATA[<h3>Kestrel</h3>

<p>Scalaで書かれたメッセージキューサーバー。Twitterで使われてるらしいです。<br/>
<a href="http://samuraism.jp/diary/2011/11/20/1321770660000.html">Twitterで使っているScalaで書かれたオープンソースのメッセージキューサーバー、Kestrel :侍ズム#samuraism</a></p>

<!-- more -->


<h4>インストールと起動</h4>

<pre><code>$ curl -O http://robey.github.com/kestrel/download/kestrel-2.4.1.zip
$ unzip kestrel-2.4.1.zip
$ cd kestrel-2.4.1
$ sudo java -jar kestrel_2.9.2-2.4.1.jar
</code></pre>

<h3>ZendQueue</h3>

<p>Zend Frameworkのコンポーネントの１つで、メッセージキューを利用するために使います。　　</p>

<p>GitHub
<a href="https://github.com/zendframework/ZendQueue">https://github.com/zendframework/ZendQueue</a></p>

<p>メッセージを格納する方法によって複数のアダプタが用意されています。<br/>
Kestrel用のアダプタはありませんが、Kestrelはmemcachedプロトコルをサポートしているので、MemcacheQアダプタを利用します。</p>

<h3>Memcache</h3>

<p>あらかじめMemcachedライブラリもインストールしておいて下さい。<br/>
Macの場合はHomebrewを使うと簡単にインストールできます♪</p>

<pre><code>$ brew install memcached
$ brew install memcache-php
</code></pre>

<h3>メッセージキューサーバーを体験</h3>

<p>２つのスクリプトを用意してください。<br/>
・worker.php : ワーカープロセス。キューからメッセージを取得して表示する。<br/>
・front.php : キューにメッセージを送信する。</p>

<script src="https://gist.github.com/4444078.js"></script>


<p>
<a href="https://gist.github.com/4444078">https://gist.github.com/4444078</a></p>

<p>ターミナルを２つたちあげてください。<br/>
・ターミナル１でworker.phpを実行<br/>
プロンプトが返ってこない → Kestrelのキューを監視してくれています。</p>

<p>・ターミナル２でfront.phpを実行すると…<br/>
ターミナル１に「Hello, World!」と表示されます！</p>

<p>簡単ですが以上です。<br/>
Hello, Worldが表示された時には感動しますね (・∀・)<br/>
worker.phpを実行するターミナルを増やしたりするとなお楽しくなってきます♪</p>

<h4>参考</h4>

<p><a href="http://samuraism.jp/diary/2011/11/20/1321770660000.html">Twitterで使っているScalaで書かれたオープンソースのメッセージキューサーバー、Kestrel :侍ズム#samuraism</a><br/>
<a href="http://blog.asial.co.jp/875">PHP+Kestrel+Supervisorでお手軽タスクキューイング :アシアルブログ</a><br/>
<a href="http://codezine.jp/article/detail/5744">PHPアプリでメッセージキューサーバを活用する - Zend_Queue - :CodeZine</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[__callの使いどころ]]></title>
    <link href="http://ackintosh.github.com/blog/2012/11/25/using-the-call/"/>
    <updated>2012-11-25T13:44:00+09:00</updated>
    <id>http://ackintosh.github.com/blog/2012/11/25/using-the-call</id>
    <content type="html"><![CDATA[<p>既存クラスをラップしたい時とか、委譲をたくさん使いたい時に有用です。</p>

<!-- more -->


<script src="https://gist.github.com/4142451.js?file=gistfile1.php"></script>


<p></p>

<p>※コードが表示されない場合はこちら<br/>
<a href="https://gist.github.com/4142451">https://gist.github.com/4142451</a></p>
]]></content>
  </entry>
  
</feed>
