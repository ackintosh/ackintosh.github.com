<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: test | 暁 [stfuawsc]]]></title>
  <link href="http://ackintosh.github.io/blog/categories/test/atom.xml" rel="self"/>
  <link href="http://ackintosh.github.io/"/>
  <updated>2013-10-20T04:16:47+09:00</updated>
  <id>http://ackintosh.github.io/</id>
  <author>
    <name><![CDATA[Ackintosh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ラッパーオブジェクトを使ってテスタビリティを上げる〜WordPressプラグイン]]></title>
    <link href="http://ackintosh.github.io/blog/2013/10/20/wrapper-object/"/>
    <updated>2013-10-20T04:02:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/10/20/wrapper-object</id>
    <content type="html"><![CDATA[<p><a href="http://ackintosh.github.io/blog/2013/10/18/php-testability/">前回</a>、グローバル関数への依存について書いたので
その流れでWordPressプラグインのテストについて。</p>

<!-- more -->


<p>投稿やコメント等を取得するためにWordPressが用意してる関数は
グローバル関数がほとんどです。</p>

<p>なので、テーマのカスタマイズやらプラグインを作る時に
テスタビリティを意識しないとグローバル関数に依存しまくったコードになっちゃいます。</p>

<p>例えば、下記は新着投稿を表示するプラグインなんかでよくあるコードだと思います。</p>

<script src="https://gist.github.com/ackintosh/7060084.js?file=1.php"></script>


<p>これをテストコードで保護するには最低限下記パターンが必要です。</p>

<ul>
<li>get_postsの戻り値が配列でなければ(新着投稿がなければ)、nullを返す</li>
<li>get_postsの戻り値が配列であれば(新着投稿があれば)、その後の処理をして値を返す</li>
</ul>


<p>ですがグローバル関数に依存していると、これを実現するのは難しい。</p>

<p>そこで、関数のラッパーオブジェクト(Proxy)を使います。</p>

<script src="https://gist.github.com/ackintosh/7060084.js?file=2.php"></script>


<p>FooクラスはコンストラクタでFooProxyクラスを受け取っていて、
FooProxyクラスはグローバル関数に処理を委譲しているだけです。</p>

<p>で、テストコードではFooProxyクラスをモックに差し替えればOKです。
例えば</p>

<blockquote><p>・get_postsの戻り値が配列でなければ(新着投稿がなければ)、nullを返す</p></blockquote>

<p>のパターンのテストコードは下記のようになります。</p>

<script src="https://gist.github.com/ackintosh/7060084.js?file=3.php"></script>


<p>同様にして他パターンもテストできます。</p>

<p>これで、モックによってget_postsが返す値を明示することで
Foo::bar() の振る舞いを網羅的にテストできるようになりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[グローバル関数への依存を排除してテスタビリティを上げる]]></title>
    <link href="http://ackintosh.github.io/blog/2013/10/18/php-testability/"/>
    <updated>2013-10-18T00:14:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/10/18/php-testability</id>
    <content type="html"><![CDATA[<p>テストしにくい状況って色々な原因があると思いますが、
今回はグローバル関数への依存について。</p>

<!-- more -->


<p>例えば下記のコードでは receiveDataメソッドの中でmail関数を呼び出しているので
テストしにくくなっています。
（テストは書けるけどテスト走らせる度にメールが飛ぶのはアレですね）</p>

<script src="https://gist.github.com/ackintosh/7026140.js?file=1.php"></script>


<p><a href="http://www.amazon.co.jp/%E3%83%AC%E3%82%AC%E3%82%B7%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89%E6%94%B9%E5%96%84%E3%82%AC%E3%82%A4%E3%83%89-Object-Oriented-SELECTION-%E3%83%9E%E3%82%A4%E3%82%B1%E3%83%AB%E3%83%BBC%E3%83%BB%E3%83%95%E3%82%A7%E3%82%B6%E3%83%BC%E3%82%BA/dp/4798116831" target="_blank">レガシーコード改善ガイド</a>では
グローバル関数の部分をインスタンスメソッドにして、処理をグローバル関数にまるっと委譲することで、接合部を作る方法が紹介されています。
例えばこんな感じでしょうか。</p>

<script src="https://gist.github.com/ackintosh/7026140.js?file=2.php"></script>


<p>接合部となったメソッドをサブクラスでオーバーライドしてテストしてます。</p>

<p>ただ、わざわざサブクラスを定義するのも面倒な気もするし
もう少しカジュアルな方法がないかなということで</p>

<script src="https://gist.github.com/ackintosh/7026140.js?file=3.php"></script>


<p>テストのためにややプロダクションコードが増えますがメソッドの差し替えができるようになりました。</p>

<p>ちなみに、無名関数の中でアサーションが書けるのでmail関数が受け取る引数をアサートすることもできます。</p>

<p>こんな感じです。</p>

<script src="https://gist.github.com/ackintosh/7026140.js?file=4.php"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DateTimeクラス等に依存したクラスをテストする]]></title>
    <link href="http://ackintosh.github.io/blog/2013/06/11/testing-the-object-that-depend-to-datetime/"/>
    <updated>2013-06-11T22:29:00+09:00</updated>
    <id>http://ackintosh.github.io/blog/2013/06/11/testing-the-object-that-depend-to-datetime</id>
    <content type="html"><![CDATA[<p>DateTimeクラス等に依存したクラスをテストするのは難しい。</p>

<p>オブジェクトが生成された日時を正確に知らないといけないから。</p>

<!-- more -->


<p>例えば本の貸出しを表現したコード</p>

<script src="https://gist.github.com/ackintosh/5748987.js?file=before.php"></script>


<p>このクラスをテストしたい場合。</p>

<p>DateTimeクラスへの依存を下げるためにコンストラクタで渡すようにすると・・・</p>

<script src="https://gist.github.com/ackintosh/5748987.js?file=bad.php"></script>


<p>依存度が下がってテストもできるようになったけど、コンストラクタの第２引数はテストの時しか使わない。プロダクトコードには不要なもの。。。</p>

<p>後々、貸出冊数も渡そうとすると更に酷いことに。</p>

<script src="https://gist.github.com/ackintosh/5748987.js?file=too_bad.php"></script>


<p>そこで、DateTimeを差し替えられるようにstaticメソッドを用意しておくのはどうだろう。</p>

<p>こんな感じ。</p>

<script src="https://gist.github.com/ackintosh/5748987.js?file=after.php"></script>


<p>DIを勉強すればもっと良い方法があるのかな。</p>

<p>まだまだ勉強不足です。</p>
]]></content>
  </entry>
  
</feed>
